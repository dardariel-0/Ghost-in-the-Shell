var t,
  e = {
    624: (t, e, i) => {
      var n = i(880);
      let o = null;
      class r {
        constructor() {
          (this.updateFunctions = []),
            (this.updateFunctionsLength = 0),
            (o = this),
            this.init();
        }
        static getInstance() {
          return o || (o = new r()), o;
        }
        static add(t) {
          r.getInstance().add(t);
        }

        init() {
          (this.lastUpdateTime = 0.001 * performance.now()),
            (this.animFunction = this.update.bind(this)),
            requestAnimationFrame(this.animFunction);
        }
        add(t) {
          this.updateFunctions.push(t),
            (this.updateFunctionsLength = this.updateFunctions.length);
        }
        update(t) {
          requestAnimationFrame(this.animFunction);
          const e = (t *= 0.001) - this.lastUpdateTime,
            i = Math.max(Math.min(e / this.baseDeltaTime, 2), 0.5); //velocidade da animação mouseMove
          let n;
          for (let s = 0; s < this.updateFunctionsLength; s++)
            (n = this.updateFunctions[s]),
              n({ time: t, deltaTime: e, timeScale: i });
          this.lastUpdateTime = t;
        }
      }
      class h {
        constructor() {
          (this.prevSize = { w: 0, h: 0 }),
            (this.checkTime = 0),
            (this.interval = 500),
            (this.getSize = null);
        }
        reset() {
          (this.prevSize = { w: 0, h: 0 }), (this.checkTime = 0);
        }
        setSizeFunc(t) {
          (this.getSize = t), this.reset();
        }
        check() {
          const t = performance.now();
          if (t - this.checkTime < this.interval) return !1;
          this.checkTime = t;
          const { width: e, height: i } = this.getSize();
          return (
            (e !== this.prevSize.w || i !== this.prevSize.h) &&
            ((this.prevSize.w = e), (this.prevSize.h = i), !0)
          );
        }
      }
      class a {
        constructor(t) {
          (this.functions = []),
            (this.numFunctions = 0),
            (this.mq = window.matchMedia(t)),
            this.mq.addEventListener(
              "change",
              this.onMediaQueryChange.bind(this)
            );
        }
        add(t) {
          this.functions.push(t), (this.numFunctions = this.functions.length);
        }

        onMediaQueryChange() {
          for (let t = 0; t < this.numFunctions; t++)
            (0, this.functions[t])(this.mq.matches);
        }
      }
      var c = i(705);
      let l = null;
      class u {
        constructor() {
          if (l) return l;
          (this.onWheelAvailable = "onwheel" in document),
            (this.onKeydownAvailable = "onkeydown" in document),
            (this.onTouchAvailable = "ontouchstart" in document),
            (this.onContextmenuAvailable = "oncontextmenu" in document),
            (this.events = {
              pointerdown: this.onTouchAvailable ? "touchstart" : "pointerdown",
              pointermove: this.onTouchAvailable ? "touchmove" : "pointermove",
              pointerup: this.onTouchAvailable ? "touchend" : "pointerup",
            }),
            (l = this);
        }
        static getInstance() {
          return l || (l = new u()), l;
        }
        static get onWheelAvailable() {
          return u.getInstance().onWheelAvailable;
        }
        static get onKeydownAvailable() {
          return u.getInstance().onKeydownAvailable;
        }
        static get onTouchAvailable() {
          return u.getInstance().onTouchAvailable;
        }
        static get isTouch() {
          return u.getInstance().onTouchAvailable;
        }
        static get onContextmenuAvailable() {
          return u.getInstance().onContextmenuAvailable;
        }
        static get pointerdownEvent() {
          return u.getInstance().events.pointerdown;
        }
        static get pointermoveEvent() {
          return u.getInstance().events.pointermove;
        }
        static get pointerupEvent() {
          return u.getInstance().events.pointerup;
        }
      }
      class d {
        static random(t, e) {
          return void 0 === t
            ? Math.random()
            : void 0 === e
            ? Math.random() * t
            : t + Math.random() * (e - t);
        }
        static randomInt(t, e) {
          return Math.floor(d.random(t, e));
        }
        static constrain(t, e, i) {
          return Math.max(Math.min(t, i), e);
        }
        static map(t, e, i, n, s) {
          return ((t - e) / (i - e)) * (s - n) + n;
        }
        static radians(t) {
          return t * ((2 * Math.PI) / 360);
        }
        static dist(t, e, i, n) {
          return Math.sqrt((t - i) * (t - i) + (e - n) * (e - n));
        }
        static lerp(t, e, i) {
          return t + (e - t) * i;
        }
        static calcViewportFov(t, e) {
          return 2 * Math.atan(t / e) * (180 / Math.PI);
        }
      }
      class g {
        constructor(t, e) {
          (this.x = t), (this.velocity = 0), (this.omega = e);
        }
        update(t, e) {
          const i = e,
            n = this.velocity - (this.x - t) * (this.omega * this.omega * i),
            s = 1 + this.omega * i;
          (this.velocity = n / (s * s)), (this.x += this.velocity * i);
        }
        reset() {
          (this.x = 0), (this.velocity = 0);
        }
      }
      class p {
        constructor({ x: t, y: e }, i) {
          (this.position = { x: t, y: e }),
            (this.velocity = { x: 0, y: 0 }),
            (this.omega = i),
            (this.direction = 0);
        }
        update(t, e) {
          const i = e,
            n =
              this.velocity.x -
              (this.position.x - t.x) * (this.omega * this.omega * i),
            s =
              this.velocity.y -
              (this.position.y - t.y) * (this.omega * this.omega * i),
            o = 1 + this.omega * i;
          (this.velocity.x = n / (o * o)),
            (this.velocity.y = s / (o * o)),
            (this.position.x += this.velocity.x * i),
            (this.position.y += this.velocity.y * i);
        }
        calcDirection(t) {
          this.direction = Math.atan2(
            this.position.y - t.y,
            this.position.x - t.x
          );
        }
        reset() {
          (this.position.x = 0),
            (this.position.y = 0),
            (this.velocity.x = 0),
            (this.velocity.y = 0),
            (this.direction = 0);
        }
        set x(t) {
          this.position.x = t;
        }
        set y(t) {
          this.position.y = t;
        }
        get x() {
          return this.position.x;
        }
        get y() {
          return this.position.y;
        }
      } //pixels
      class v {
        constructor(t, e = { strictArea: !1, useTouch: !1 }) {
          (this.strictArea = e.strictArea),
            (this.useTouch = e.useTouch),
            (this.$area = null),
            (this.$target = null),
            (this.direction = t),
            (this.downPos = 0),
            (this.prevPos = 0),
            (this.targetPosition = 0),
            (this.position = 0),
            (this.velocity = 0),
            (this.acceleration = 0),
            (this.k = 0.4),
            (this.max = 0),
            (this.progress = 0),
            (this.isPointerDown = !1),
            (this.isDragging = !1),
            (this.isAutoScrolling = !1),
            (this.tween = new g(0, 30)),
            (this.onWheelFunction = this.onWheel.bind(this)),
            (this.onKeyDownFunction = this.onKeyDown.bind(this)),
            (this.onDownFunction = this.onDown.bind(this)),
            (this.onMoveFunction = this.onMove.bind(this)),
            (this.onUpFunction = this.onUp.bind(this)),
            (this.onContextMenuFunc = this.onContextMenu.bind(this)),
            (this.listenerOption = { capture: !0, passive: !1 }),
            (this.canceller = () => !1),
            (this.resizeMng = new h());
        }
        setTarget(t) {
          this.removeEvents(),
            (this.$area = t),
            (this.$target = this.$area.querySelector('[data-scroll="target"]')),
            this.setEvents(),
            this.reset(),
            this.resizeMng.setSizeFunc(() => {
              const { width: t, height: e } =
                this.$target.getBoundingClientRect();
              return {
                width: t + window.innerWidth,
                height: e + window.innerHeight,
              };
            });
        }
        setCanceller(t) {
          this.canceller = t;
        }
        setEvents() {
          if (!this.$target) return;
          const t = this.strictArea ? this.$area : window;
          u.onWheelAvailable &&
            t.addEventListener(
              "wheel",
              this.onWheelFunction,
              this.listenerOption
            ),
            !this.strictArea &&
              u.onKeydownAvailable &&
              window.addEventListener("keydown", this.onKeyDownFunction),
            (u.isTouch || this.useTouch) &&
              (this.$area.addEventListener(
                u.pointerdownEvent,
                this.onDownFunction,
                this.listenerOption
              ),
              this.$area.addEventListener(
                u.pointermoveEvent,
                this.onMoveFunction,
                this.listenerOption
              ),
              this.$area.addEventListener(
                u.pointerupEvent,
                this.onUpFunction,
                this.listenerOption
              )),
            u.onContextmenuAvailable &&
              window.addEventListener("contextmenu", this.onContextMenuFunc);
        }
        removeEvents() {
          if (!this.$target) return;
          const t = this.strictArea ? this.$area : window;
          u.onWheelAvailable &&
            t.removeEventListener(
              "wheel",
              this.onWheelFunction,
              this.listenerOption
            ),
            !this.strictArea &&
              u.onKeydownAvailable &&
              window.removeEventListener("keydown", this.onKeyDownFunction),
            (u.isTouch || this.useTouch) &&
              (this.$area.removeEventListener(
                u.pointerdownEvent,
                this.onDownFunction,
                this.listenerOption
              ),
              this.$area.removeEventListener(
                u.pointermoveEvent,
                this.onMoveFunction,
                this.listenerOption
              ),
              this.$area.removeEventListener(
                u.pointerupEvent,
                this.onUpFunction,
                this.listenerOption
              )),
            u.onContextmenuAvailable &&
              window.removeEventListener("contextmenu", this.onContextMenuFunc);
        }
        getDownX(t) {
          return u.isTouch ? t.changedTouches[0].pageX : t.pageX;
        }
        getDownY(t) {
          return u.isTouch ? t.changedTouches[0].pageY : t.pageY;
        }
        getDownPos(t) {
          return "vertical" === this.direction
            ? this.getDownY(t)
            : this.getDownX(t);
        }
        onWheel(t) {
          if (this.canceller()) return;
          t.preventDefault();
          let e = 0;
          e =
            "horizontal" === this.direction
              ? Math.abs(t.deltaY) >= Math.abs(t.deltaX)
                ? t.deltaY
                : t.deltaX
              : t.deltaY;
          const i = e;
          this.addTargetPosition(i);
        }
        onKeyDown(t) {
          if (this.canceller()) return;
          const e = t.code;
          "ArrowUp" === e
            ? this.addTargetPosition(-500)
            : "ArrowDown" === e && this.addTargetPosition(500);
        }
        onDown(t) {
          if (this.canceller()) return;
          this.isPointerDown = !0;
          const e = this.getDownPos(t);
          (this.downPos = e), (this.prevPos = e), (this.velocity = 0);
        }
        onMove(t) {
          if (this.canceller()) return;
          if (!this.isPointerDown) return;
          t.preventDefault();
          const e = this.getDownPos(t);
          (this.prevPos = this.downPos), (this.downPos = e);
          const i = this.prevPos - this.downPos;
          this.addTargetPosition(i), (this.isDragging = !0);
        }
        onUp() {
          this.canceller() ||
            (this.isPointerDown &&
              ((this.acceleration =
                -this.k * (this.position - this.targetPosition)),
              (this.downPos = 0),
              (this.prevPos = 0),
              (this.isPointerDown = !1),
              (this.isDragging = !1)));
        }
        onContextMenu() {
          this.isPointerDown = !1;
        }
        addTargetPosition(t) {
          this.targetPosition = d.constrain(
            this.targetPosition + t,
            0,
            this.max
          );
        }
        changeDirection(t) {
          this.direction !== t && (this.reset(), (this.direction = t));
        }
        resize() {
          if (this.$target)
            if ("vertical" === this.direction) {
              const { height: t } = this.$target.getBoundingClientRect(),
                { height: e } = this.$target.parentNode.getBoundingClientRect();
              this.max = Math.floor(t - e);
            } else {
              const { width: t } = this.$target.getBoundingClientRect(),
                { width: e } = this.$target.parentNode.getBoundingClientRect();
              this.max = Math.floor(t - e);
            }
        }
        update(t) {
          this.canceller() ||
            (this.resizeMng.check() && this.resize(),
            (this.velocity += this.acceleration),
            (this.targetPosition += this.velocity),
            (this.velocity *= 0.9),
            (this.acceleration = 0),
            (this.targetPosition = d.constrain(
              this.targetPosition,
              0,
              this.max
            )),
            this.tween.update(this.targetPosition, t),
            Math.abs(this.tween.velocity) < 0.01 &&
              (this.tween.x = this.targetPosition),
            this.isAutoScrolling && (this.tween.x = this.targetPosition),
            (this.position = this.tween.x),
            this.max > 0
              ? (this.progress = d.constrain(this.position / this.max, 0, 1))
              : (this.progress = 0),
            this.progress < 1e-4 && (this.progress = 0),
            "vertical" === this.direction
              ? (this.$target.style.transform = `translate3d(0, ${-this
                  .position}px, 0)`)
              : (this.$target.style.transform = `translate3d(${-this
                  .position}px, 0, 0)`));
        }
        reset() {
          (this.targetPosition = 0),
            (this.position = 0),
            (this.velocity = 0),
            (this.acceleration = 0),
            (this.max = 0),
            (this.progress = 0),
            this.tween.reset();
        }
        setPosition(t) {
          (this.targetPosition = t), (this.position = t), (this.tween.x = t);
        }
        scrollTo(t, e = 1) {
          (this.isAutoScrolling = !0),
            n.os.to(this, {
              targetPosition: t,
              duration: e,
              onComplete: () => {
                this.isAutoScrolling = !1;
              },
            });
        }
        scrollBy(t, e = 1) {
          (this.isAutoScrolling = !0),
            n.os.to(this, {
              targetPosition: this.targetPosition + t,
              duration: e,
              onComplete: () => {
                this.isAutoScrolling = !1;
              },
            });
        }
      }
      var m = i(528),
        w = i(235),
        x = i(189),
        y = i(720),
        f = i(471);
      const b = {
        width: 100,
        height: 100,
        halfWidth: 50,
        halfHeight: 50,
        cameraZ: 500,
        dpr: 1,
        aspectRatio: 1,
      };
      class S {
        constructor() {
          (this.container = document.querySelector("#Background")),
            this.setConfig(),
            (this.offScene = new w.Z()),
            (this.scene = new w.Z()),
            (this.camera = new x.q(
              0.5 * -b.sceneWidth,
              0.5 * b.sceneWidth,
              0.5 * b.sceneHeight,
              0.5 * -b.sceneHeight,
              0.1,
              1e4
            )),
            this.camera.position.set(0, 0, 10),
            (this.renderer = new y.J({
              canvas: this.container.querySelector("canvas"),
              alpha: !1,
              antialias: !1,
            })),
            this.renderer.setSize(b.width, b.height),
            this.renderer.setPixelRatio(b.dpr),
            this.renderer.setClearColor(0, 0),
            this.renderer.clear(),
            (this.renderTarget = new f.n(100, 100)),
            (this.renderTarget.samples = 8);
        }
        setConfig() {
          const { width: t, height: e } =
            this.container.getBoundingClientRect();
          (b.dpr = Math.min(window.devicePixelRatio, 2)),
            (b.width = t),
            (b.height = e),
            (b.halfWidth = b.width / 2),
            (b.halfHeight = b.height / 2),
            (b.aspectRatio = b.width / b.height),
            (b.sceneWidth = 2),
            (b.sceneHeight = 2 / b.aspectRatio);
        }
        resizeScene() {
          (this.camera.left = 0.5 * -b.sceneWidth),
            (this.camera.right = 0.5 * b.sceneWidth),
            (this.camera.top = 0.5 * b.sceneHeight),
            (this.camera.bottom = 0.5 * -b.sceneHeight),
            (this.camera.aspect = b.aspectRatio),
            this.camera.updateProjectionMatrix(),
            this.renderer.setSize(b.width, b.height),
            this.renderTarget.setSize(b.width * b.dpr, b.height * b.dpr);
        }
      }
      var T = i(822),
        M = i(712),
        P = i(898),
        C = i(818),
        $ = i.n(C),
        F = i(293),
        D = i.n(F);
      class z extends T.e {
        constructor(t) {
          super(),
            (this.width = 2),
            (this.height = 2 / (1238 / 2456)), // DIMENSÕES BACKGROUND
            (this.geometry = new M.b(this.width, this.height)),
            (this.material = new P.D({
              uniforms: {
                texture: { value: t },
                time: { value: 0 },
                seed: { value: Math.floor(1e3 * Math.random()) },
              },
              vertexShader: $(),
              fragmentShader: D(),
              transparent: !0,
            }));
        } //dimensões background
        resize() {}
        scroll(t) {
          const e =
            -(0.5 * this.height - 0.5 * b.sceneHeight) +
            t * (this.height - b.sceneHeight);
          this.position.y = e;
        }
        update(t) {
          this.material.uniforms.time.value = t;
        }
      } //height e width
      var A = i(477),
        E = i(128),
        R = i(627);
      let L = null;
      class k {
        constructor() {
          if (L) return L;
          (this.px = 0), (this.py = 0), (L = this), this.init();
        }
        static getInstance() {
          return L || (L = new k()), L;
        }
        static get x() {
          return k.getInstance().px;
        }
        static get y() {
          return k.getInstance().py;
        }
        init() {
          document.addEventListener(
            "pointermove",
            this.onPointerMove.bind(this)
          );
        }
        onPointerMove(t) {
          (this.px = t.clientX), (this.py = t.clientY);
        }
      }
      var I = i(561),
        W = i.n(I),
        q = i(734),
        O = i.n(q);
      class H extends T.e {
        constructor({ texture: t }) {
          super(),
            (this.isReady = !1),
            (this.canvas = document.createElement("canvas")),
            (this.canvas.width = b.width * b.dpr),
            (this.canvas.height = this.canvas.width / b.aspectRatio),
            (this.ctx = this.canvas.getContext("2d", { alpha: !0 })),
            (this.noise2d = (0, R.fu)()),
            (this.nd = 0.03 * b.dpr),
            (this.pTween = new p({ x: k.x, y: k.y }, 15));
          const e = 2 / b.aspectRatio;
          (this.geometry = new M.b(2, e)),
            (this.material = new P.D({
              uniforms: {
                texture: { value: t },
                canvasTexture: { value: null },
                time: { value: 0 },
                shiftSize: { value: 0 },
              },
              vertexShader: W(),
              fragmentShader: O(),
              transparent: !0,
            }));
        }
        resize() {
          //CELULAS tamanho etc.
          const t = 2 / b.aspectRatio;
          (this.geometry = new M.b(2, t)), //distorção canvas
            (this.canvas.width = b.width * b.dpr),
            (this.canvas.height = b.height * b.dpr),
            (this.cellSize = 40 * b.dpr), //tamanho celulas
            (this.halfCellSize = 0.5 * this.cellSize),
            (this.numXCells = Math.ceil(this.canvas.width / this.cellSize)),
            (this.numYCells = Math.ceil(this.canvas.height / this.cellSize)),
            (this.cellData = []);
          for (let t = 0; t <= this.numXCells; t++)
            for (let e = 0; e <= this.numYCells; e++)
              this.cellData.push({
                x: t * this.cellSize - this.halfCellSize,
                y: e * this.cellSize - this.halfCellSize,
                tween: new g(0, 45),
                isActive: !1,
              });
          (this.numCells = this.cellData.length),
            (this.radius = 0.075 * this.canvas.width), //numero de celulas
            (this.nd = 0.05 * b.dpr), //frequencia das celulas
            (this.material.uniforms.shiftSize.value = 1 / this.numXCells),
            this.canvasTexture && this.canvasTexture.dispose(),
            (this.canvasTexture = new A.G(this.canvas)),
            (this.canvasTexture.minFilter = E.k6q),
            (this.canvasTexture.magFilter = E.k6q),
            (this.canvasTexture.generateMipmaps = !1),
            (this.material.uniforms.canvasTexture.value = this.canvasTexture),
            this.material.needsUpdate,
            (this.isReady = !0);
        } //TAMAHO DAS CELULAS
        update({ time: t, deltaTime: e }) {
          if (!this.isReady) return;
          if (u.isTouch) return;
          const i = window.innerWidth < 960 ? 10 : 60,
            n = k.x * b.dpr - i * b.dpr,
            s = k.y * b.dpr;
          this.pTween.update({ x: n, y: s }, e),
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),
            (this.ctx.strokeStyle = "#0000ff"); //borda cor
          for (let i = 0; i < this.numCells; i++) {
            const n = this.cellData[i],
              s = this.noise2d(n.x * this.nd, n.y * this.nd + 0.4 * t); //frequencia de novas celulas
            if (
              d.dist(this.pTween.x, this.pTween.y, n.x, n.y) +
                150 * s * b.dpr <=
              this.radius //raio de nascimento das novas
            ) {
              n.isActive || ((n.tween.x = 1), (n.isActive = !0)),
                n.tween.update(0, e);
              const t = 0.5 * (1 + s),
                i = n.x - this.halfCellSize,
                o = n.y - this.halfCellSize;
              (this.ctx.fillStyle = `rgba(255, ${255 * n.tween.x}, 0, 0.1`), //cor das celulas
                this.ctx.fillRect(i, o, this.cellSize, this.cellSize),
                this.ctx.strokeRect(i, o, this.cellSize, this.cellSize);
            } else n.isActive = !1;
          }
          (this.canvasTexture.needsUpdate = !0),
            (this.material.uniforms.time.value = t);
        } //tamanho do Canvas, alterações em celulas (cor)
      } //alterações nas celulas e canva
      const U = new (class extends S {
          constructor() {
            super(), (this.isSceneReady = !1);
          }
          async init() {
            const t = new m.T(),
              e = [t.loadAsync("/img/bg.png"), t.loadAsync("/img/bg.png")],
              i = await Promise.all(e);
            (this.background = new z(i[0])),
              (this.character = new z(i[1])),
              this.offScene.add(this.background),
              this.offScene.add(this.character),
              (this.scenePlane = new H({
                texture: this.renderTarget.texture,
              })),
              this.scene.add(this.scenePlane),
              (this.isSceneReady = !0),
              (this.isVisible = !0),
              this.resize();
          } //background imagem
          resize() {
            this.isSceneReady &&
              (this.setConfig(),
              this.resizeScene(),
              this.background.resize(),
              this.character.resize(),
              this.scenePlane.resize());
          }
          scroll(t) {
            this.isSceneReady &&
              (this.background.scroll(t), this.character.scroll(0.2 + 0.7 * t)); //posição do bg height
          } //posição do bg
          update(t) {
            this.isSceneReady &&
              (this.background.update(),
              this.character.update(),
              this.scenePlane.update(t),
              this.renderer.setRenderTarget(this.renderTarget),
              this.renderer.render(this.offScene, this.camera),
              this.renderer.setRenderTarget(null),
              this.renderer.render(this.scene, this.camera));
          }
        })(), //bg imagem height
        B = {
          init() {
            (this.$pageWrapper = document.getElementById("PageWrapper")),
              (this.scroll = new v("vertical", { strictArea: !0 })),
              this.scroll.setTarget(this.$pageWrapper),
              U.init();
          },
          update(t, e) {
            this.scroll.update(t.deltaTime), this.scroll.scroll;
            const i = this.scroll.progress;
            n.os.set(document.documentElement, { "--scroll-progress": i });
            (o = d.constrain(-s / window.innerHeight, 0, 1)), (h = r + 10);
            let c = 0;
            a <= window.innerHeight && (c = -(a - window.innerHeight)),
              U.scroll(i),
              U.update(t);
          },
          resize() {
            U.resize();
          },
          onMqChange(t) {},
        }; //objeto com a seleção dos itens relevantes para o script rodar
      class Y {}
      const _ = new (class {
        constructor() {}
        async init() {
          (window.Alpine = c.A),
            c.A.store("ui", B),
            c.A.start(),
            (this.loading = new Y()),
            (this.mq640 = new a("(min-width: 640px)")),
            this.mq640.add(this.onMqChange.bind(this)),
            this.onMqChange(this.mq640.matches),
            (this.resizeMng = new h()),
            this.resizeMng.setSizeFunc(() => ({
              width: window.innerWidth,
              height: window.innerHeight,
            })),
            this.resize(),
            r.add(this.update.bind(this));
        }
        onMqChange(t) {
          c.A.store("ui").onMqChange(t);
        }
        resize() {
          const t = document.documentElement,
            e = 0.01 * t.clientWidth,
            i = 0.01 * t.clientHeight;
          document.documentElement.style.setProperty("--vw", `${e}px`),
            document.documentElement.style.setProperty("--vh", `${i}px`),
            document.documentElement.style.setProperty(
              "--vmax",
              `${Math.max(e, i)}px`
            ),
            document.documentElement.style.setProperty(
              "--vmin",
              `${Math.min(e, i)}px`
            );
          const n = window.innerWidth < 960 ? 10 : 60,
            s = window.innerWidth < 960 ? 5 : 10,
            o = (t.clientWidth - 2 * n - 3 * s) / 4;
          c.A.store("ui").resize();
        }
        update(t) {
          this.resizeMng.check() && this.resize(),
            c.A.store("ui").update(t, this.mq640.matches);
        }
      })();
      document.addEventListener("DOMContentLoaded", () => {
        _.init();
      });
    },
    293: (t) => {
      t.exports =
        "precision highp float;\n\nuniform sampler2D texture;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec2 uv = vUv;\n\n  vec4 color = texture2D(texture, uv);\n  gl_FragColor = color;\n}\n";
    },
    818: (t) => {
      t.exports =
        "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n";
    }, //obj modificador do bg
    734: (t) => {
      t.exports =
        "precision highp float;\n\nuniform sampler2D texture;\nuniform sampler2D canvasTexture;\nuniform float time;\nuniform float shiftSize;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec2 uv = vUv;\n  vec2 p = gl_FragCoord.xy;\n\n  vec4 gc = texture2D(canvasTexture, uv);\n  float gr = gc.r;\n  float gg = gc.g;\n  float gb = gc.b;\n  float ga = ceil(gc.a * 10.0) / 10.0;\n\n  //* Scan Line\n  float scanLine = (1.0 + sin(p.y * 5.0 + time)) * 0.5;\n  scanLine = 0.5 + 0.5 * (1.0 - pow(scanLine, 3.0));\n\n  uv.x += shiftSize * gg;\n\n  //* Pixelate\n  float divide = (0.25 + 0.75 * ga) * 512.0;\n  uv.x = gr > 0.0 ? ceil(uv.x * divide) / divide : uv.x;\n  uv.y = gr > 0.0 ? ceil(uv.y * divide) / divide : uv.y;\n\n  //* Chromatic Aberration\n  // vec4 renderColor = texture2D(texture, uv);\n  float rDiff = +gr * 0.002;\n  float bDiff = -gr * 0.002;\n  float r = texture2D(texture, uv + vec2(rDiff, 0.0)).r;\n  float g = texture2D(texture, uv                   ).g;\n  float b = texture2D(texture, uv + vec2(bDiff, 0.0)).b;\n  vec4 renderColor = vec4(r, g, b, 1.0);\n\n  //* Color Modification\n  renderColor.rgb *= gr > 0.0 ? 0.8 : 0.5;\n  renderColor.rgb += gr > 0.0 ? vec3(0.0, 18.0 / 256.0, 135.0 / 256.0) : vec3(0.0);\n  renderColor.rgb += gg > 0.0 ? vec3(1.0, 0.0, 0.0) * gg : vec3(0.0);\n\n  //* Scan Line\n  renderColor.rgb *= gr > 0.0 ? scanLine : 1.0;\n\n  //* Stroke Rect\n  renderColor.rgb += vec3(0.25) * gb;\n\n  vec4 result = renderColor;\n  gl_FragColor = result;\n  // gl_FragColor = gc;\n}\n";
    }, //obj para personalizar algumas caracteristicas das celulas
    561: (t) => {
      t.exports =
        "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n";
    }, //obj modificador do tamanho do pai das celulas
  },
  i = {};
function n(t) {
  var s = i[t];
  if (void 0 !== s) return s.exports;
  var o = (i[t] = { exports: {} });
  return e[t](o, o.exports, n), o.exports;
}
(n.m = e),
  (t = []),
  (n.O = (e, i, s, o) => {
    if (!i) {
      var r = 1 / 0;
      for (l = 0; l < t.length; l++) {
        for (var [i, s, o] = t[l], h = !0, a = 0; a < i.length; a++)
          (!1 & o || r >= o) && Object.keys(n.O).every((t) => n.O[t](i[a]))
            ? i.splice(a--, 1)
            : ((h = !1), o < r && (r = o));
        if (h) {
          t.splice(l--, 1);
          var c = s();
          void 0 !== c && (e = c);
        }
      }
      return e;
    }
    o = o || 0;
    for (var l = t.length; l > 0 && t[l - 1][2] > o; l--) t[l] = t[l - 1];
    t[l] = [i, s, o];
  }),
  (n.n = (t) => {
    var e = t && t.__esModule ? () => t.default : () => t;
    return n.d(e, { a: e }), e;
  }),
  (n.d = (t, e) => {
    for (var i in e)
      n.o(e, i) &&
        !n.o(t, i) &&
        Object.defineProperty(t, i, { enumerable: !0, get: e[i] });
  }),
  (n.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
  (() => {
    var t = { 792: 0 };
    n.O.j = (e) => 0 === t[e];
    var e = (e, i) => {
        var s,
          o,
          [r, h, a] = i,
          c = 0;
        if (r.some((e) => 0 !== t[e])) {
          for (s in h) n.o(h, s) && (n.m[s] = h[s]);
          if (a) var l = a(n);
        }
        for (e && e(i); c < r.length; c++)
          (o = r[c]), n.o(t, o) && t[o] && t[o][0](), (t[o] = 0);
        return n.O(l);
      },
      i = (globalThis.packAnimation = globalThis.packAnimation || []);
    i.forEach(e.bind(null, 0)), (i.push = e.bind(null, i.push.bind(i)));
  })();
var s = n.O(void 0, [121], () => n(624));
s = n.O(s);

(globalThis.packAnimation = globalThis.packAnimation || []).push([
  [121],
  {
    705: (t, e, n) => {
      n.d(e, { A: () => Kn });
      var i,
        r,
        a,
        s,
        o = !1,
        l = !1,
        c = [],
        u = -1;
      var p = !0;
      function f(t) {
        r = t;
      }
      function m(t, e) {
        let n,
          i = !0,
          s = r(() => {
            let r = t();
            JSON.stringify(r),
              i
                ? (n = r)
                : queueMicrotask(() => {
                    e(r, n), (n = r);
                  }),
              (i = !1);
          });
        return () => a(s);
      }
      var g = [],
        _ = [],
        v = [];
      function x(t, e) {
        "function" == typeof e
          ? (t._x_cleanups || (t._x_cleanups = []), t._x_cleanups.push(e))
          : ((e = t), _.push(e));
      }
      function y(t) {
        g.push(t);
      }
      function M(t, e, n) {
        t._x_attributeCleanups || (t._x_attributeCleanups = {}),
          t._x_attributeCleanups[e] || (t._x_attributeCleanups[e] = []),
          t._x_attributeCleanups[e].push(n);
      }
      function S(t, e) {
        t._x_attributeCleanups &&
          Object.entries(t._x_attributeCleanups).forEach(([n, i]) => {
            (void 0 === e || e.includes(n)) &&
              (i.forEach((t) => t()), delete t._x_attributeCleanups[n]);
          });
      }
      var E = new MutationObserver(L),
        b = !1;
      function T() {
        E.observe(document, {
          subtree: !0,
          childList: !0,
          attributes: !0,
          attributeOldValue: !0,
        }),
          (b = !0);
      }
      function w() {
        !(function () {
          let t = E.takeRecords();
          A.push(() => t.length > 0 && L(t));
          let e = A.length;
          queueMicrotask(() => {
            if (A.length === e) for (; A.length > 0; ) A.shift()();
          });
        })(),
          E.disconnect(),
          (b = !1);
      }
      var A = [];
      function R(t) {
        if (!b) return t();
        w();
        let e = t();
        return T(), e;
      }
      var C = !1,
        P = [];
      function L(t) {
        if (C) return void (P = P.concat(t));
        let e = new Set(),
          n = new Set(),
          i = new Map(),
          r = new Map();
        for (let a = 0; a < t.length; a++)
          if (
            !t[a].target._x_ignoreMutationObserver &&
            ("childList" === t[a].type &&
              (t[a].addedNodes.forEach((t) => 1 === t.nodeType && e.add(t)),
              t[a].removedNodes.forEach((t) => 1 === t.nodeType && n.add(t))),
            "attributes" === t[a].type)
          ) {
            let e = t[a].target,
              n = t[a].attributeName,
              s = t[a].oldValue,
              o = () => {
                i.has(e) || i.set(e, []),
                  i.get(e).push({ name: n, value: e.getAttribute(n) });
              },
              l = () => {
                r.has(e) || r.set(e, []), r.get(e).push(n);
              };
            e.hasAttribute(n) && null === s
              ? o()
              : e.hasAttribute(n)
              ? (l(), o())
              : l();
          }
        r.forEach((t, e) => {
          S(e, t);
        }),
          i.forEach((t, e) => {
            g.forEach((n) => n(e, t));
          });
        for (let t of n) e.has(t) || _.forEach((e) => e(t));
        e.forEach((t) => {
          (t._x_ignoreSelf = !0), (t._x_ignore = !0);
        });
        for (let t of e)
          n.has(t) ||
            (t.isConnected &&
              (delete t._x_ignoreSelf,
              delete t._x_ignore,
              v.forEach((e) => e(t)),
              (t._x_ignore = !0),
              (t._x_ignoreSelf = !0)));
        e.forEach((t) => {
          delete t._x_ignoreSelf, delete t._x_ignore;
        }),
          (e = null),
          (n = null),
          (i = null),
          (r = null);
      }
      function U(t) {
        return N(I(t));
      }
      function D(t, e, n) {
        return (
          (t._x_dataStack = [e, ...I(n || t)]),
          () => {
            t._x_dataStack = t._x_dataStack.filter((t) => t !== e);
          }
        );
      }
      function I(t) {
        return t._x_dataStack
          ? t._x_dataStack
          : "function" == typeof ShadowRoot && t instanceof ShadowRoot
          ? I(t.host)
          : t.parentNode
          ? I(t.parentNode)
          : [];
      }
      function N(t) {
        return new Proxy({ objects: t }, O);
      }
      var O = {
        ownKeys: ({ objects: t }) =>
          Array.from(new Set(t.flatMap((t) => Object.keys(t)))),
        has: ({ objects: t }, e) =>
          e != Symbol.unscopables &&
          t.some(
            (t) =>
              Object.prototype.hasOwnProperty.call(t, e) || Reflect.has(t, e)
          ),
        get: ({ objects: t }, e, n) =>
          "toJSON" == e
            ? F
            : Reflect.get(t.find((t) => Reflect.has(t, e)) || {}, e, n),
        set({ objects: t }, e, n, i) {
          const r =
              t.find((t) => Object.prototype.hasOwnProperty.call(t, e)) ||
              t[t.length - 1],
            a = Object.getOwnPropertyDescriptor(r, e);
          return a?.set && a?.get
            ? Reflect.set(r, e, n, i)
            : Reflect.set(r, e, n);
        },
      };
      function F() {
        return Reflect.ownKeys(this).reduce(
          (t, e) => ((t[e] = Reflect.get(this, e)), t),
          {}
        );
      }
      function B(t) {
        let e = (n, i = "") => {
          Object.entries(Object.getOwnPropertyDescriptors(n)).forEach(
            ([r, { value: a, enumerable: s }]) => {
              if (!1 === s || void 0 === a) return;
              if ("object" == typeof a && null !== a && a.__v_skip) return;
              let o = "" === i ? r : `${i}.${r}`;
              var l;
              "object" == typeof a && null !== a && a._x_interceptor
                ? (n[r] = a.initialize(t, o, r))
                : "object" != typeof (l = a) ||
                  Array.isArray(l) ||
                  null === l ||
                  a === n ||
                  a instanceof Element ||
                  e(a, o);
            }
          );
        };
        return e(t);
      }
      function z(t, e = () => {}) {
        let n = {
          initialValue: void 0,
          _x_interceptor: !0,
          initialize(e, n, i) {
            return t(
              this.initialValue,
              () =>
                (function (t, e) {
                  return e.split(".").reduce((t, e) => t[e], t);
                })(e, n),
              (t) => k(e, n, t),
              n,
              i
            );
          },
        };
        return (
          e(n),
          (t) => {
            if ("object" == typeof t && null !== t && t._x_interceptor) {
              let e = n.initialize.bind(n);
              n.initialize = (i, r, a) => {
                let s = t.initialize(i, r, a);
                return (n.initialValue = s), e(i, r, a);
              };
            } else n.initialValue = t;
            return n;
          }
        );
      }
      function k(t, e, n) {
        if (("string" == typeof e && (e = e.split(".")), 1 !== e.length)) {
          if (0 === e.length) throw error;
          return t[e[0]] || (t[e[0]] = {}), k(t[e[0]], e.slice(1), n);
        }
        t[e[0]] = n;
      }
      var H = {};
      function G(t, e) {
        H[t] = e;
      }
      function V(t, e) {
        return (
          Object.entries(H).forEach(([n, i]) => {
            let r = null;
            Object.defineProperty(t, `$${n}`, {
              get: () =>
                i(
                  e,
                  (function () {
                    if (r) return r;
                    {
                      let [t, n] = ct(e);
                      return (r = { interceptor: z, ...t }), x(e, n), r;
                    }
                  })()
                ),
              enumerable: !1,
            });
          }),
          t
        );
      }
      function W(t, e, n, ...i) {
        try {
          return n(...i);
        } catch (n) {
          X(n, t, e);
        }
      }
      function X(t, e, n = void 0) {
        (t = Object.assign(t ?? { message: "No error message given." }, {
          el: e,
          expression: n,
        })),
          console.warn(
            `Alpine Expression Error: ${t.message}\n\n${
              n ? 'Expression: "' + n + '"\n\n' : ""
            }`,
            e
          ),
          setTimeout(() => {
            throw t;
          }, 0);
      }
      var q = !0;
      function j(t) {
        let e = q;
        q = !1;
        let n = t();
        return (q = e), n;
      }
      function Y(t, e, n = {}) {
        let i;
        return K(t, e)((t) => (i = t), n), i;
      }
      function K(...t) {
        return Z(...t);
      }
      var Z = $;
      function $(t, e) {
        let n = {};
        V(n, t);
        let i = [n, ...I(t)],
          r =
            "function" == typeof e
              ? (function (t, e) {
                  return (
                    n = () => {},
                    { scope: i = {}, params: r = [] } = {}
                  ) => {
                    J(n, e.apply(N([i, ...t]), r));
                  };
                })(i, e)
              : (function (t, e, n) {
                  let i = (function (t, e) {
                    if (Q[t]) return Q[t];
                    let n = Object.getPrototypeOf(
                        async function () {}
                      ).constructor,
                      i =
                        /^[\n\s]*if.*\(.*\)/.test(t.trim()) ||
                        /^(let|const)\s/.test(t.trim())
                          ? `(async()=>{ ${t} })()`
                          : t;
                    let r = (() => {
                      try {
                        let e = new n(
                          ["__self", "scope"],
                          `with (scope) { __self.result = ${i} }; __self.finished = true; return __self.result;`
                        );
                        return (
                          Object.defineProperty(e, "name", {
                            value: `[Alpine] ${t}`,
                          }),
                          e
                        );
                      } catch (n) {
                        return X(n, e, t), Promise.resolve();
                      }
                    })();
                    return (Q[t] = r), r;
                  })(e, n);
                  return (
                    r = () => {},
                    { scope: a = {}, params: s = [] } = {}
                  ) => {
                    (i.result = void 0), (i.finished = !1);
                    let o = N([a, ...t]);
                    if ("function" == typeof i) {
                      let t = i(i, o).catch((t) => X(t, n, e));
                      i.finished
                        ? (J(r, i.result, o, s, n), (i.result = void 0))
                        : t
                            .then((t) => {
                              J(r, t, o, s, n);
                            })
                            .catch((t) => X(t, n, e))
                            .finally(() => (i.result = void 0));
                    }
                  };
                })(i, e, t);
        return W.bind(null, t, e, r);
      }
      var Q = {};
      function J(t, e, n, i, r) {
        if (q && "function" == typeof e) {
          let a = e.apply(n, i);
          a instanceof Promise
            ? a.then((e) => J(t, e, n, i)).catch((t) => X(t, r, e))
            : t(a);
        } else
          "object" == typeof e && e instanceof Promise
            ? e.then((e) => t(e))
            : t(e);
      }
      var tt = "x-";
      function et(t = "") {
        return tt + t;
      }
      var nt = {};
      function it(t, e) {
        return (
          (nt[t] = e),
          {
            before(e) {
              if (!nt[e])
                return void console.warn(
                  String.raw`Cannot find directive \`${e}\`. \`${t}\` will use the default order of execution`
                );
              const n = _t.indexOf(e);
              _t.splice(n >= 0 ? n : _t.indexOf("DEFAULT"), 0, t);
            },
          }
        );
      }
      function rt(t, e, n) {
        if (((e = Array.from(e)), t._x_virtualDirectives)) {
          let n = Object.entries(t._x_virtualDirectives).map(([t, e]) => ({
              name: t,
              value: e,
            })),
            i = at(n);
          (n = n.map((t) =>
            i.find((e) => e.name === t.name)
              ? { name: `x-bind:${t.name}`, value: `"${t.value}"` }
              : t
          )),
            (e = e.concat(n));
        }
        let i = {},
          r = e
            .map(ht((t, e) => (i[t] = e)))
            .filter(ft)
            .map(
              (function (t, e) {
                return ({ name: n, value: i }) => {
                  let r = n.match(mt()),
                    a = n.match(/:([a-zA-Z0-9\-_:]+)/),
                    s = n.match(/\.[^.\]]+(?=[^\]]*$)/g) || [],
                    o = e || t[n] || n;
                  return {
                    type: r ? r[1] : null,
                    value: a ? a[1] : null,
                    modifiers: s.map((t) => t.replace(".", "")),
                    expression: i,
                    original: o,
                  };
                };
              })(i, n)
            )
            .sort(vt);
        return r.map((e) =>
          (function (t, e) {
            let n = nt[e.type] || (() => {}),
              [i, r] = ct(t);
            M(t, e.original, r);
            let a = () => {
              t._x_ignore ||
                t._x_ignoreSelf ||
                (n.inline && n.inline(t, e, i),
                (n = n.bind(n, t, e, i)),
                st ? ot.get(lt).push(n) : n());
            };
            return (a.runCleanups = r), a;
          })(t, e)
        );
      }
      function at(t) {
        return Array.from(t)
          .map(ht())
          .filter((t) => !ft(t));
      }
      var st = !1,
        ot = new Map(),
        lt = Symbol();
      function ct(t) {
        let e = [],
          [n, i] = (function (t) {
            let e = () => {};
            return [
              (n) => {
                let i = r(n);
                return (
                  t._x_effects ||
                    ((t._x_effects = new Set()),
                    (t._x_runEffects = () => {
                      t._x_effects.forEach((t) => t());
                    })),
                  t._x_effects.add(i),
                  (e = () => {
                    void 0 !== i && (t._x_effects.delete(i), a(i));
                  }),
                  i
                );
              },
              () => {
                e();
              },
            ];
          })(t);
        return (
          e.push(i),
          [
            {
              Alpine: pe,
              effect: n,
              cleanup: (t) => e.push(t),
              evaluateLater: K.bind(K, t),
              evaluate: Y.bind(Y, t),
            },
            () => e.forEach((t) => t()),
          ]
        );
      }
      var ut =
        (t, e) =>
        ({ name: n, value: i }) => (
          n.startsWith(t) && (n = n.replace(t, e)), { name: n, value: i }
        );
      function ht(t = () => {}) {
        return ({ name: e, value: n }) => {
          let { name: i, value: r } = dt.reduce((t, e) => e(t), {
            name: e,
            value: n,
          });
          return i !== e && t(i, e), { name: i, value: r };
        };
      }
      var dt = [];
      function pt(t) {
        dt.push(t);
      }
      function ft({ name: t }) {
        return mt().test(t);
      }
      var mt = () => new RegExp(`^${tt}([^:^.]+)\\b`),
        gt = "DEFAULT",
        _t = [
          "ignore",
          "ref",
          "data",
          "id",
          "anchor",
          "bind",
          "init",
          "for",
          "model",
          "modelable",
          "transition",
          "show",
          "if",
          gt,
          "teleport",
        ];
      function vt(t, e) {
        let n = -1 === _t.indexOf(t.type) ? gt : t.type,
          i = -1 === _t.indexOf(e.type) ? gt : e.type;
        return _t.indexOf(n) - _t.indexOf(i);
      }
      function xt(t, e, n = {}) {
        t.dispatchEvent(
          new CustomEvent(e, {
            detail: n,
            bubbles: !0,
            composed: !0,
            cancelable: !0,
          })
        );
      }
      function yt(t, e) {
        if ("function" == typeof ShadowRoot && t instanceof ShadowRoot)
          return void Array.from(t.children).forEach((t) => yt(t, e));
        let n = !1;
        if ((e(t, () => (n = !0)), n)) return;
        let i = t.firstElementChild;
        for (; i; ) yt(i, e), (i = i.nextElementSibling);
      }
      function Mt(t, ...e) {
        console.warn(`Alpine Warning: ${t}`, ...e);
      }
      var St = !1,
        Et = [],
        bt = [];
      function Tt() {
        return Et.map((t) => t());
      }
      function wt() {
        return Et.concat(bt).map((t) => t());
      }
      function At(t) {
        Et.push(t);
      }
      function Rt(t) {
        bt.push(t);
      }
      function Ct(t, e = !1) {
        return Pt(t, (t) => {
          if ((e ? wt() : Tt()).some((e) => t.matches(e))) return !0;
        });
      }
      function Pt(t, e) {
        if (t) {
          if (e(t)) return t;
          if ((t._x_teleportBack && (t = t._x_teleportBack), t.parentElement))
            return Pt(t.parentElement, e);
        }
      }
      var Lt = [];
      function Ut(t, e = yt, n = () => {}) {
        !(function (i) {
          st = !0;
          let r = Symbol();
          (lt = r), ot.set(r, []);
          let a = () => {
            for (; ot.get(r).length; ) ot.get(r).shift()();
            ot.delete(r);
          };
          e(t, (t, e) => {
            n(t, e),
              Lt.forEach((n) => n(t, e)),
              rt(t, t.attributes).forEach((t) => t()),
              t._x_ignore && e();
          }),
            (st = !1),
            a();
        })();
      }
      function Dt(t, e = yt) {
        e(t, (t) => {
          S(t),
            (function (t) {
              if (t._x_cleanups)
                for (; t._x_cleanups.length; ) t._x_cleanups.pop()();
            })(t);
        });
      }
      var It = [],
        Nt = !1;
      function Ot(t = () => {}) {
        return (
          queueMicrotask(() => {
            Nt ||
              setTimeout(() => {
                Ft();
              });
          }),
          new Promise((e) => {
            It.push(() => {
              t(), e();
            });
          })
        );
      }
      function Ft() {
        for (Nt = !1; It.length; ) It.shift()();
      }
      function Bt(t, e) {
        return Array.isArray(e)
          ? zt(t, e.join(" "))
          : "object" == typeof e && null !== e
          ? (function (t, e) {
              let n = (t) => t.split(" ").filter(Boolean),
                i = Object.entries(e)
                  .flatMap(([t, e]) => !!e && n(t))
                  .filter(Boolean),
                r = Object.entries(e)
                  .flatMap(([t, e]) => !e && n(t))
                  .filter(Boolean),
                a = [],
                s = [];
              return (
                r.forEach((e) => {
                  t.classList.contains(e) && (t.classList.remove(e), s.push(e));
                }),
                i.forEach((e) => {
                  t.classList.contains(e) || (t.classList.add(e), a.push(e));
                }),
                () => {
                  s.forEach((e) => t.classList.add(e)),
                    a.forEach((e) => t.classList.remove(e));
                }
              );
            })(t, e)
          : "function" == typeof e
          ? Bt(t, e())
          : zt(t, e);
      }
      function zt(t, e) {
        return (
          (e = !0 === e ? (e = "") : e || ""),
          (n = e
            .split(" ")
            .filter((e) => !t.classList.contains(e))
            .filter(Boolean)),
          t.classList.add(...n),
          () => {
            t.classList.remove(...n);
          }
        );
        var n;
      }
      function kt(t, e) {
        return "object" == typeof e && null !== e
          ? (function (t, e) {
              let n = {};
              return (
                Object.entries(e).forEach(([e, i]) => {
                  (n[e] = t.style[e]),
                    e.startsWith("--") ||
                      (e = e.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()),
                    t.style.setProperty(e, i);
                }),
                setTimeout(() => {
                  0 === t.style.length && t.removeAttribute("style");
                }),
                () => {
                  kt(t, n);
                }
              );
            })(t, e)
          : (function (t, e) {
              let n = t.getAttribute("style", e);
              return (
                t.setAttribute("style", e),
                () => {
                  t.setAttribute("style", n || "");
                }
              );
            })(t, e);
      }
      function Ht(t, e = () => {}) {
        let n = !1;
        return function () {
          n ? e.apply(this, arguments) : ((n = !0), t.apply(this, arguments));
        };
      }
      function Gt(t, e, n = {}) {
        t._x_transition ||
          (t._x_transition = {
            enter: { during: n, start: n, end: n },
            leave: { during: n, start: n, end: n },
            in(n = () => {}, i = () => {}) {
              Wt(
                t,
                e,
                {
                  during: this.enter.during,
                  start: this.enter.start,
                  end: this.enter.end,
                },
                n,
                i
              );
            },
            out(n = () => {}, i = () => {}) {
              Wt(
                t,
                e,
                {
                  during: this.leave.during,
                  start: this.leave.start,
                  end: this.leave.end,
                },
                n,
                i
              );
            },
          });
      }
      function Vt(t) {
        let e = t.parentNode;
        if (e) return e._x_hidePromise ? e : Vt(e);
      }
      function Wt(
        t,
        e,
        { during: n, start: i, end: r } = {},
        a = () => {},
        s = () => {}
      ) {
        if (
          (t._x_transitioning && t._x_transitioning.cancel(),
          0 === Object.keys(n).length &&
            0 === Object.keys(i).length &&
            0 === Object.keys(r).length)
        )
          return a(), void s();
        let o, l, c;
        !(function (t, e) {
          let n,
            i,
            r,
            a = Ht(() => {
              R(() => {
                (n = !0),
                  i || e.before(),
                  r || (e.end(), Ft()),
                  e.after(),
                  t.isConnected && e.cleanup(),
                  delete t._x_transitioning;
              });
            });
          (t._x_transitioning = {
            beforeCancels: [],
            beforeCancel(t) {
              this.beforeCancels.push(t);
            },
            cancel: Ht(function () {
              for (; this.beforeCancels.length; ) this.beforeCancels.shift()();
              a();
            }),
            finish: a,
          }),
            R(() => {
              e.start(), e.during();
            }),
            (Nt = !0),
            requestAnimationFrame(() => {
              if (n) return;
              let a =
                  1e3 *
                  Number(
                    getComputedStyle(t)
                      .transitionDuration.replace(/,.*/, "")
                      .replace("s", "")
                  ),
                s =
                  1e3 *
                  Number(
                    getComputedStyle(t)
                      .transitionDelay.replace(/,.*/, "")
                      .replace("s", "")
                  );
              0 === a &&
                (a =
                  1e3 *
                  Number(
                    getComputedStyle(t).animationDuration.replace("s", "")
                  )),
                R(() => {
                  e.before();
                }),
                (i = !0),
                requestAnimationFrame(() => {
                  n ||
                    (R(() => {
                      e.end();
                    }),
                    Ft(),
                    setTimeout(t._x_transitioning.finish, a + s),
                    (r = !0));
                });
            });
        })(t, {
          start() {
            o = e(t, i);
          },
          during() {
            l = e(t, n);
          },
          before: a,
          end() {
            o(), (c = e(t, r));
          },
          after: s,
          cleanup() {
            l(), c();
          },
        });
      }
      function Xt(t, e, n) {
        if (-1 === t.indexOf(e)) return n;
        const i = t[t.indexOf(e) + 1];
        if (!i) return n;
        if ("scale" === e && isNaN(i)) return n;
        if ("duration" === e || "delay" === e) {
          let t = i.match(/([0-9]+)ms/);
          if (t) return t[1];
        }
        return "origin" === e &&
          ["top", "right", "left", "center", "bottom"].includes(
            t[t.indexOf(e) + 2]
          )
          ? [i, t[t.indexOf(e) + 2]].join(" ")
          : i;
      }
      it("transition", (t, { value: e, modifiers: n, expression: i }, {
        evaluate: r,
      }) => {
        "function" == typeof i && (i = r(i)),
          !1 !== i &&
            (i && "boolean" != typeof i
              ? (function (t, e, n) {
                  Gt(t, Bt, ""),
                    {
                      enter: (e) => {
                        t._x_transition.enter.during = e;
                      },
                      "enter-start": (e) => {
                        t._x_transition.enter.start = e;
                      },
                      "enter-end": (e) => {
                        t._x_transition.enter.end = e;
                      },
                      leave: (e) => {
                        t._x_transition.leave.during = e;
                      },
                      "leave-start": (e) => {
                        t._x_transition.leave.start = e;
                      },
                      "leave-end": (e) => {
                        t._x_transition.leave.end = e;
                      },
                    }[n](e);
                })(t, i, e)
              : (function (t, e, n) {
                  Gt(t, kt);
                  let i = !e.includes("in") && !e.includes("out") && !n,
                    r = i || e.includes("in") || ["enter"].includes(n),
                    a = i || e.includes("out") || ["leave"].includes(n);
                  e.includes("in") &&
                    !i &&
                    (e = e.filter((t, n) => n < e.indexOf("out"))),
                    e.includes("out") &&
                      !i &&
                      (e = e.filter((t, n) => n > e.indexOf("out")));
                  let s = !e.includes("opacity") && !e.includes("scale"),
                    o = s || e.includes("opacity") ? 0 : 1,
                    l = s || e.includes("scale") ? Xt(e, "scale", 95) / 100 : 1,
                    c = Xt(e, "delay", 0) / 1e3,
                    u = Xt(e, "origin", "center"),
                    h = "opacity, transform",
                    d = Xt(e, "duration", 150) / 1e3,
                    p = Xt(e, "duration", 75) / 1e3,
                    f = "cubic-bezier(0.4, 0.0, 0.2, 1)";
                  r &&
                    ((t._x_transition.enter.during = {
                      transformOrigin: u,
                      transitionDelay: `${c}s`,
                      transitionProperty: h,
                      transitionDuration: `${d}s`,
                      transitionTimingFunction: f,
                    }),
                    (t._x_transition.enter.start = {
                      opacity: o,
                      transform: `scale(${l})`,
                    }),
                    (t._x_transition.enter.end = {
                      opacity: 1,
                      transform: "scale(1)",
                    })),
                    a &&
                      ((t._x_transition.leave.during = {
                        transformOrigin: u,
                        transitionDelay: `${c}s`,
                        transitionProperty: h,
                        transitionDuration: `${p}s`,
                        transitionTimingFunction: f,
                      }),
                      (t._x_transition.leave.start = {
                        opacity: 1,
                        transform: "scale(1)",
                      }),
                      (t._x_transition.leave.end = {
                        opacity: o,
                        transform: `scale(${l})`,
                      }));
                })(t, n, e));
      }),
        (window.Element.prototype._x_toggleAndCascadeWithTransitions =
          function (t, e, n, i) {
            const r =
              "visible" === document.visibilityState
                ? requestAnimationFrame
                : setTimeout;
            let a = () => r(n);
            e
              ? t._x_transition &&
                (t._x_transition.enter || t._x_transition.leave)
                ? t._x_transition.enter &&
                  (Object.entries(t._x_transition.enter.during).length ||
                    Object.entries(t._x_transition.enter.start).length ||
                    Object.entries(t._x_transition.enter.end).length)
                  ? t._x_transition.in(n)
                  : a()
                : t._x_transition
                ? t._x_transition.in(n)
                : a()
              : ((t._x_hidePromise = t._x_transition
                  ? new Promise((e, n) => {
                      t._x_transition.out(
                        () => {},
                        () => e(i)
                      ),
                        t._x_transitioning &&
                          t._x_transitioning.beforeCancel(() =>
                            n({ isFromCancelledTransition: !0 })
                          );
                    })
                  : Promise.resolve(i)),
                queueMicrotask(() => {
                  let e = Vt(t);
                  e
                    ? (e._x_hideChildren || (e._x_hideChildren = []),
                      e._x_hideChildren.push(t))
                    : r(() => {
                        let e = (t) => {
                          let n = Promise.all([
                            t._x_hidePromise,
                            ...(t._x_hideChildren || []).map(e),
                          ]).then(([t]) => t?.());
                          return (
                            delete t._x_hidePromise, delete t._x_hideChildren, n
                          );
                        };
                        e(t).catch((t) => {
                          if (!t.isFromCancelledTransition) throw t;
                        });
                      });
                }));
          });
      var qt = !1;
      function jt(t, e = () => {}) {
        return (...n) => (qt ? e(...n) : t(...n));
      }
      var Yt = [];
      function Kt(t) {
        Yt.push(t);
      }
      var Zt = !1;
      function $t(t) {
        let e = r;
        f((t, n) => {
          let i = e(t);
          return a(i), () => {};
        }),
          t(),
          f(e);
      }
      function Qt(t, e, n, r = []) {
        switch (
          (t._x_bindings || (t._x_bindings = i({})),
          (t._x_bindings[e] = n),
          (e = r.includes("camel")
            ? e.toLowerCase().replace(/-(\w)/g, (t, e) => e.toUpperCase())
            : e))
        ) {
          case "value":
            !(function (t, e) {
              if ("radio" === t.type)
                void 0 === t.attributes.value && (t.value = e),
                  window.fromModel &&
                    (t.checked =
                      "boolean" == typeof e
                        ? ee(t.value) === e
                        : te(t.value, e));
              else if ("checkbox" === t.type)
                Number.isInteger(e)
                  ? (t.value = e)
                  : Array.isArray(e) ||
                    "boolean" == typeof e ||
                    [null, void 0].includes(e)
                  ? Array.isArray(e)
                    ? (t.checked = e.some((e) => te(e, t.value)))
                    : (t.checked = !!e)
                  : (t.value = String(e));
              else if ("SELECT" === t.tagName)
                !(function (t, e) {
                  const n = [].concat(e).map((t) => t + "");
                  Array.from(t.options).forEach((t) => {
                    t.selected = n.includes(t.value);
                  });
                })(t, e);
              else {
                if (t.value === e) return;
                t.value = void 0 === e ? "" : e;
              }
            })(t, n);
            break;
          case "style":
            !(function (t, e) {
              t._x_undoAddedStyles && t._x_undoAddedStyles(),
                (t._x_undoAddedStyles = kt(t, e));
            })(t, n);
            break;
          case "class":
            !(function (t, e) {
              t._x_undoAddedClasses && t._x_undoAddedClasses(),
                (t._x_undoAddedClasses = Bt(t, e));
            })(t, n);
            break;
          case "selected":
          case "checked":
            !(function (t, e, n) {
              Jt(t, e, n),
                (function (t, e, n) {
                  t[e] !== n && (t[e] = n);
                })(t, e, n);
            })(t, e, n);
            break;
          default:
            Jt(t, e, n);
        }
      }
      function Jt(t, e, n) {
        [null, void 0, !1].includes(n) &&
        (function (t) {
          return ![
            "aria-pressed",
            "aria-checked",
            "aria-expanded",
            "aria-selected",
          ].includes(t);
        })(e)
          ? t.removeAttribute(e)
          : (ne(e) && (n = e),
            (function (t, e, n) {
              t.getAttribute(e) != n && t.setAttribute(e, n);
            })(t, e, n));
      }
      function te(t, e) {
        return t == e;
      }
      function ee(t) {
        return (
          !![1, "1", "true", "on", "yes", !0].includes(t) ||
          (![0, "0", "false", "off", "no", !1].includes(t) &&
            (t ? Boolean(t) : null))
        );
      }
      function ne(t) {
        return [
          "disabled",
          "checked",
          "required",
          "readonly",
          "open",
          "selected",
          "autofocus",
          "itemscope",
          "multiple",
          "novalidate",
          "allowfullscreen",
          "allowpaymentrequest",
          "formnovalidate",
          "autoplay",
          "controls",
          "loop",
          "muted",
          "playsinline",
          "default",
          "ismap",
          "reversed",
          "async",
          "defer",
          "nomodule",
        ].includes(t);
      }
      function ie(t, e, n) {
        let i = t.getAttribute(e);
        return null === i
          ? "function" == typeof n
            ? n()
            : n
          : "" === i || (ne(e) ? !![e, "true"].includes(i) : i);
      }
      function re(t, e) {
        var n;
        return function () {
          var i = this,
            r = arguments;
          clearTimeout(n),
            (n = setTimeout(function () {
              (n = null), t.apply(i, r);
            }, e));
        };
      }
      function ae(t, e) {
        let n;
        return function () {
          let i = arguments;
          n || (t.apply(this, i), (n = !0), setTimeout(() => (n = !1), e));
        };
      }
      function se({ get: t, set: e }, { get: n, set: i }) {
        let s,
          o,
          l = !0,
          c = r(() => {
            let r = t(),
              a = n();
            if (l) i(oe(r)), (l = !1);
            else {
              let t = JSON.stringify(r),
                n = JSON.stringify(a);
              t !== s ? i(oe(r)) : t !== n && e(oe(a));
            }
            (s = JSON.stringify(t())), (o = JSON.stringify(n()));
          });
        return () => {
          a(c);
        };
      }
      function oe(t) {
        return "object" == typeof t ? JSON.parse(JSON.stringify(t)) : t;
      }
      var le = {},
        ce = !1,
        ue = {};
      function he(t, e, n) {
        let i = [];
        for (; i.length; ) i.pop()();
        let r = Object.entries(e).map(([t, e]) => ({ name: t, value: e })),
          a = at(r);
        return (
          (r = r.map((t) =>
            a.find((e) => e.name === t.name)
              ? { name: `x-bind:${t.name}`, value: `"${t.value}"` }
              : t
          )),
          rt(t, r, n).map((t) => {
            i.push(t.runCleanups), t();
          }),
          () => {
            for (; i.length; ) i.pop()();
          }
        );
      }
      var de = {},
        pe = {
          get reactive() {
            return i;
          },
          get release() {
            return a;
          },
          get effect() {
            return r;
          },
          get raw() {
            return s;
          },
          version: "3.14.0",
          flushAndStopDeferringMutations: function () {
            (C = !1), L(P), (P = []);
          },
          dontAutoEvaluateFunctions: j,
          disableEffectScheduling: function (t) {
            (p = !1), t(), (p = !0);
          },
          startObservingMutations: T,
          stopObservingMutations: w,
          setReactivityEngine: function (t) {
            (i = t.reactive),
              (a = t.release),
              (r = (e) =>
                t.effect(e, {
                  scheduler: (t) => {
                    p
                      ? (function (t) {
                          var e;
                          (e = t),
                            c.includes(e) || c.push(e),
                            l || o || ((o = !0), queueMicrotask(d));
                        })(t)
                      : t();
                  },
                })),
              (s = t.raw);
          },
          onAttributeRemoved: M,
          onAttributesAdded: y,
          closestDataStack: I,
          skipDuringClone: jt,
          onlyDuringClone: function (t) {
            return (...e) => qt && t(...e);
          },
          addRootSelector: At,
          addInitSelector: Rt,
          interceptClone: Kt,
          addScopeToNode: D,
          deferMutations: function () {
            C = !0;
          },
          mapAttributes: pt,
          evaluateLater: K,
          interceptInit: function (t) {
            Lt.push(t);
          },
          setEvaluator: function (t) {
            Z = t;
          },
          mergeProxies: N,
          extractProp: function (t, e, n, i = !0) {
            if (t._x_bindings && void 0 !== t._x_bindings[e])
              return t._x_bindings[e];
            if (t._x_inlineBindings && void 0 !== t._x_inlineBindings[e]) {
              let n = t._x_inlineBindings[e];
              return (n.extract = i), j(() => Y(t, n.expression));
            }
            return ie(t, e, n);
          },
          findClosest: Pt,
          onElRemoved: x,
          closestRoot: Ct,
          destroyTree: Dt,
          interceptor: z,
          transition: Wt,
          setStyles: kt,
          mutateDom: R,
          directive: it,
          entangle: se,
          throttle: ae,
          debounce: re,
          evaluate: Y,
          initTree: Ut,
          nextTick: Ot,
          prefixed: et,
          prefix: function (t) {
            tt = t;
          },
          plugin: function (t) {
            (Array.isArray(t) ? t : [t]).forEach((t) => t(pe));
          },
          magic: G,
          store: function (t, e) {
            if ((ce || ((le = i(le)), (ce = !0)), void 0 === e)) return le[t];
            (le[t] = e),
              "object" == typeof e &&
                null !== e &&
                e.hasOwnProperty("init") &&
                "function" == typeof e.init &&
                le[t].init(),
              B(le[t]);
          },
          start: function () {
            var t;
            St &&
              Mt(
                "Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."
              ),
              (St = !0),
              document.body ||
                Mt(
                  "Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"
                ),
              xt(document, "alpine:init"),
              xt(document, "alpine:initializing"),
              T(),
              (t = (t) => Ut(t, yt)),
              v.push(t),
              x((t) => Dt(t)),
              y((t, e) => {
                rt(t, e).forEach((t) => t());
              }),
              Array.from(document.querySelectorAll(wt().join(",")))
                .filter((t) => !Ct(t.parentElement, !0))
                .forEach((t) => {
                  Ut(t);
                }),
              xt(document, "alpine:initialized"),
              setTimeout(() => {
                [
                  ["ui", "dialog", ["[x-dialog], [x-popover]"]],
                  ["anchor", "anchor", ["[x-anchor]"]],
                  ["sort", "sort", ["[x-sort]"]],
                ].forEach(([t, e, n]) => {
                  var i;
                  (i = e),
                    Object.keys(nt).includes(i) ||
                      n.some((e) => {
                        if (document.querySelector(e))
                          return (
                            Mt(`found "${e}", but missing ${t} plugin`), !0
                          );
                      });
                });
              });
          },
          clone: function (t, e) {
            e._x_dataStack || (e._x_dataStack = t._x_dataStack),
              (qt = !0),
              (Zt = !0),
              $t(() => {
                !(function (t) {
                  let e = !1;
                  Ut(t, (t, n) => {
                    yt(t, (t, i) => {
                      if (
                        e &&
                        (function (t) {
                          return Tt().some((e) => t.matches(e));
                        })(t)
                      )
                        return i();
                      (e = !0), n(t, i);
                    });
                  });
                })(e);
              }),
              (qt = !1),
              (Zt = !1);
          },
          cloneNode: function (t, e) {
            Yt.forEach((n) => n(t, e)),
              (qt = !0),
              $t(() => {
                Ut(e, (t, e) => {
                  e(t, () => {});
                });
              }),
              (qt = !1);
          },
          bound: function (t, e, n) {
            return t._x_bindings && void 0 !== t._x_bindings[e]
              ? t._x_bindings[e]
              : ie(t, e, n);
          },
          $data: U,
          watch: m,
          walk: yt,
          data: function (t, e) {
            de[t] = e;
          },
          bind: function (t, e) {
            let n = "function" != typeof e ? () => e : e;
            return t instanceof Element ? he(t, n()) : ((ue[t] = n), () => {});
          },
        };
      function fe(t, e) {
        const n = Object.create(null),
          i = t.split(",");
        for (let t = 0; t < i.length; t++) n[i[t]] = !0;
        return e ? (t) => !!n[t.toLowerCase()] : (t) => !!n[t];
      }
      var me,
        ge = Object.freeze({}),
        _e = (Object.freeze([]), Object.prototype.hasOwnProperty),
        ve = (t, e) => _e.call(t, e),
        xe = Array.isArray,
        ye = (t) => "[object Map]" === be(t),
        Me = (t) => "symbol" == typeof t,
        Se = (t) => null !== t && "object" == typeof t,
        Ee = Object.prototype.toString,
        be = (t) => Ee.call(t),
        Te = (t) => be(t).slice(8, -1),
        we = (t) =>
          "string" == typeof t &&
          "NaN" !== t &&
          "-" !== t[0] &&
          "" + parseInt(t, 10) === t,
        Ae = (t) => {
          const e = Object.create(null);
          return (n) => e[n] || (e[n] = t(n));
        },
        Re = /-(\w)/g,
        Ce =
          (Ae((t) => t.replace(Re, (t, e) => (e ? e.toUpperCase() : ""))),
          /\B([A-Z])/g),
        Pe =
          (Ae((t) => t.replace(Ce, "-$1").toLowerCase()),
          Ae((t) => t.charAt(0).toUpperCase() + t.slice(1))),
        Le =
          (Ae((t) => (t ? `on${Pe(t)}` : "")),
          (t, e) => t !== e && (t == t || e == e)),
        Ue = new WeakMap(),
        De = [],
        Ie = Symbol("iterate"),
        Ne = Symbol("Map key iterate"),
        Oe = 0;
      function Fe(t) {
        const { deps: e } = t;
        if (e.length) {
          for (let n = 0; n < e.length; n++) e[n].delete(t);
          e.length = 0;
        }
      }
      var Be = !0,
        ze = [];
      function ke() {
        const t = ze.pop();
        Be = void 0 === t || t;
      }
      function He(t, e, n) {
        if (!Be || void 0 === me) return;
        let i = Ue.get(t);
        i || Ue.set(t, (i = new Map()));
        let r = i.get(n);
        r || i.set(n, (r = new Set())),
          r.has(me) ||
            (r.add(me),
            me.deps.push(r),
            me.options.onTrack &&
              me.options.onTrack({ effect: me, target: t, type: e, key: n }));
      }
      function Ge(t, e, n, i, r, a) {
        const s = Ue.get(t);
        if (!s) return;
        const o = new Set(),
          l = (t) => {
            t &&
              t.forEach((t) => {
                (t !== me || t.allowRecurse) && o.add(t);
              });
          };
        if ("clear" === e) s.forEach(l);
        else if ("length" === n && xe(t))
          s.forEach((t, e) => {
            ("length" === e || e >= i) && l(t);
          });
        else
          switch ((void 0 !== n && l(s.get(n)), e)) {
            case "add":
              xe(t)
                ? we(n) && l(s.get("length"))
                : (l(s.get(Ie)), ye(t) && l(s.get(Ne)));
              break;
            case "delete":
              xe(t) || (l(s.get(Ie)), ye(t) && l(s.get(Ne)));
              break;
            case "set":
              ye(t) && l(s.get(Ie));
          }
        o.forEach((s) => {
          s.options.onTrigger &&
            s.options.onTrigger({
              effect: s,
              target: t,
              key: n,
              type: e,
              newValue: i,
              oldValue: r,
              oldTarget: a,
            }),
            s.options.scheduler ? s.options.scheduler(s) : s();
        });
      }
      var Ve = fe("__proto__,__v_isRef,__isVue"),
        We = new Set(
          Object.getOwnPropertyNames(Symbol)
            .map((t) => Symbol[t])
            .filter(Me)
        ),
        Xe = Ke(),
        qe = Ke(!0),
        je = Ye();
      function Ye() {
        const t = {};
        return (
          ["includes", "indexOf", "lastIndexOf"].forEach((e) => {
            t[e] = function (...t) {
              const n = Pn(this);
              for (let t = 0, e = this.length; t < e; t++) He(n, "get", t + "");
              const i = n[e](...t);
              return -1 === i || !1 === i ? n[e](...t.map(Pn)) : i;
            };
          }),
          ["push", "pop", "shift", "unshift", "splice"].forEach((e) => {
            t[e] = function (...t) {
              ze.push(Be), (Be = !1);
              const n = Pn(this)[e].apply(this, t);
              return ke(), n;
            };
          }),
          t
        );
      }
      function Ke(t = !1, e = !1) {
        return function (n, i, r) {
          if ("__v_isReactive" === i) return !t;
          if ("__v_isReadonly" === i) return t;
          if ("__v_raw" === i && r === (t ? (e ? wn : Tn) : e ? bn : En).get(n))
            return n;
          const a = xe(n);
          if (!t && a && ve(je, i)) return Reflect.get(je, i, r);
          const s = Reflect.get(n, i, r);
          return (Me(i) ? We.has(i) : Ve(i))
            ? s
            : (t || He(n, "get", i),
              e
                ? s
                : Ln(s)
                ? a && we(i)
                  ? s
                  : s.value
                : Se(s)
                ? t
                  ? Rn(s)
                  : An(s)
                : s);
        };
      }
      function Ze(t = !1) {
        return function (e, n, i, r) {
          let a = e[n];
          if (!t && ((i = Pn(i)), (a = Pn(a)), !xe(e) && Ln(a) && !Ln(i)))
            return (a.value = i), !0;
          const s = xe(e) && we(n) ? Number(n) < e.length : ve(e, n),
            o = Reflect.set(e, n, i, r);
          return (
            e === Pn(r) &&
              (s ? Le(i, a) && Ge(e, "set", n, i, a) : Ge(e, "add", n, i)),
            o
          );
        };
      }
      var $e = {
          get: Xe,
          set: Ze(),
          deleteProperty: function (t, e) {
            const n = ve(t, e),
              i = t[e],
              r = Reflect.deleteProperty(t, e);
            return r && n && Ge(t, "delete", e, void 0, i), r;
          },
          has: function (t, e) {
            const n = Reflect.has(t, e);
            return (Me(e) && We.has(e)) || He(t, "has", e), n;
          },
          ownKeys: function (t) {
            return He(t, "iterate", xe(t) ? "length" : Ie), Reflect.ownKeys(t);
          },
        },
        Qe = {
          get: qe,
          set: (t, e) => (
            console.warn(
              `Set operation on key "${String(e)}" failed: target is readonly.`,
              t
            ),
            !0
          ),
          deleteProperty: (t, e) => (
            console.warn(
              `Delete operation on key "${String(
                e
              )}" failed: target is readonly.`,
              t
            ),
            !0
          ),
        },
        Je = (t) => (Se(t) ? An(t) : t),
        tn = (t) => (Se(t) ? Rn(t) : t),
        en = (t) => t,
        nn = (t) => Reflect.getPrototypeOf(t);
      function rn(t, e, n = !1, i = !1) {
        const r = Pn((t = t.__v_raw)),
          a = Pn(e);
        e !== a && !n && He(r, "get", e), !n && He(r, "get", a);
        const { has: s } = nn(r),
          o = i ? en : n ? tn : Je;
        return s.call(r, e)
          ? o(t.get(e))
          : s.call(r, a)
          ? o(t.get(a))
          : void (t !== r && t.get(e));
      }
      function an(t, e = !1) {
        const n = this.__v_raw,
          i = Pn(n),
          r = Pn(t);
        return (
          t !== r && !e && He(i, "has", t),
          !e && He(i, "has", r),
          t === r ? n.has(t) : n.has(t) || n.has(r)
        );
      }
      function sn(t, e = !1) {
        return (
          (t = t.__v_raw),
          !e && He(Pn(t), "iterate", Ie),
          Reflect.get(t, "size", t)
        );
      }
      function on(t) {
        t = Pn(t);
        const e = Pn(this);
        return nn(e).has.call(e, t) || (e.add(t), Ge(e, "add", t, t)), this;
      }
      function ln(t, e) {
        e = Pn(e);
        const n = Pn(this),
          { has: i, get: r } = nn(n);
        let a = i.call(n, t);
        a ? Sn(n, i, t) : ((t = Pn(t)), (a = i.call(n, t)));
        const s = r.call(n, t);
        return (
          n.set(t, e),
          a ? Le(e, s) && Ge(n, "set", t, e, s) : Ge(n, "add", t, e),
          this
        );
      }
      function cn(t) {
        const e = Pn(this),
          { has: n, get: i } = nn(e);
        let r = n.call(e, t);
        r ? Sn(e, n, t) : ((t = Pn(t)), (r = n.call(e, t)));
        const a = i ? i.call(e, t) : void 0,
          s = e.delete(t);
        return r && Ge(e, "delete", t, void 0, a), s;
      }
      function un() {
        const t = Pn(this),
          e = 0 !== t.size,
          n = ye(t) ? new Map(t) : new Set(t),
          i = t.clear();
        return e && Ge(t, "clear", void 0, void 0, n), i;
      }
      function hn(t, e) {
        return function (n, i) {
          const r = this,
            a = r.__v_raw,
            s = Pn(a),
            o = e ? en : t ? tn : Je;
          return (
            !t && He(s, "iterate", Ie),
            a.forEach((t, e) => n.call(i, o(t), o(e), r))
          );
        };
      }
      function dn(t, e, n) {
        return function (...i) {
          const r = this.__v_raw,
            a = Pn(r),
            s = ye(a),
            o = "entries" === t || (t === Symbol.iterator && s),
            l = "keys" === t && s,
            c = r[t](...i),
            u = n ? en : e ? tn : Je;
          return (
            !e && He(a, "iterate", l ? Ne : Ie),
            {
              next() {
                const { value: t, done: e } = c.next();
                return e
                  ? { value: t, done: e }
                  : { value: o ? [u(t[0]), u(t[1])] : u(t), done: e };
              },
              [Symbol.iterator]() {
                return this;
              },
            }
          );
        };
      }
      function pn(t) {
        return function (...e) {
          {
            const n = e[0] ? `on key "${e[0]}" ` : "";
            console.warn(
              `${Pe(t)} operation ${n}failed: target is readonly.`,
              Pn(this)
            );
          }
          return "delete" !== t && this;
        };
      }
      function fn() {
        const t = {
            get(t) {
              return rn(this, t);
            },
            get size() {
              return sn(this);
            },
            has: an,
            add: on,
            set: ln,
            delete: cn,
            clear: un,
            forEach: hn(!1, !1),
          },
          e = {
            get(t) {
              return rn(this, t, !1, !0);
            },
            get size() {
              return sn(this);
            },
            has: an,
            add: on,
            set: ln,
            delete: cn,
            clear: un,
            forEach: hn(!1, !0),
          },
          n = {
            get(t) {
              return rn(this, t, !0);
            },
            get size() {
              return sn(this, !0);
            },
            has(t) {
              return an.call(this, t, !0);
            },
            add: pn("add"),
            set: pn("set"),
            delete: pn("delete"),
            clear: pn("clear"),
            forEach: hn(!0, !1),
          },
          i = {
            get(t) {
              return rn(this, t, !0, !0);
            },
            get size() {
              return sn(this, !0);
            },
            has(t) {
              return an.call(this, t, !0);
            },
            add: pn("add"),
            set: pn("set"),
            delete: pn("delete"),
            clear: pn("clear"),
            forEach: hn(!0, !0),
          };
        return (
          ["keys", "values", "entries", Symbol.iterator].forEach((r) => {
            (t[r] = dn(r, !1, !1)),
              (n[r] = dn(r, !0, !1)),
              (e[r] = dn(r, !1, !0)),
              (i[r] = dn(r, !0, !0));
          }),
          [t, n, e, i]
        );
      }
      var [mn, gn, _n, vn] = fn();
      function xn(t, e) {
        const n = e ? (t ? vn : _n) : t ? gn : mn;
        return (e, i, r) =>
          "__v_isReactive" === i
            ? !t
            : "__v_isReadonly" === i
            ? t
            : "__v_raw" === i
            ? e
            : Reflect.get(ve(n, i) && i in e ? n : e, i, r);
      }
      var yn = { get: xn(!1, !1) },
        Mn = { get: xn(!0, !1) };
      function Sn(t, e, n) {
        const i = Pn(n);
        if (i !== n && e.call(t, i)) {
          const e = Te(t);
          console.warn(
            `Reactive ${e} contains both the raw and reactive versions of the same object${
              "Map" === e ? " as keys" : ""
            }, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
          );
        }
      }
      var En = new WeakMap(),
        bn = new WeakMap(),
        Tn = new WeakMap(),
        wn = new WeakMap();
      function An(t) {
        return t && t.__v_isReadonly ? t : Cn(t, !1, $e, yn, En);
      }
      function Rn(t) {
        return Cn(t, !0, Qe, Mn, Tn);
      }
      function Cn(t, e, n, i, r) {
        if (!Se(t))
          return console.warn(`value cannot be made reactive: ${String(t)}`), t;
        if (t.__v_raw && (!e || !t.__v_isReactive)) return t;
        const a = r.get(t);
        if (a) return a;
        const s =
          (o = t).__v_skip || !Object.isExtensible(o)
            ? 0
            : (function (t) {
                switch (t) {
                  case "Object":
                  case "Array":
                    return 1;
                  case "Map":
                  case "Set":
                  case "WeakMap":
                  case "WeakSet":
                    return 2;
                  default:
                    return 0;
                }
              })(Te(o));
        var o;
        if (0 === s) return t;
        const l = new Proxy(t, 2 === s ? i : n);
        return r.set(t, l), l;
      }
      function Pn(t) {
        return (t && Pn(t.__v_raw)) || t;
      }
      function Ln(t) {
        return Boolean(t && !0 === t.__v_isRef);
      }
      G("nextTick", () => Ot),
        G("dispatch", (t) => xt.bind(xt, t)),
        G("watch", (t, { evaluateLater: e, cleanup: n }) => (t, i) => {
          let r = e(t),
            a = m(() => {
              let t;
              return r((e) => (t = e)), t;
            }, i);
          n(a);
        }),
        G("store", function () {
          return le;
        }),
        G("data", (t) => U(t)),
        G("root", (t) => Ct(t)),
        G(
          "refs",
          (t) => (
            t._x_refs_proxy ||
              (t._x_refs_proxy = N(
                (function (t) {
                  let e = [];
                  return (
                    Pt(t, (t) => {
                      t._x_refs && e.push(t._x_refs);
                    }),
                    e
                  );
                })(t)
              )),
            t._x_refs_proxy
          )
        );
      var Un = {};
      function Dn(t) {
        return Un[t] || (Un[t] = 0), ++Un[t];
      }
      function In(t, e, n) {
        G(e, (i) =>
          Mt(
            `You can't use [$${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${n}`,
            i
          )
        );
      }
      G(
        "id",
        (t, { cleanup: e }) =>
          (n, i = null) =>
            (function (t, e, n, i) {
              if ((t._x_id || (t._x_id = {}), t._x_id[e])) return t._x_id[e];
              let r = i();
              return (
                (t._x_id[e] = r),
                n(() => {
                  delete t._x_id[e];
                }),
                r
              );
            })(t, `${n}${i ? `-${i}` : ""}`, e, () => {
              let e = (function (t, e) {
                  return Pt(t, (t) => {
                    if (t._x_ids && t._x_ids[e]) return !0;
                  });
                })(t, n),
                r = e ? e._x_ids[n] : Dn(n);
              return i ? `${n}-${r}-${i}` : `${n}-${r}`;
            })
      ),
        Kt((t, e) => {
          t._x_id && (e._x_id = t._x_id);
        }),
        G("el", (t) => t),
        In("Focus", "focus", "focus"),
        In("Persist", "persist", "persist"),
        it("modelable", (t, { expression: e }, {
          effect: n,
          evaluateLater: i,
          cleanup: r,
        }) => {
          let a = i(e),
            s = () => {
              let t;
              return a((e) => (t = e)), t;
            },
            o = i(`${e} = __placeholder`),
            l = (t) => o(() => {}, { scope: { __placeholder: t } }),
            c = s();
          l(c),
            queueMicrotask(() => {
              if (!t._x_model) return;
              t._x_removeModelListeners.default();
              let e = t._x_model.get,
                n = t._x_model.set,
                i = se(
                  {
                    get: () => e(),
                    set(t) {
                      n(t);
                    },
                  },
                  {
                    get: () => s(),
                    set(t) {
                      l(t);
                    },
                  }
                );
              r(i);
            });
        }),
        it("teleport", (t, { modifiers: e, expression: n }, { cleanup: i }) => {
          "template" !== t.tagName.toLowerCase() &&
            Mt("x-teleport can only be used on a <template> tag", t);
          let r = On(n),
            a = t.content.cloneNode(!0).firstElementChild;
          (t._x_teleport = a),
            (a._x_teleportBack = t),
            t.setAttribute("data-teleport-template", !0),
            a.setAttribute("data-teleport-target", !0),
            t._x_forwardEvents &&
              t._x_forwardEvents.forEach((e) => {
                a.addEventListener(e, (e) => {
                  e.stopPropagation(),
                    t.dispatchEvent(new e.constructor(e.type, e));
                });
              }),
            D(a, {}, t);
          let s = (t, e, n) => {
            n.includes("prepend")
              ? e.parentNode.insertBefore(t, e)
              : n.includes("append")
              ? e.parentNode.insertBefore(t, e.nextSibling)
              : e.appendChild(t);
          };
          R(() => {
            s(a, r, e),
              jt(() => {
                Ut(a), (a._x_ignore = !0);
              })();
          }),
            (t._x_teleportPutBack = () => {
              let i = On(n);
              R(() => {
                s(t._x_teleport, i, e);
              });
            }),
            i(() => a.remove());
        });
      var Nn = document.createElement("div");
      function On(t) {
        let e = jt(
          () => document.querySelector(t),
          () => Nn
        )();
        return (
          e || Mt(`Cannot find x-teleport element for selector: "${t}"`), e
        );
      }
      var Fn = () => {};
      function Bn(t, e, n, i) {
        let r = t,
          a = (t) => i(t),
          s = {},
          o = (t, e) => (n) => e(t, n);
        if (
          (n.includes("dot") && (e = e.replace(/-/g, ".")),
          n.includes("camel") &&
            (e = e.toLowerCase().replace(/-(\w)/g, (t, e) => e.toUpperCase())),
          n.includes("passive") && (s.passive = !0),
          n.includes("capture") && (s.capture = !0),
          n.includes("window") && (r = window),
          n.includes("document") && (r = document),
          n.includes("debounce"))
        ) {
          let t = n[n.indexOf("debounce") + 1] || "invalid-wait",
            e = zn(t.split("ms")[0]) ? Number(t.split("ms")[0]) : 250;
          a = re(a, e);
        }
        if (n.includes("throttle")) {
          let t = n[n.indexOf("throttle") + 1] || "invalid-wait",
            e = zn(t.split("ms")[0]) ? Number(t.split("ms")[0]) : 250;
          a = ae(a, e);
        }
        return (
          n.includes("prevent") &&
            (a = o(a, (t, e) => {
              e.preventDefault(), t(e);
            })),
          n.includes("stop") &&
            (a = o(a, (t, e) => {
              e.stopPropagation(), t(e);
            })),
          n.includes("once") &&
            (a = o(a, (t, n) => {
              t(n), r.removeEventListener(e, a, s);
            })),
          (n.includes("away") || n.includes("outside")) &&
            ((r = document),
            (a = o(a, (e, n) => {
              t.contains(n.target) ||
                (!1 !== n.target.isConnected &&
                  ((t.offsetWidth < 1 && t.offsetHeight < 1) ||
                    (!1 !== t._x_isShown && e(n))));
            }))),
          n.includes("self") &&
            (a = o(a, (e, n) => {
              n.target === t && e(n);
            })),
          ((function (t) {
            return ["keydown", "keyup"].includes(t);
          })(e) ||
            kn(e)) &&
            (a = o(a, (t, e) => {
              (function (t, e) {
                let n = e.filter(
                  (t) =>
                    ![
                      "window",
                      "document",
                      "prevent",
                      "stop",
                      "once",
                      "capture",
                      "self",
                      "away",
                      "outside",
                      "passive",
                    ].includes(t)
                );
                if (n.includes("debounce")) {
                  let t = n.indexOf("debounce");
                  n.splice(
                    t,
                    zn((n[t + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1
                  );
                }
                if (n.includes("throttle")) {
                  let t = n.indexOf("throttle");
                  n.splice(
                    t,
                    zn((n[t + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1
                  );
                }
                if (0 === n.length) return !1;
                if (1 === n.length && Hn(t.key).includes(n[0])) return !1;
                const i = [
                  "ctrl",
                  "shift",
                  "alt",
                  "meta",
                  "cmd",
                  "super",
                ].filter((t) => n.includes(t));
                if (
                  ((n = n.filter((t) => !i.includes(t))),
                  i.length > 0 &&
                    i.filter(
                      (e) => (
                        ("cmd" !== e && "super" !== e) || (e = "meta"),
                        t[`${e}Key`]
                      )
                    ).length === i.length)
                ) {
                  if (kn(t.type)) return !1;
                  if (Hn(t.key).includes(n[0])) return !1;
                }
                return !0;
              })(e, n) || t(e);
            })),
          r.addEventListener(e, a, s),
          () => {
            r.removeEventListener(e, a, s);
          }
        );
      }
      function zn(t) {
        return !Array.isArray(t) && !isNaN(t);
      }
      function kn(t) {
        return ["contextmenu", "click", "mouse"].some((e) => t.includes(e));
      }
      function Hn(t) {
        if (!t) return [];
        var e;
        t = [" ", "_"].includes((e = t))
          ? e
          : e
              .replace(/([a-z])([A-Z])/g, "$1-$2")
              .replace(/[_\s]/, "-")
              .toLowerCase();
        let n = {
          ctrl: "control",
          slash: "/",
          space: " ",
          spacebar: " ",
          cmd: "meta",
          esc: "escape",
          up: "arrow-up",
          down: "arrow-down",
          left: "arrow-left",
          right: "arrow-right",
          period: ".",
          comma: ",",
          equal: "=",
          minus: "-",
          underscore: "_",
        };
        return (
          (n[t] = t),
          Object.keys(n)
            .map((e) => {
              if (n[e] === t) return e;
            })
            .filter((t) => t)
        );
      }
      function Gn(t, e, n, i) {
        return R(() => {
          if (n instanceof CustomEvent && void 0 !== n.detail)
            return null !== n.detail && void 0 !== n.detail
              ? n.detail
              : n.target.value;
          if ("checkbox" === t.type) {
            if (Array.isArray(i)) {
              let t = null;
              return (
                (t = e.includes("number")
                  ? Vn(n.target.value)
                  : e.includes("boolean")
                  ? ee(n.target.value)
                  : n.target.value),
                n.target.checked
                  ? i.includes(t)
                    ? i
                    : i.concat([t])
                  : i.filter((e) => !(e == t))
              );
            }
            return n.target.checked;
          }
          if ("select" === t.tagName.toLowerCase() && t.multiple)
            return e.includes("number")
              ? Array.from(n.target.selectedOptions).map((t) =>
                  Vn(t.value || t.text)
                )
              : e.includes("boolean")
              ? Array.from(n.target.selectedOptions).map((t) =>
                  ee(t.value || t.text)
                )
              : Array.from(n.target.selectedOptions).map(
                  (t) => t.value || t.text
                );
          {
            let r;
            return (
              (r =
                "radio" === t.type
                  ? n.target.checked
                    ? n.target.value
                    : i
                  : n.target.value),
              e.includes("number")
                ? Vn(r)
                : e.includes("boolean")
                ? ee(r)
                : e.includes("trim")
                ? r.trim()
                : r
            );
          }
        });
      }
      function Vn(t) {
        let e = t ? parseFloat(t) : null;
        return (n = e), Array.isArray(n) || isNaN(n) ? t : e;
        var n;
      }
      function Wn(t) {
        return (
          null !== t &&
          "object" == typeof t &&
          "function" == typeof t.get &&
          "function" == typeof t.set
        );
      }
      (Fn.inline = (t, { modifiers: e }, { cleanup: n }) => {
        e.includes("self") ? (t._x_ignoreSelf = !0) : (t._x_ignore = !0),
          n(() => {
            e.includes("self") ? delete t._x_ignoreSelf : delete t._x_ignore;
          });
      }),
        it("ignore", Fn),
        it(
          "effect",
          jt((t, { expression: e }, { effect: n }) => {
            n(K(t, e));
          })
        ),
        it("model", (t, { modifiers: e, expression: n }, {
          effect: i,
          cleanup: r,
        }) => {
          let a = t;
          e.includes("parent") && (a = t.parentNode);
          let s,
            o = K(a, n);
          s =
            "string" == typeof n
              ? K(a, `${n} = __placeholder`)
              : "function" == typeof n && "string" == typeof n()
              ? K(a, `${n()} = __placeholder`)
              : () => {};
          let l = () => {
              let t;
              return o((e) => (t = e)), Wn(t) ? t.get() : t;
            },
            c = (t) => {
              let e;
              o((t) => (e = t)),
                Wn(e) ? e.set(t) : s(() => {}, { scope: { __placeholder: t } });
            };
          "string" == typeof n &&
            "radio" === t.type &&
            R(() => {
              t.hasAttribute("name") || t.setAttribute("name", n);
            });
          var u =
            "select" === t.tagName.toLowerCase() ||
            ["checkbox", "radio"].includes(t.type) ||
            e.includes("lazy")
              ? "change"
              : "input";
          let h = qt
            ? () => {}
            : Bn(t, u, e, (n) => {
                c(Gn(t, e, n, l()));
              });
          if (
            (e.includes("fill") &&
              ([void 0, null, ""].includes(l()) ||
                ("checkbox" === t.type && Array.isArray(l())) ||
                ("select" === t.tagName.toLowerCase() && t.multiple)) &&
              c(Gn(t, e, { target: t }, l())),
            t._x_removeModelListeners || (t._x_removeModelListeners = {}),
            (t._x_removeModelListeners.default = h),
            r(() => t._x_removeModelListeners.default()),
            t.form)
          ) {
            let n = Bn(t.form, "reset", [], (n) => {
              Ot(
                () => t._x_model && t._x_model.set(Gn(t, e, { target: t }, l()))
              );
            });
            r(() => n());
          }
          (t._x_model = {
            get: () => l(),
            set(t) {
              c(t);
            },
          }),
            (t._x_forceModelUpdate = (e) => {
              void 0 === e && "string" == typeof n && n.match(/\./) && (e = ""),
                (window.fromModel = !0),
                R(() => Qt(t, "value", e)),
                delete window.fromModel;
            }),
            i(() => {
              let n = l();
              (e.includes("unintrusive") &&
                document.activeElement.isSameNode(t)) ||
                t._x_forceModelUpdate(n);
            });
        }),
        it("cloak", (t) =>
          queueMicrotask(() => R(() => t.removeAttribute(et("cloak"))))),
        Rt(() => `[${et("init")}]`),
        it(
          "init",
          jt((t, { expression: e }, { evaluate: n }) =>
            "string" == typeof e ? !!e.trim() && n(e, {}, !1) : n(e, {}, !1)
          )
        ),
        it("text", (t, { expression: e }, { effect: n, evaluateLater: i }) => {
          let r = i(e);
          n(() => {
            r((e) => {
              R(() => {
                t.textContent = e;
              });
            });
          });
        }),
        it("html", (t, { expression: e }, { effect: n, evaluateLater: i }) => {
          let r = i(e);
          n(() => {
            r((e) => {
              R(() => {
                (t.innerHTML = e),
                  (t._x_ignoreSelf = !0),
                  Ut(t),
                  delete t._x_ignoreSelf;
              });
            });
          });
        }),
        pt(ut(":", et("bind:")));
      var Xn = (
        t,
        { value: e, modifiers: n, expression: i, original: r },
        { effect: a, cleanup: s }
      ) => {
        if (!e) {
          let e = {};
          return (
            (o = e),
            Object.entries(ue).forEach(([t, e]) => {
              Object.defineProperty(o, t, {
                get:
                  () =>
                  (...t) =>
                    e(...t),
              });
            }),
            void K(t, i)(
              (e) => {
                he(t, e, r);
              },
              { scope: e }
            )
          );
        }
        var o;
        if ("key" === e)
          return (function (t, e) {
            t._x_keyExpression = e;
          })(t, i);
        if (
          t._x_inlineBindings &&
          t._x_inlineBindings[e] &&
          t._x_inlineBindings[e].extract
        )
          return;
        let l = K(t, i);
        a(() =>
          l((r) => {
            void 0 === r && "string" == typeof i && i.match(/\./) && (r = ""),
              R(() => Qt(t, e, r, n));
          })
        ),
          s(() => {
            t._x_undoAddedClasses && t._x_undoAddedClasses(),
              t._x_undoAddedStyles && t._x_undoAddedStyles();
          });
      };
      function qn(t, e, n, i) {
        let r = {};
        return (
          /^\[.*\]$/.test(t.item) && Array.isArray(e)
            ? t.item
                .replace("[", "")
                .replace("]", "")
                .split(",")
                .map((t) => t.trim())
                .forEach((t, n) => {
                  r[t] = e[n];
                })
            : /^\{.*\}$/.test(t.item) &&
              !Array.isArray(e) &&
              "object" == typeof e
            ? t.item
                .replace("{", "")
                .replace("}", "")
                .split(",")
                .map((t) => t.trim())
                .forEach((t) => {
                  r[t] = e[t];
                })
            : (r[t.item] = e),
          t.index && (r[t.index] = n),
          t.collection && (r[t.collection] = i),
          r
        );
      }
      function jn() {}
      function Yn(t, e, n) {
        it(e, (i) =>
          Mt(
            `You can't use [x-${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${n}`,
            i
          )
        );
      }
      (Xn.inline = (t, { value: e, modifiers: n, expression: i }) => {
        e &&
          (t._x_inlineBindings || (t._x_inlineBindings = {}),
          (t._x_inlineBindings[e] = { expression: i, extract: !1 }));
      }),
        it("bind", Xn),
        At(() => `[${et("data")}]`),
        it("data", (t, { expression: e }, { cleanup: n }) => {
          if (
            (function (t) {
              return !!qt && (!!Zt || t.hasAttribute("data-has-alpine-state"));
            })(t)
          )
            return;
          e = "" === e ? "{}" : e;
          let r = {};
          V(r, t);
          let a = {};
          var s, o;
          (s = a),
            (o = r),
            Object.entries(de).forEach(([t, e]) => {
              Object.defineProperty(s, t, {
                get:
                  () =>
                  (...t) =>
                    e.bind(o)(...t),
                enumerable: !1,
              });
            });
          let l = Y(t, e, { scope: a });
          (void 0 !== l && !0 !== l) || (l = {}), V(l, t);
          let c = i(l);
          B(c);
          let u = D(t, c);
          c.init && Y(t, c.init),
            n(() => {
              c.destroy && Y(t, c.destroy), u();
            });
        }),
        Kt((t, e) => {
          t._x_dataStack &&
            ((e._x_dataStack = t._x_dataStack),
            e.setAttribute("data-has-alpine-state", !0));
        }),
        it("show", (t, { modifiers: e, expression: n }, { effect: i }) => {
          let r = K(t, n);
          t._x_doHide ||
            (t._x_doHide = () => {
              R(() => {
                t.style.setProperty(
                  "display",
                  "none",
                  e.includes("important") ? "important" : void 0
                );
              });
            }),
            t._x_doShow ||
              (t._x_doShow = () => {
                R(() => {
                  1 === t.style.length && "none" === t.style.display
                    ? t.removeAttribute("style")
                    : t.style.removeProperty("display");
                });
              });
          let a,
            s = () => {
              t._x_doHide(), (t._x_isShown = !1);
            },
            o = () => {
              t._x_doShow(), (t._x_isShown = !0);
            },
            l = () => setTimeout(o),
            c = Ht(
              (t) => (t ? o() : s()),
              (e) => {
                "function" == typeof t._x_toggleAndCascadeWithTransitions
                  ? t._x_toggleAndCascadeWithTransitions(t, e, o, s)
                  : e
                  ? l()
                  : s();
              }
            ),
            u = !0;
          i(() =>
            r((t) => {
              (u || t !== a) &&
                (e.includes("immediate") && (t ? l() : s()),
                c(t),
                (a = t),
                (u = !1));
            })
          );
        }),
        it("for", (t, { expression: e }, { effect: n, cleanup: r }) => {
          let a = (function (t) {
              let e = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/,
                n = t.match(/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/);
              if (!n) return;
              let i = {};
              i.items = n[2].trim();
              let r = n[1].replace(/^\s*\(|\)\s*$/g, "").trim(),
                a = r.match(e);
              return (
                a
                  ? ((i.item = r.replace(e, "").trim()),
                    (i.index = a[1].trim()),
                    a[2] && (i.collection = a[2].trim()))
                  : (i.item = r),
                i
              );
            })(e),
            s = K(t, a.items),
            o = K(t, t._x_keyExpression || "index");
          (t._x_prevKeys = []),
            (t._x_lookup = {}),
            n(() =>
              (function (t, e, n, r) {
                let a = t;
                n((n) => {
                  var s;
                  (s = n),
                    !Array.isArray(s) &&
                      !isNaN(s) &&
                      n >= 0 &&
                      (n = Array.from(Array(n).keys(), (t) => t + 1)),
                    void 0 === n && (n = []);
                  let o = t._x_lookup,
                    l = t._x_prevKeys,
                    c = [],
                    u = [];
                  if ("object" != typeof (d = n) || Array.isArray(d))
                    for (let i = 0; i < n.length; i++) {
                      let a = qn(e, n[i], i, n);
                      r(
                        (e) => {
                          u.includes(e) && Mt("Duplicate key on x-for", t),
                            u.push(e);
                        },
                        { scope: { index: i, ...a } }
                      ),
                        c.push(a);
                    }
                  else
                    n = Object.entries(n).map(([i, a]) => {
                      let s = qn(e, a, i, n);
                      r(
                        (e) => {
                          u.includes(e) && Mt("Duplicate key on x-for", t),
                            u.push(e);
                        },
                        { scope: { index: i, ...s } }
                      ),
                        c.push(s);
                    });
                  var d;
                  let p = [],
                    f = [],
                    m = [],
                    g = [];
                  for (let t = 0; t < l.length; t++) {
                    let e = l[t];
                    -1 === u.indexOf(e) && m.push(e);
                  }
                  l = l.filter((t) => !m.includes(t));
                  let _ = "template";
                  for (let t = 0; t < u.length; t++) {
                    let e = u[t],
                      n = l.indexOf(e);
                    if (-1 === n) l.splice(t, 0, e), p.push([_, t]);
                    else if (n !== t) {
                      let e = l.splice(t, 1)[0],
                        i = l.splice(n - 1, 1)[0];
                      l.splice(t, 0, i), l.splice(n, 0, e), f.push([e, i]);
                    } else g.push(e);
                    _ = e;
                  }
                  for (let t = 0; t < m.length; t++) {
                    let e = m[t];
                    o[e]._x_effects && o[e]._x_effects.forEach(h),
                      o[e].remove(),
                      (o[e] = null),
                      delete o[e];
                  }
                  for (let t = 0; t < f.length; t++) {
                    let [e, n] = f[t],
                      i = o[e],
                      r = o[n],
                      s = document.createElement("div");
                    R(() => {
                      r || Mt('x-for ":key" is undefined or invalid', a, n, o),
                        r.after(s),
                        i.after(r),
                        r._x_currentIfEl && r.after(r._x_currentIfEl),
                        s.before(i),
                        i._x_currentIfEl && i.after(i._x_currentIfEl),
                        s.remove();
                    }),
                      r._x_refreshXForScope(c[u.indexOf(n)]);
                  }
                  for (let t = 0; t < p.length; t++) {
                    let [e, n] = p[t],
                      r = "template" === e ? a : o[e];
                    r._x_currentIfEl && (r = r._x_currentIfEl);
                    let s = c[n],
                      l = u[n],
                      h = document.importNode(a.content, !0).firstElementChild,
                      d = i(s);
                    D(h, d, a),
                      (h._x_refreshXForScope = (t) => {
                        Object.entries(t).forEach(([t, e]) => {
                          d[t] = e;
                        });
                      }),
                      R(() => {
                        r.after(h), jt(() => Ut(h))();
                      }),
                      "object" == typeof l &&
                        Mt(
                          "x-for key cannot be an object, it must be a string or an integer",
                          a
                        ),
                      (o[l] = h);
                  }
                  for (let t = 0; t < g.length; t++)
                    o[g[t]]._x_refreshXForScope(c[u.indexOf(g[t])]);
                  a._x_prevKeys = u;
                });
              })(t, a, s, o)
            ),
            r(() => {
              Object.values(t._x_lookup).forEach((t) => t.remove()),
                delete t._x_prevKeys,
                delete t._x_lookup;
            });
        }),
        (jn.inline = (t, { expression: e }, { cleanup: n }) => {
          let i = Ct(t);
          i._x_refs || (i._x_refs = {}),
            (i._x_refs[e] = t),
            n(() => delete i._x_refs[e]);
        }),
        it("ref", jn),
        it("if", (t, { expression: e }, { effect: n, cleanup: i }) => {
          "template" !== t.tagName.toLowerCase() &&
            Mt("x-if can only be used on a <template> tag", t);
          let r = K(t, e);
          n(() =>
            r((e) => {
              e
                ? (() => {
                    if (t._x_currentIfEl) return t._x_currentIfEl;
                    let e = t.content.cloneNode(!0).firstElementChild;
                    D(e, {}, t),
                      R(() => {
                        t.after(e), jt(() => Ut(e))();
                      }),
                      (t._x_currentIfEl = e),
                      (t._x_undoIf = () => {
                        yt(e, (t) => {
                          t._x_effects && t._x_effects.forEach(h);
                        }),
                          e.remove(),
                          delete t._x_currentIfEl;
                      });
                  })()
                : t._x_undoIf && (t._x_undoIf(), delete t._x_undoIf);
            })
          ),
            i(() => t._x_undoIf && t._x_undoIf());
        }),
        it("id", (t, { expression: e }, { evaluate: n }) => {
          n(e).forEach((e) =>
            (function (t, e) {
              t._x_ids || (t._x_ids = {}), t._x_ids[e] || (t._x_ids[e] = Dn(e));
            })(t, e)
          );
        }),
        Kt((t, e) => {
          t._x_ids && (e._x_ids = t._x_ids);
        }),
        pt(ut("@", et("on:"))),
        it(
          "on",
          jt((t, { value: e, modifiers: n, expression: i }, { cleanup: r }) => {
            let a = i ? K(t, i) : () => {};
            "template" === t.tagName.toLowerCase() &&
              (t._x_forwardEvents || (t._x_forwardEvents = []),
              t._x_forwardEvents.includes(e) || t._x_forwardEvents.push(e));
            let s = Bn(t, e, n, (t) => {
              a(() => {}, { scope: { $event: t }, params: [t] });
            });
            r(() => s());
          })
        ),
        Yn("Collapse", "collapse", "collapse"),
        Yn("Intersect", "intersect", "intersect"),
        Yn("Focus", "trap", "focus"),
        Yn("Mask", "mask", "mask"),
        pe.setEvaluator($),
        pe.setReactivityEngine({
          reactive: An,
          effect: function (t, e = ge) {
            (function (t) {
              return t && !0 === t._isEffect;
            })(t) && (t = t.raw);
            const n = (function (t, e) {
              const n = function () {
                if (!n.active) return t();
                if (!De.includes(n)) {
                  Fe(n);
                  try {
                    return ze.push(Be), (Be = !0), De.push(n), (me = n), t();
                  } finally {
                    De.pop(), ke(), (me = De[De.length - 1]);
                  }
                }
              };
              return (
                (n.id = Oe++),
                (n.allowRecurse = !!e.allowRecurse),
                (n._isEffect = !0),
                (n.active = !0),
                (n.raw = t),
                (n.deps = []),
                (n.options = e),
                n
              );
            })(t, e);
            return e.lazy || n(), n;
          },
          release: function (t) {
            t.active &&
              (Fe(t), t.options.onStop && t.options.onStop(), (t.active = !1));
          },
          raw: Pn,
        });
      var Kn = pe;
    },
    755: (t, e, n) => {
      n.d(e, { M: () => S });
      var i = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,
        r = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,
        a = Math.PI / 180,
        s = (Math.PI, Math.sin),
        o = Math.cos,
        l = Math.abs,
        c = Math.sqrt,
        u =
          (Math.atan2,
          function (t) {
            return "number" == typeof t;
          }),
        h = 1e5,
        d = function (t) {
          return Math.round(t * h) / h || 0;
        };
      function p(t, e, n, i, r, u, h, d, p) {
        if (t !== d || e !== p) {
          (n = l(n)), (i = l(i));
          var f = (r % 360) * a,
            m = o(f),
            g = s(f),
            _ = Math.PI,
            v = 2 * _,
            x = (t - d) / 2,
            y = (e - p) / 2,
            M = m * x + g * y,
            S = -g * x + m * y,
            E = M * M,
            b = S * S,
            T = E / (n * n) + b / (i * i);
          T > 1 && ((n = c(T) * n), (i = c(T) * i));
          var w = n * n,
            A = i * i,
            R = (w * A - w * b - A * E) / (w * b + A * E);
          R < 0 && (R = 0);
          var C = (u === h ? -1 : 1) * c(R),
            P = C * ((n * S) / i),
            L = C * ((-i * M) / n),
            U = (t + d) / 2 + (m * P - g * L),
            D = (e + p) / 2 + (g * P + m * L),
            I = (M - P) / n,
            N = (S - L) / i,
            O = (-M - P) / n,
            F = (-S - L) / i,
            B = I * I + N * N,
            z = (N < 0 ? -1 : 1) * Math.acos(I / c(B)),
            k =
              (I * F - N * O < 0 ? -1 : 1) *
              Math.acos((I * O + N * F) / c(B * (O * O + F * F)));
          isNaN(k) && (k = _),
            !h && k > 0 ? (k -= v) : h && k < 0 && (k += v),
            (z %= v),
            (k %= v);
          var H,
            G = Math.ceil(l(k) / (v / 4)),
            V = [],
            W = k / G,
            X = ((4 / 3) * s(W / 2)) / (1 + o(W / 2)),
            q = m * n,
            j = g * n,
            Y = g * -i,
            K = m * i;
          for (H = 0; H < G; H++)
            (M = o((r = z + H * W))),
              (S = s(r)),
              (I = o((r += W))),
              (N = s(r)),
              V.push(M - X * S, S + X * M, I + X * N, N - X * I, I, N);
          for (H = 0; H < V.length; H += 2)
            (M = V[H]),
              (S = V[H + 1]),
              (V[H] = M * q + S * Y + U),
              (V[H + 1] = M * j + S * K + D);
          return (V[H - 2] = d), (V[H - 1] = p), V;
        }
      }
      var f,
        m,
        g = function () {
          return (
            f ||
            ("undefined" != typeof window &&
              (f = window.gsap) &&
              f.registerPlugin &&
              f)
          );
        },
        _ = function () {
          (f = g())
            ? (f.registerEase("_CE", S.create), (m = 1))
            : console.warn("Please gsap.registerPlugin(CustomEase)");
        },
        v = function (t) {
          return ~~(1e3 * t + (t < 0 ? -0.5 : 0.5)) / 1e3;
        },
        x = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/gi,
        y = /[cLlsSaAhHvVtTqQ]/g,
        M = function t(e, n, i, r, a, s, o, l, c, u, h) {
          var d,
            p = (e + i) / 2,
            f = (n + r) / 2,
            m = (i + a) / 2,
            g = (r + s) / 2,
            _ = (a + o) / 2,
            v = (s + l) / 2,
            x = (p + m) / 2,
            y = (f + g) / 2,
            M = (m + _) / 2,
            S = (g + v) / 2,
            E = (x + M) / 2,
            b = (y + S) / 2,
            T = o - e,
            w = l - n,
            A = Math.abs((i - o) * w - (r - l) * T),
            R = Math.abs((a - o) * w - (s - l) * T);
          return (
            u ||
              ((u = [
                { x: e, y: n },
                { x: o, y: l },
              ]),
              (h = 1)),
            u.splice(h || u.length - 1, 0, { x: E, y: b }),
            (A + R) * (A + R) > c * (T * T + w * w) &&
              ((d = u.length),
              t(e, n, p, f, x, y, E, b, c, u, h),
              t(E, b, M, S, _, v, o, l, c, u, h + 1 + (u.length - d))),
            u
          );
        },
        S = (function () {
          function t(t, e, n) {
            m || _(), (this.id = t), this.setData(e, n);
          }
          var e = t.prototype;
          return (
            (e.setData = function (t, e) {
              e = e || {};
              var n,
                a,
                s,
                o,
                c,
                u,
                h,
                d,
                m,
                g = (t = t || "0,0,1,1").match(x),
                _ = 1,
                v = [],
                S = [],
                E = e.precision || 1,
                b = E <= 1;
              if (
                ((this.data = t),
                (y.test(t) || (~t.indexOf("M") && t.indexOf("C") < 0)) &&
                  (g = (function (t) {
                    var e,
                      n,
                      a,
                      s,
                      o,
                      c,
                      u,
                      h,
                      d,
                      f,
                      m,
                      g,
                      _,
                      v,
                      x,
                      y =
                        (t + "")
                          .replace(r, function (t) {
                            var e = +t;
                            return e < 1e-4 && e > -1e-4 ? 0 : e;
                          })
                          .match(i) || [],
                      M = [],
                      S = 0,
                      E = 0,
                      b = 2 / 3,
                      T = y.length,
                      w = 0,
                      A = "ERROR: malformed path: " + t,
                      R = function (t, e, n, i) {
                        (f = (n - t) / 3),
                          (m = (i - e) / 3),
                          u.push(t + f, e + m, n - f, i - m, n, i);
                      };
                    if (!t || !isNaN(y[0]) || isNaN(y[1]))
                      return console.log(A), M;
                    for (e = 0; e < T; e++)
                      if (
                        ((_ = o),
                        isNaN(y[e])
                          ? (c = (o = y[e].toUpperCase()) !== y[e])
                          : e--,
                        (a = +y[e + 1]),
                        (s = +y[e + 2]),
                        c && ((a += S), (s += E)),
                        e || ((h = a), (d = s)),
                        "M" === o)
                      )
                        u && (u.length < 8 ? (M.length -= 1) : (w += u.length)),
                          (S = h = a),
                          (E = d = s),
                          (u = [a, s]),
                          M.push(u),
                          (e += 2),
                          (o = "L");
                      else if ("C" === o)
                        u || (u = [0, 0]),
                          c || (S = E = 0),
                          u.push(
                            a,
                            s,
                            S + 1 * y[e + 3],
                            E + 1 * y[e + 4],
                            (S += 1 * y[e + 5]),
                            (E += 1 * y[e + 6])
                          ),
                          (e += 6);
                      else if ("S" === o)
                        (f = S),
                          (m = E),
                          ("C" !== _ && "S" !== _) ||
                            ((f += S - u[u.length - 4]),
                            (m += E - u[u.length - 3])),
                          c || (S = E = 0),
                          u.push(
                            f,
                            m,
                            a,
                            s,
                            (S += 1 * y[e + 3]),
                            (E += 1 * y[e + 4])
                          ),
                          (e += 4);
                      else if ("Q" === o)
                        (f = S + (a - S) * b),
                          (m = E + (s - E) * b),
                          c || (S = E = 0),
                          (S += 1 * y[e + 3]),
                          (E += 1 * y[e + 4]),
                          u.push(f, m, S + (a - S) * b, E + (s - E) * b, S, E),
                          (e += 4);
                      else if ("T" === o)
                        (f = S - u[u.length - 4]),
                          (m = E - u[u.length - 3]),
                          u.push(
                            S + f,
                            E + m,
                            a + (S + 1.5 * f - a) * b,
                            s + (E + 1.5 * m - s) * b,
                            (S = a),
                            (E = s)
                          ),
                          (e += 2);
                      else if ("H" === o) R(S, E, (S = a), E), (e += 1);
                      else if ("V" === o)
                        R(S, E, S, (E = a + (c ? E - S : 0))), (e += 1);
                      else if ("L" === o || "Z" === o)
                        "Z" === o && ((a = h), (s = d), (u.closed = !0)),
                          ("L" === o || l(S - a) > 0.5 || l(E - s) > 0.5) &&
                            (R(S, E, a, s), "L" === o && (e += 2)),
                          (S = a),
                          (E = s);
                      else if ("A" === o) {
                        if (
                          ((v = y[e + 4]),
                          (x = y[e + 5]),
                          (f = y[e + 6]),
                          (m = y[e + 7]),
                          (n = 7),
                          v.length > 1 &&
                            (v.length < 3
                              ? ((m = f), (f = x), n--)
                              : ((m = x), (f = v.substr(2)), (n -= 2)),
                            (x = v.charAt(1)),
                            (v = v.charAt(0))),
                          (g = p(
                            S,
                            E,
                            +y[e + 1],
                            +y[e + 2],
                            +y[e + 3],
                            +v,
                            +x,
                            (c ? S : 0) + 1 * f,
                            (c ? E : 0) + 1 * m
                          )),
                          (e += n),
                          g)
                        )
                          for (n = 0; n < g.length; n++) u.push(g[n]);
                        (S = u[u.length - 2]), (E = u[u.length - 1]);
                      } else console.log(A);
                    return (
                      (e = u.length) < 6
                        ? (M.pop(), (e = 0))
                        : u[0] === u[e - 2] &&
                          u[1] === u[e - 1] &&
                          (u.closed = !0),
                      (M.totalPoints = w + e),
                      M
                    );
                  })(t)[0]),
                4 === (n = g.length))
              )
                g.unshift(0, 0), g.push(1, 1), (n = 8);
              else if ((n - 2) % 6) throw "Invalid CustomEase";
              for (
                (0 == +g[0] && 1 == +g[n - 2]) ||
                  (function (t, e, n) {
                    n || 0 === n || (n = Math.max(+t[t.length - 1], +t[1]));
                    var i,
                      r = -1 * +t[0],
                      a = -n,
                      s = t.length,
                      o = 1 / (+t[s - 2] + r),
                      l =
                        -e ||
                        (Math.abs(+t[s - 1] - +t[1]) <
                        0.01 * (+t[s - 2] - +t[0])
                          ? (function (t) {
                              var e,
                                n = t.length,
                                i = 1e20;
                              for (e = 1; e < n; e += 6)
                                +t[e] < i && (i = +t[e]);
                              return i;
                            })(t) + a
                          : +t[s - 1] + a);
                    for (l = l ? 1 / l : -o, i = 0; i < s; i += 2)
                      (t[i] = (+t[i] + r) * o),
                        (t[i + 1] = (+t[i + 1] + a) * l);
                  })(g, e.height, e.originY),
                  this.segment = g,
                  o = 2;
                o < n;
                o += 6
              )
                (a = { x: +g[o - 2], y: +g[o - 1] }),
                  (s = { x: +g[o + 4], y: +g[o + 5] }),
                  v.push(a, s),
                  M(
                    a.x,
                    a.y,
                    +g[o],
                    +g[o + 1],
                    +g[o + 2],
                    +g[o + 3],
                    s.x,
                    s.y,
                    1 / (2e5 * E),
                    v,
                    v.length - 1
                  );
              for (n = v.length, o = 0; o < n; o++)
                (h = v[o]),
                  (d = v[o - 1] || h),
                  (h.x > d.x || (d.y !== h.y && d.x === h.x) || h === d) &&
                  h.x <= 1
                    ? ((d.cx = h.x - d.x),
                      (d.cy = h.y - d.y),
                      (d.n = h),
                      (d.nx = h.x),
                      b &&
                        o > 1 &&
                        Math.abs(d.cy / d.cx - v[o - 2].cy / v[o - 2].cx) > 2 &&
                        (b = 0),
                      d.cx < _ &&
                        (d.cx
                          ? (_ = d.cx)
                          : ((d.cx = 0.001),
                            o === n - 1 &&
                              ((d.x -= 0.001),
                              (_ = Math.min(_, 0.001)),
                              (b = 0)))))
                    : (v.splice(o--, 1), n--);
              if (((c = 1 / (n = (1 / _ + 1) | 0)), (u = 0), (h = v[0]), b)) {
                for (o = 0; o < n; o++)
                  (m = o * c),
                    h.nx < m && (h = v[++u]),
                    (a = h.y + ((m - h.x) / h.cx) * h.cy),
                    (S[o] = { x: m, cx: c, y: a, cy: 0, nx: 9 }),
                    o && (S[o - 1].cy = a - S[o - 1].y);
                S[n - 1].cy = v[v.length - 1].y - a;
              } else {
                for (o = 0; o < n; o++)
                  h.nx < o * c && (h = v[++u]), (S[o] = h);
                u < v.length - 1 && (S[o - 1] = v[v.length - 2]);
              }
              return (
                (this.ease = function (t) {
                  var e = S[(t * n) | 0] || S[n - 1];
                  return e.nx < t && (e = e.n), e.y + ((t - e.x) / e.cx) * e.cy;
                }),
                (this.ease.custom = this),
                this.id && f && f.registerEase(this.id, this.ease),
                this
              );
            }),
            (e.getSVGData = function (e) {
              return t.getSVGData(this, e);
            }),
            (t.create = function (e, n, i) {
              return new t(e, n, i).ease;
            }),
            (t.register = function (t) {
              (f = t), _();
            }),
            (t.get = function (t) {
              return f.parseEase(t);
            }),
            (t.getSVGData = function (e, n) {
              var i,
                r,
                a,
                s,
                o,
                l,
                c,
                h,
                p,
                m,
                g = (n = n || {}).width || 100,
                _ = n.height || 100,
                x = n.x || 0,
                y = (n.y || 0) + _,
                M = f.utils.toArray(n.path)[0];
              if (
                (n.invert && ((_ = -_), (y = 0)),
                "string" == typeof e && (e = f.parseEase(e)),
                e.custom && (e = e.custom),
                e instanceof t)
              )
                i = (function (t) {
                  u(t[0]) && (t = [t]);
                  var e,
                    n,
                    i,
                    r,
                    a = "",
                    s = t.length;
                  for (n = 0; n < s; n++) {
                    for (
                      r = t[n],
                        a += "M" + d(r[0]) + "," + d(r[1]) + " C",
                        e = r.length,
                        i = 2;
                      i < e;
                      i++
                    )
                      a +=
                        d(r[i++]) +
                        "," +
                        d(r[i++]) +
                        " " +
                        d(r[i++]) +
                        "," +
                        d(r[i++]) +
                        " " +
                        d(r[i++]) +
                        "," +
                        d(r[i]) +
                        " ";
                    r.closed && (a += "z");
                  }
                  return a;
                })(
                  (function (t, e, n, i, r, a, s) {
                    for (var o, l, c, u, h, d = t.length; --d > -1; )
                      for (l = (o = t[d]).length, c = 0; c < l; c += 2)
                        (u = o[c]),
                          (h = o[c + 1]),
                          (o[c] = u * e + 0 * h + a),
                          (o[c + 1] = 0 * u + h * r + s);
                    return (t._dirty = 1), t;
                  })([e.segment], g, 0, 0, -_, x, y)
                );
              else {
                for (
                  i = [x, y],
                    s = 1 / (c = Math.max(5, 200 * (n.precision || 1))),
                    h = 5 / (c += 2),
                    p = v(x + s * g),
                    r = ((m = v(y + e(s) * -_)) - y) / (p - x),
                    a = 2;
                  a < c;
                  a++
                )
                  (o = v(x + a * s * g)),
                    (l = v(y + e(a * s) * -_)),
                    (Math.abs((l - m) / (o - p) - r) > h || a === c - 1) &&
                      (i.push(p, m), (r = (l - m) / (o - p))),
                    (p = o),
                    (m = l);
                i = "M" + i.join(",");
              }
              return M && M.setAttribute("d", i), i;
            }),
            t
          );
        })();
      g() && f.registerPlugin(S), (S.version = "3.12.5");
    },
    880: (t, e, n) => {
      function i(t) {
        if (void 0 === t)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        return t;
      }
      function r(t, e) {
        (t.prototype = Object.create(e.prototype)),
          (t.prototype.constructor = t),
          (t.__proto__ = e);
      }
      n.d(e, { os: () => Yi });
      var a,
        s,
        o,
        l,
        c,
        u,
        h,
        d,
        p,
        f,
        m,
        g,
        _,
        v,
        x,
        y,
        M,
        S = {
          autoSleep: 120,
          force3D: "auto",
          nullTargetWarn: 1,
          units: { lineHeight: "" },
        },
        E = { duration: 0.5, overwrite: !1, delay: 0 },
        b = 1e8,
        T = 1e-8,
        w = 2 * Math.PI,
        A = w / 4,
        R = 0,
        C = Math.sqrt,
        P = Math.cos,
        L = Math.sin,
        U = function (t) {
          return "string" == typeof t;
        },
        D = function (t) {
          return "function" == typeof t;
        },
        I = function (t) {
          return "number" == typeof t;
        },
        N = function (t) {
          return void 0 === t;
        },
        O = function (t) {
          return "object" == typeof t;
        },
        F = function (t) {
          return !1 !== t;
        },
        B = function () {
          return "undefined" != typeof window;
        },
        z = function (t) {
          return D(t) || U(t);
        },
        k =
          ("function" == typeof ArrayBuffer && ArrayBuffer.isView) ||
          function () {},
        H = Array.isArray,
        G = /(?:-?\.?\d|\.)+/gi,
        V = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
        W = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
        X = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
        q = /[+-]=-?[.\d]+/,
        j = /[^,'"\[\]\s]+/gi,
        Y = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
        K = {},
        Z = {},
        $ = function (t) {
          return (Z = wt(t, K)) && An;
        },
        Q = function (t, e) {
          return console.warn(
            "Invalid property",
            t,
            "set to",
            e,
            "Missing plugin? gsap.registerPlugin()"
          );
        },
        J = function (t, e) {
          return !e && console.warn(t);
        },
        tt = function (t, e) {
          return (t && (K[t] = e) && Z && (Z[t] = e)) || K;
        },
        et = function () {
          return 0;
        },
        nt = { suppressEvents: !0, isStart: !0, kill: !1 },
        it = { suppressEvents: !0, kill: !1 },
        rt = { suppressEvents: !0 },
        at = {},
        st = [],
        ot = {},
        lt = {},
        ct = {},
        ut = 30,
        ht = [],
        dt = "",
        pt = function (t) {
          var e,
            n,
            i = t[0];
          if ((O(i) || D(i) || (t = [t]), !(e = (i._gsap || {}).harness))) {
            for (n = ht.length; n-- && !ht[n].targetTest(i); );
            e = ht[n];
          }
          for (n = t.length; n--; )
            (t[n] && (t[n]._gsap || (t[n]._gsap = new ke(t[n], e)))) ||
              t.splice(n, 1);
          return t;
        },
        ft = function (t) {
          return t._gsap || pt(ie(t))[0]._gsap;
        },
        mt = function (t, e, n) {
          return (n = t[e]) && D(n)
            ? t[e]()
            : (N(n) && t.getAttribute && t.getAttribute(e)) || n;
        },
        gt = function (t, e) {
          return (t = t.split(",")).forEach(e) || t;
        },
        _t = function (t) {
          return Math.round(1e5 * t) / 1e5 || 0;
        },
        vt = function (t) {
          return Math.round(1e7 * t) / 1e7 || 0;
        },
        xt = function (t, e) {
          var n = e.charAt(0),
            i = parseFloat(e.substr(2));
          return (
            (t = parseFloat(t)),
            "+" === n ? t + i : "-" === n ? t - i : "*" === n ? t * i : t / i
          );
        },
        yt = function (t, e) {
          for (var n = e.length, i = 0; t.indexOf(e[i]) < 0 && ++i < n; );
          return i < n;
        },
        Mt = function () {
          var t,
            e,
            n = st.length,
            i = st.slice(0);
          for (ot = {}, st.length = 0, t = 0; t < n; t++)
            (e = i[t]) &&
              e._lazy &&
              (e.render(e._lazy[0], e._lazy[1], !0)._lazy = 0);
        },
        St = function (t, e, n, i) {
          st.length && !s && Mt(),
            t.render(e, n, i || (s && e < 0 && (t._initted || t._startAt))),
            st.length && !s && Mt();
        },
        Et = function (t) {
          var e = parseFloat(t);
          return (e || 0 === e) && (t + "").match(j).length < 2
            ? e
            : U(t)
            ? t.trim()
            : t;
        },
        bt = function (t) {
          return t;
        },
        Tt = function (t, e) {
          for (var n in e) n in t || (t[n] = e[n]);
          return t;
        },
        wt = function (t, e) {
          for (var n in e) t[n] = e[n];
          return t;
        },
        At = function t(e, n) {
          for (var i in n)
            "__proto__" !== i &&
              "constructor" !== i &&
              "prototype" !== i &&
              (e[i] = O(n[i]) ? t(e[i] || (e[i] = {}), n[i]) : n[i]);
          return e;
        },
        Rt = function (t, e) {
          var n,
            i = {};
          for (n in t) n in e || (i[n] = t[n]);
          return i;
        },
        Ct = function (t) {
          var e,
            n = t.parent || l,
            i = t.keyframes
              ? ((e = H(t.keyframes)),
                function (t, n) {
                  for (var i in n)
                    i in t ||
                      ("duration" === i && e) ||
                      "ease" === i ||
                      (t[i] = n[i]);
                })
              : Tt;
          if (F(t.inherit))
            for (; n; ) i(t, n.vars.defaults), (n = n.parent || n._dp);
          return t;
        },
        Pt = function (t, e, n, i, r) {
          void 0 === n && (n = "_first"), void 0 === i && (i = "_last");
          var a,
            s = t[i];
          if (r) for (a = e[r]; s && s[r] > a; ) s = s._prev;
          return (
            s
              ? ((e._next = s._next), (s._next = e))
              : ((e._next = t[n]), (t[n] = e)),
            e._next ? (e._next._prev = e) : (t[i] = e),
            (e._prev = s),
            (e.parent = e._dp = t),
            e
          );
        },
        Lt = function (t, e, n, i) {
          void 0 === n && (n = "_first"), void 0 === i && (i = "_last");
          var r = e._prev,
            a = e._next;
          r ? (r._next = a) : t[n] === e && (t[n] = a),
            a ? (a._prev = r) : t[i] === e && (t[i] = r),
            (e._next = e._prev = e.parent = null);
        },
        Ut = function (t, e) {
          t.parent &&
            (!e || t.parent.autoRemoveChildren) &&
            t.parent.remove &&
            t.parent.remove(t),
            (t._act = 0);
        },
        Dt = function (t, e) {
          if (t && (!e || e._end > t._dur || e._start < 0))
            for (var n = t; n; ) (n._dirty = 1), (n = n.parent);
          return t;
        },
        It = function (t, e, n, i) {
          return (
            t._startAt &&
            (s
              ? t._startAt.revert(it)
              : (t.vars.immediateRender && !t.vars.autoRevert) ||
                t._startAt.render(e, !0, i))
          );
        },
        Nt = function t(e) {
          return !e || (e._ts && t(e.parent));
        },
        Ot = function (t) {
          return t._repeat
            ? Ft(t._tTime, (t = t.duration() + t._rDelay)) * t
            : 0;
        },
        Ft = function (t, e) {
          var n = Math.floor((t /= e));
          return t && n === t ? n - 1 : n;
        },
        Bt = function (t, e) {
          return (
            (t - e._start) * e._ts +
            (e._ts >= 0 ? 0 : e._dirty ? e.totalDuration() : e._tDur)
          );
        },
        zt = function (t) {
          return (t._end = vt(
            t._start + (t._tDur / Math.abs(t._ts || t._rts || T) || 0)
          ));
        },
        kt = function (t, e) {
          var n = t._dp;
          return (
            n &&
              n.smoothChildTiming &&
              t._ts &&
              ((t._start = vt(
                n._time -
                  (t._ts > 0
                    ? e / t._ts
                    : ((t._dirty ? t.totalDuration() : t._tDur) - e) / -t._ts)
              )),
              zt(t),
              n._dirty || Dt(n, t)),
            t
          );
        },
        Ht = function (t, e) {
          var n;
          if (
            ((e._time ||
              (!e._dur && e._initted) ||
              (e._start < t._time && (e._dur || !e.add))) &&
              ((n = Bt(t.rawTime(), e)),
              (!e._dur || Jt(0, e.totalDuration(), n) - e._tTime > T) &&
                e.render(n, !0)),
            Dt(t, e)._dp && t._initted && t._time >= t._dur && t._ts)
          ) {
            if (t._dur < t.duration())
              for (n = t; n._dp; )
                n.rawTime() >= 0 && n.totalTime(n._tTime), (n = n._dp);
            t._zTime = -1e-8;
          }
        },
        Gt = function (t, e, n, i) {
          return (
            e.parent && Ut(e),
            (e._start = vt(
              (I(n) ? n : n || t !== l ? Zt(t, n, e) : t._time) + e._delay
            )),
            (e._end = vt(
              e._start + (e.totalDuration() / Math.abs(e.timeScale()) || 0)
            )),
            Pt(t, e, "_first", "_last", t._sort ? "_start" : 0),
            qt(e) || (t._recent = e),
            i || Ht(t, e),
            t._ts < 0 && kt(t, t._tTime),
            t
          );
        },
        Vt = function (t, e) {
          return (
            (K.ScrollTrigger || Q("scrollTrigger", e)) &&
            K.ScrollTrigger.create(e, t)
          );
        },
        Wt = function (t, e, n, i, r) {
          return (
            Ye(t, e, r),
            t._initted
              ? !n &&
                t._pt &&
                !s &&
                ((t._dur && !1 !== t.vars.lazy) || (!t._dur && t.vars.lazy)) &&
                p !== Ae.frame
                ? (st.push(t), (t._lazy = [r, i]), 1)
                : void 0
              : 1
          );
        },
        Xt = function t(e) {
          var n = e.parent;
          return (
            n && n._ts && n._initted && !n._lock && (n.rawTime() < 0 || t(n))
          );
        },
        qt = function (t) {
          var e = t.data;
          return "isFromStart" === e || "isStart" === e;
        },
        jt = function (t, e, n, i) {
          var r = t._repeat,
            a = vt(e) || 0,
            s = t._tTime / t._tDur;
          return (
            s && !i && (t._time *= a / t._dur),
            (t._dur = a),
            (t._tDur = r
              ? r < 0
                ? 1e10
                : vt(a * (r + 1) + t._rDelay * r)
              : a),
            s > 0 && !i && kt(t, (t._tTime = t._tDur * s)),
            t.parent && zt(t),
            n || Dt(t.parent, t),
            t
          );
        },
        Yt = function (t) {
          return t instanceof Ge ? Dt(t) : jt(t, t._dur);
        },
        Kt = { _start: 0, endTime: et, totalDuration: et },
        Zt = function t(e, n, i) {
          var r,
            a,
            s,
            o = e.labels,
            l = e._recent || Kt,
            c = e.duration() >= b ? l.endTime(!1) : e._dur;
          return U(n) && (isNaN(n) || n in o)
            ? ((a = n.charAt(0)),
              (s = "%" === n.substr(-1)),
              (r = n.indexOf("=")),
              "<" === a || ">" === a
                ? (r >= 0 && (n = n.replace(/=/, "")),
                  ("<" === a ? l._start : l.endTime(l._repeat >= 0)) +
                    (parseFloat(n.substr(1)) || 0) *
                      (s ? (r < 0 ? l : i).totalDuration() / 100 : 1))
                : r < 0
                ? (n in o || (o[n] = c), o[n])
                : ((a = parseFloat(n.charAt(r - 1) + n.substr(r + 1))),
                  s && i && (a = (a / 100) * (H(i) ? i[0] : i).totalDuration()),
                  r > 1 ? t(e, n.substr(0, r - 1), i) + a : c + a))
            : null == n
            ? c
            : +n;
        },
        $t = function (t, e, n) {
          var i,
            r,
            a = I(e[1]),
            s = (a ? 2 : 1) + (t < 2 ? 0 : 1),
            o = e[s];
          if ((a && (o.duration = e[1]), (o.parent = n), t)) {
            for (i = o, r = n; r && !("immediateRender" in i); )
              (i = r.vars.defaults || {}), (r = F(r.vars.inherit) && r.parent);
            (o.immediateRender = F(i.immediateRender)),
              t < 2 ? (o.runBackwards = 1) : (o.startAt = e[s - 1]);
          }
          return new Je(e[0], o, e[s + 1]);
        },
        Qt = function (t, e) {
          return t || 0 === t ? e(t) : e;
        },
        Jt = function (t, e, n) {
          return n < t ? t : n > e ? e : n;
        },
        te = function (t, e) {
          return U(t) && (e = Y.exec(t)) ? e[1] : "";
        },
        ee = [].slice,
        ne = function (t, e) {
          return (
            t &&
            O(t) &&
            "length" in t &&
            ((!e && !t.length) || (t.length - 1 in t && O(t[0]))) &&
            !t.nodeType &&
            t !== c
          );
        },
        ie = function (t, e, n) {
          return o && !e && o.selector
            ? o.selector(t)
            : !U(t) || n || (!u && Re())
            ? H(t)
              ? (function (t, e, n) {
                  return (
                    void 0 === n && (n = []),
                    t.forEach(function (t) {
                      var i;
                      return (U(t) && !e) || ne(t, 1)
                        ? (i = n).push.apply(i, ie(t))
                        : n.push(t);
                    }) || n
                  );
                })(t, n)
              : ne(t)
              ? ee.call(t, 0)
              : t
              ? [t]
              : []
            : ee.call((e || h).querySelectorAll(t), 0);
        },
        re = function (t) {
          return (
            (t = ie(t)[0] || J("Invalid scope") || {}),
            function (e) {
              var n = t.current || t.nativeElement || t;
              return ie(
                e,
                n.querySelectorAll
                  ? n
                  : n === t
                  ? J("Invalid scope") || h.createElement("div")
                  : t
              );
            }
          );
        },
        ae = function (t) {
          return t.sort(function () {
            return 0.5 - Math.random();
          });
        },
        se = function (t) {
          if (D(t)) return t;
          var e = O(t) ? t : { each: t },
            n = Ne(e.ease),
            i = e.from || 0,
            r = parseFloat(e.base) || 0,
            a = {},
            s = i > 0 && i < 1,
            o = isNaN(i) || s,
            l = e.axis,
            c = i,
            u = i;
          return (
            U(i)
              ? (c = u = { center: 0.5, edges: 0.5, end: 1 }[i] || 0)
              : !s && o && ((c = i[0]), (u = i[1])),
            function (t, s, h) {
              var d,
                p,
                f,
                m,
                g,
                _,
                v,
                x,
                y,
                M = (h || e).length,
                S = a[M];
              if (!S) {
                if (!(y = "auto" === e.grid ? 0 : (e.grid || [1, b])[1])) {
                  for (
                    v = -b;
                    v < (v = h[y++].getBoundingClientRect().left) && y < M;

                  );
                  y < M && y--;
                }
                for (
                  S = a[M] = [],
                    d = o ? Math.min(y, M) * c - 0.5 : i % y,
                    p = y === b ? 0 : o ? (M * u) / y - 0.5 : (i / y) | 0,
                    v = 0,
                    x = b,
                    _ = 0;
                  _ < M;
                  _++
                )
                  (f = (_ % y) - d),
                    (m = p - ((_ / y) | 0)),
                    (S[_] = g =
                      l ? Math.abs("y" === l ? m : f) : C(f * f + m * m)),
                    g > v && (v = g),
                    g < x && (x = g);
                "random" === i && ae(S),
                  (S.max = v - x),
                  (S.min = x),
                  (S.v = M =
                    (parseFloat(e.amount) ||
                      parseFloat(e.each) *
                        (y > M
                          ? M - 1
                          : l
                          ? "y" === l
                            ? M / y
                            : y
                          : Math.max(y, M / y)) ||
                      0) * ("edges" === i ? -1 : 1)),
                  (S.b = M < 0 ? r - M : r),
                  (S.u = te(e.amount || e.each) || 0),
                  (n = n && M < 0 ? De(n) : n);
              }
              return (
                (M = (S[t] - S.min) / S.max || 0),
                vt(S.b + (n ? n(M) : M) * S.v) + S.u
              );
            }
          );
        },
        oe = function (t) {
          var e = Math.pow(10, ((t + "").split(".")[1] || "").length);
          return function (n) {
            var i = vt(Math.round(parseFloat(n) / t) * t * e);
            return (i - (i % 1)) / e + (I(n) ? 0 : te(n));
          };
        },
        le = function (t, e) {
          var n,
            i,
            r = H(t);
          return (
            !r &&
              O(t) &&
              ((n = r = t.radius || b),
              t.values
                ? ((t = ie(t.values)), (i = !I(t[0])) && (n *= n))
                : (t = oe(t.increment))),
            Qt(
              e,
              r
                ? D(t)
                  ? function (e) {
                      return (i = t(e)), Math.abs(i - e) <= n ? i : e;
                    }
                  : function (e) {
                      for (
                        var r,
                          a,
                          s = parseFloat(i ? e.x : e),
                          o = parseFloat(i ? e.y : 0),
                          l = b,
                          c = 0,
                          u = t.length;
                        u--;

                      )
                        (r = i
                          ? (r = t[u].x - s) * r + (a = t[u].y - o) * a
                          : Math.abs(t[u] - s)) < l && ((l = r), (c = u));
                      return (
                        (c = !n || l <= n ? t[c] : e),
                        i || c === e || I(e) ? c : c + te(e)
                      );
                    }
                : oe(t)
            )
          );
        },
        ce = function (t, e, n, i) {
          return Qt(H(t) ? !e : !0 === n ? !!(n = 0) : !i, function () {
            return H(t)
              ? t[~~(Math.random() * t.length)]
              : (n = n || 1e-5) &&
                  (i = n < 1 ? Math.pow(10, (n + "").length - 2) : 1) &&
                  Math.floor(
                    Math.round(
                      (t - n / 2 + Math.random() * (e - t + 0.99 * n)) / n
                    ) *
                      n *
                      i
                  ) / i;
          });
        },
        ue = function (t, e, n) {
          return Qt(n, function (n) {
            return t[~~e(n)];
          });
        },
        he = function (t) {
          for (var e, n, i, r, a = 0, s = ""; ~(e = t.indexOf("random(", a)); )
            (i = t.indexOf(")", e)),
              (r = "[" === t.charAt(e + 7)),
              (n = t.substr(e + 7, i - e - 7).match(r ? j : G)),
              (s +=
                t.substr(a, e - a) +
                ce(r ? n : +n[0], r ? 0 : +n[1], +n[2] || 1e-5)),
              (a = i + 1);
          return s + t.substr(a, t.length - a);
        },
        de = function (t, e, n, i, r) {
          var a = e - t,
            s = i - n;
          return Qt(r, function (e) {
            return n + (((e - t) / a) * s || 0);
          });
        },
        pe = function (t, e, n) {
          var i,
            r,
            a,
            s = t.labels,
            o = b;
          for (i in s)
            (r = s[i] - e) < 0 == !!n &&
              r &&
              o > (r = Math.abs(r)) &&
              ((a = i), (o = r));
          return a;
        },
        fe = function (t, e, n) {
          var i,
            r,
            a,
            s = t.vars,
            l = s[e],
            c = o,
            u = t._ctx;
          if (l)
            return (
              (i = s[e + "Params"]),
              (r = s.callbackScope || t),
              n && st.length && Mt(),
              u && (o = u),
              (a = i ? l.apply(r, i) : l.call(r)),
              (o = c),
              a
            );
        },
        me = function (t) {
          return (
            Ut(t),
            t.scrollTrigger && t.scrollTrigger.kill(!!s),
            t.progress() < 1 && fe(t, "onInterrupt"),
            t
          );
        },
        ge = [],
        _e = function (t) {
          if (t)
            if (((t = (!t.name && t.default) || t), B() || t.headless)) {
              var e = t.name,
                n = D(t),
                i =
                  e && !n && t.init
                    ? function () {
                        this._props = [];
                      }
                    : t,
                r = {
                  init: et,
                  render: cn,
                  add: qe,
                  kill: hn,
                  modifier: un,
                  rawVars: 0,
                },
                a = {
                  targetTest: 0,
                  get: 0,
                  getSetter: an,
                  aliases: {},
                  register: 0,
                };
              if ((Re(), t !== i)) {
                if (lt[e]) return;
                Tt(i, Tt(Rt(t, r), a)),
                  wt(i.prototype, wt(r, Rt(t, a))),
                  (lt[(i.prop = e)] = i),
                  t.targetTest && (ht.push(i), (at[e] = 1)),
                  (e =
                    ("css" === e
                      ? "CSS"
                      : e.charAt(0).toUpperCase() + e.substr(1)) + "Plugin");
              }
              tt(e, i), t.register && t.register(An, i, fn);
            } else ge.push(t);
        },
        ve = 255,
        xe = {
          aqua: [0, ve, ve],
          lime: [0, ve, 0],
          silver: [192, 192, 192],
          black: [0, 0, 0],
          maroon: [128, 0, 0],
          teal: [0, 128, 128],
          blue: [0, 0, ve],
          navy: [0, 0, 128],
          white: [ve, ve, ve],
          olive: [128, 128, 0],
          yellow: [ve, ve, 0],
          orange: [ve, 165, 0],
          gray: [128, 128, 128],
          purple: [128, 0, 128],
          green: [0, 128, 0],
          red: [ve, 0, 0],
          pink: [ve, 192, 203],
          cyan: [0, ve, ve],
          transparent: [ve, ve, ve, 0],
        },
        ye = function (t, e, n) {
          return (
            ((6 * (t += t < 0 ? 1 : t > 1 ? -1 : 0) < 1
              ? e + (n - e) * t * 6
              : t < 0.5
              ? n
              : 3 * t < 2
              ? e + (n - e) * (2 / 3 - t) * 6
              : e) *
              ve +
              0.5) |
            0
          );
        },
        Me = function (t, e, n) {
          var i,
            r,
            a,
            s,
            o,
            l,
            c,
            u,
            h,
            d,
            p = t ? (I(t) ? [t >> 16, (t >> 8) & ve, t & ve] : 0) : xe.black;
          if (!p) {
            if (
              ("," === t.substr(-1) && (t = t.substr(0, t.length - 1)), xe[t])
            )
              p = xe[t];
            else if ("#" === t.charAt(0)) {
              if (
                (t.length < 6 &&
                  ((i = t.charAt(1)),
                  (r = t.charAt(2)),
                  (a = t.charAt(3)),
                  (t =
                    "#" +
                    i +
                    i +
                    r +
                    r +
                    a +
                    a +
                    (5 === t.length ? t.charAt(4) + t.charAt(4) : ""))),
                9 === t.length)
              )
                return [
                  (p = parseInt(t.substr(1, 6), 16)) >> 16,
                  (p >> 8) & ve,
                  p & ve,
                  parseInt(t.substr(7), 16) / 255,
                ];
              p = [
                (t = parseInt(t.substr(1), 16)) >> 16,
                (t >> 8) & ve,
                t & ve,
              ];
            } else if ("hsl" === t.substr(0, 3))
              if (((p = d = t.match(G)), e)) {
                if (~t.indexOf("="))
                  return (p = t.match(V)), n && p.length < 4 && (p[3] = 1), p;
              } else
                (s = (+p[0] % 360) / 360),
                  (o = +p[1] / 100),
                  (i =
                    2 * (l = +p[2] / 100) -
                    (r = l <= 0.5 ? l * (o + 1) : l + o - l * o)),
                  p.length > 3 && (p[3] *= 1),
                  (p[0] = ye(s + 1 / 3, i, r)),
                  (p[1] = ye(s, i, r)),
                  (p[2] = ye(s - 1 / 3, i, r));
            else p = t.match(G) || xe.transparent;
            p = p.map(Number);
          }
          return (
            e &&
              !d &&
              ((i = p[0] / ve),
              (r = p[1] / ve),
              (a = p[2] / ve),
              (l = ((c = Math.max(i, r, a)) + (u = Math.min(i, r, a))) / 2),
              c === u
                ? (s = o = 0)
                : ((h = c - u),
                  (o = l > 0.5 ? h / (2 - c - u) : h / (c + u)),
                  (s =
                    c === i
                      ? (r - a) / h + (r < a ? 6 : 0)
                      : c === r
                      ? (a - i) / h + 2
                      : (i - r) / h + 4),
                  (s *= 60)),
              (p[0] = ~~(s + 0.5)),
              (p[1] = ~~(100 * o + 0.5)),
              (p[2] = ~~(100 * l + 0.5))),
            n && p.length < 4 && (p[3] = 1),
            p
          );
        },
        Se = function (t) {
          var e = [],
            n = [],
            i = -1;
          return (
            t.split(be).forEach(function (t) {
              var r = t.match(W) || [];
              e.push.apply(e, r), n.push((i += r.length + 1));
            }),
            (e.c = n),
            e
          );
        },
        Ee = function (t, e, n) {
          var i,
            r,
            a,
            s,
            o = "",
            l = (t + o).match(be),
            c = e ? "hsla(" : "rgba(",
            u = 0;
          if (!l) return t;
          if (
            ((l = l.map(function (t) {
              return (
                (t = Me(t, e, 1)) &&
                c +
                  (e
                    ? t[0] + "," + t[1] + "%," + t[2] + "%," + t[3]
                    : t.join(",")) +
                  ")"
              );
            })),
            n && ((a = Se(t)), (i = n.c).join(o) !== a.c.join(o)))
          )
            for (s = (r = t.replace(be, "1").split(W)).length - 1; u < s; u++)
              o +=
                r[u] +
                (~i.indexOf(u)
                  ? l.shift() || c + "0,0,0,0)"
                  : (a.length ? a : l.length ? l : n).shift());
          if (!r)
            for (s = (r = t.split(be)).length - 1; u < s; u++) o += r[u] + l[u];
          return o + r[s];
        },
        be = (function () {
          var t,
            e =
              "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";
          for (t in xe) e += "|" + t + "\\b";
          return new RegExp(e + ")", "gi");
        })(),
        Te = /hsl[a]?\(/,
        we = function (t) {
          var e,
            n = t.join(" ");
          if (((be.lastIndex = 0), be.test(n)))
            return (
              (e = Te.test(n)),
              (t[1] = Ee(t[1], e)),
              (t[0] = Ee(t[0], e, Se(t[1]))),
              !0
            );
        },
        Ae = (function () {
          var t,
            e,
            n,
            i,
            r,
            a,
            s = Date.now,
            o = 500,
            l = 33,
            p = s(),
            f = p,
            g = 1e3 / 240,
            _ = g,
            v = [],
            x = function n(c) {
              var u,
                h,
                d,
                m,
                x = s() - f,
                y = !0 === c;
              if (
                ((x > o || x < 0) && (p += x - l),
                ((u = (d = (f += x) - p) - _) > 0 || y) &&
                  ((m = ++i.frame),
                  (r = d - 1e3 * i.time),
                  (i.time = d /= 1e3),
                  (_ += u + (u >= g ? 4 : g - u)),
                  (h = 1)),
                y || (t = e(n)),
                h)
              )
                for (a = 0; a < v.length; a++) v[a](d, r, m, c);
            };
          return (i = {
            time: 0,
            frame: 0,
            tick: function () {
              x(!0);
            },
            deltaRatio: function (t) {
              return r / (1e3 / (t || 60));
            },
            wake: function () {
              d &&
                (!u &&
                  B() &&
                  ((c = u = window),
                  (h = c.document || {}),
                  (K.gsap = An),
                  (c.gsapVersions || (c.gsapVersions = [])).push(An.version),
                  $(Z || c.GreenSockGlobals || (!c.gsap && c) || {}),
                  ge.forEach(_e)),
                (n =
                  "undefined" != typeof requestAnimationFrame &&
                  requestAnimationFrame),
                t && i.sleep(),
                (e =
                  n ||
                  function (t) {
                    return setTimeout(t, (_ - 1e3 * i.time + 1) | 0);
                  }),
                (m = 1),
                x(2));
            },
            sleep: function () {
              (n ? cancelAnimationFrame : clearTimeout)(t), (m = 0), (e = et);
            },
            lagSmoothing: function (t, e) {
              (o = t || 1 / 0), (l = Math.min(e || 33, o));
            },
            fps: function (t) {
              (g = 1e3 / (t || 240)), (_ = 1e3 * i.time + g);
            },
            add: function (t, e, n) {
              var r = e
                ? function (e, n, a, s) {
                    t(e, n, a, s), i.remove(r);
                  }
                : t;
              return i.remove(t), v[n ? "unshift" : "push"](r), Re(), r;
            },
            remove: function (t, e) {
              ~(e = v.indexOf(t)) && v.splice(e, 1) && a >= e && a--;
            },
            _listeners: v,
          });
        })(),
        Re = function () {
          return !m && Ae.wake();
        },
        Ce = {},
        Pe = /^[\d.\-M][\d.\-,\s]/,
        Le = /["']/g,
        Ue = function (t) {
          for (
            var e,
              n,
              i,
              r = {},
              a = t.substr(1, t.length - 3).split(":"),
              s = a[0],
              o = 1,
              l = a.length;
            o < l;
            o++
          )
            (n = a[o]),
              (e = o !== l - 1 ? n.lastIndexOf(",") : n.length),
              (i = n.substr(0, e)),
              (r[s] = isNaN(i) ? i.replace(Le, "").trim() : +i),
              (s = n.substr(e + 1).trim());
          return r;
        },
        De = function (t) {
          return function (e) {
            return 1 - t(1 - e);
          };
        },
        Ie = function t(e, n) {
          for (var i, r = e._first; r; )
            r instanceof Ge
              ? t(r, n)
              : !r.vars.yoyoEase ||
                (r._yoyo && r._repeat) ||
                r._yoyo === n ||
                (r.timeline
                  ? t(r.timeline, n)
                  : ((i = r._ease),
                    (r._ease = r._yEase),
                    (r._yEase = i),
                    (r._yoyo = n))),
              (r = r._next);
        },
        Ne = function (t, e) {
          return (
            (t &&
              (D(t)
                ? t
                : Ce[t] ||
                  (function (t) {
                    var e,
                      n,
                      i,
                      r,
                      a = (t + "").split("("),
                      s = Ce[a[0]];
                    return s && a.length > 1 && s.config
                      ? s.config.apply(
                          null,
                          ~t.indexOf("{")
                            ? [Ue(a[1])]
                            : ((e = t),
                              (n = e.indexOf("(") + 1),
                              (i = e.indexOf(")")),
                              (r = e.indexOf("(", n)),
                              e.substring(
                                n,
                                ~r && r < i ? e.indexOf(")", i + 1) : i
                              ))
                                .split(",")
                                .map(Et)
                        )
                      : Ce._CE && Pe.test(t)
                      ? Ce._CE("", t)
                      : s;
                  })(t))) ||
            e
          );
        },
        Oe = function (t, e, n, i) {
          void 0 === n &&
            (n = function (t) {
              return 1 - e(1 - t);
            }),
            void 0 === i &&
              (i = function (t) {
                return t < 0.5 ? e(2 * t) / 2 : 1 - e(2 * (1 - t)) / 2;
              });
          var r,
            a = { easeIn: e, easeOut: n, easeInOut: i };
          return (
            gt(t, function (t) {
              for (var e in ((Ce[t] = K[t] = a),
              (Ce[(r = t.toLowerCase())] = n),
              a))
                Ce[
                  r +
                    ("easeIn" === e
                      ? ".in"
                      : "easeOut" === e
                      ? ".out"
                      : ".inOut")
                ] = Ce[t + "." + e] = a[e];
            }),
            a
          );
        },
        Fe = function (t) {
          return function (e) {
            return e < 0.5
              ? (1 - t(1 - 2 * e)) / 2
              : 0.5 + t(2 * (e - 0.5)) / 2;
          };
        },
        Be = function t(e, n, i) {
          var r = n >= 1 ? n : 1,
            a = (i || (e ? 0.3 : 0.45)) / (n < 1 ? n : 1),
            s = (a / w) * (Math.asin(1 / r) || 0),
            o = function (t) {
              return 1 === t
                ? 1
                : r * Math.pow(2, -10 * t) * L((t - s) * a) + 1;
            },
            l =
              "out" === e
                ? o
                : "in" === e
                ? function (t) {
                    return 1 - o(1 - t);
                  }
                : Fe(o);
          return (
            (a = w / a),
            (l.config = function (n, i) {
              return t(e, n, i);
            }),
            l
          );
        },
        ze = function t(e, n) {
          void 0 === n && (n = 1.70158);
          var i = function (t) {
              return t ? --t * t * ((n + 1) * t + n) + 1 : 0;
            },
            r =
              "out" === e
                ? i
                : "in" === e
                ? function (t) {
                    return 1 - i(1 - t);
                  }
                : Fe(i);
          return (
            (r.config = function (n) {
              return t(e, n);
            }),
            r
          );
        };
      gt("Linear,Quad,Cubic,Quart,Quint,Strong", function (t, e) {
        var n = e < 5 ? e + 1 : e;
        Oe(
          t + ",Power" + (n - 1),
          e
            ? function (t) {
                return Math.pow(t, n);
              }
            : function (t) {
                return t;
              },
          function (t) {
            return 1 - Math.pow(1 - t, n);
          },
          function (t) {
            return t < 0.5
              ? Math.pow(2 * t, n) / 2
              : 1 - Math.pow(2 * (1 - t), n) / 2;
          }
        );
      }),
        (Ce.Linear.easeNone = Ce.none = Ce.Linear.easeIn),
        Oe("Elastic", Be("in"), Be("out"), Be()),
        (g = 7.5625),
        (x = 2 * (v = 1 / (_ = 2.75))),
        (y = 2.5 * v),
        Oe(
          "Bounce",
          function (t) {
            return 1 - M(1 - t);
          },
          (M = function (t) {
            return t < v
              ? g * t * t
              : t < x
              ? g * Math.pow(t - 1.5 / _, 2) + 0.75
              : t < y
              ? g * (t -= 2.25 / _) * t + 0.9375
              : g * Math.pow(t - 2.625 / _, 2) + 0.984375;
          })
        ),
        Oe("Expo", function (t) {
          return t ? Math.pow(2, 10 * (t - 1)) : 0;
        }),
        Oe("Circ", function (t) {
          return -(C(1 - t * t) - 1);
        }),
        Oe("Sine", function (t) {
          return 1 === t ? 1 : 1 - P(t * A);
        }),
        Oe("Back", ze("in"), ze("out"), ze()),
        (Ce.SteppedEase =
          Ce.steps =
          K.SteppedEase =
            {
              config: function (t, e) {
                void 0 === t && (t = 1);
                var n = 1 / t,
                  i = t + (e ? 0 : 1),
                  r = e ? 1 : 0;
                return function (t) {
                  return (((i * Jt(0, 0.99999999, t)) | 0) + r) * n;
                };
              },
            }),
        (E.ease = Ce["quad.out"]),
        gt(
          "onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",
          function (t) {
            return (dt += t + "," + t + "Params,");
          }
        );
      var ke = function (t, e) {
          (this.id = R++),
            (t._gsap = this),
            (this.target = t),
            (this.harness = e),
            (this.get = e ? e.get : mt),
            (this.set = e ? e.getSetter : an);
        },
        He = (function () {
          function t(t) {
            (this.vars = t),
              (this._delay = +t.delay || 0),
              (this._repeat = t.repeat === 1 / 0 ? -2 : t.repeat || 0) &&
                ((this._rDelay = t.repeatDelay || 0),
                (this._yoyo = !!t.yoyo || !!t.yoyoEase)),
              (this._ts = 1),
              jt(this, +t.duration, 1, 1),
              (this.data = t.data),
              o && ((this._ctx = o), o.data.push(this)),
              m || Ae.wake();
          }
          var e = t.prototype;
          return (
            (e.delay = function (t) {
              return t || 0 === t
                ? (this.parent &&
                    this.parent.smoothChildTiming &&
                    this.startTime(this._start + t - this._delay),
                  (this._delay = t),
                  this)
                : this._delay;
            }),
            (e.duration = function (t) {
              return arguments.length
                ? this.totalDuration(
                    this._repeat > 0 ? t + (t + this._rDelay) * this._repeat : t
                  )
                : this.totalDuration() && this._dur;
            }),
            (e.totalDuration = function (t) {
              return arguments.length
                ? ((this._dirty = 0),
                  jt(
                    this,
                    this._repeat < 0
                      ? t
                      : (t - this._repeat * this._rDelay) / (this._repeat + 1)
                  ))
                : this._tDur;
            }),
            (e.totalTime = function (t, e) {
              if ((Re(), !arguments.length)) return this._tTime;
              var n = this._dp;
              if (n && n.smoothChildTiming && this._ts) {
                for (
                  kt(this, t), !n._dp || n.parent || Ht(n, this);
                  n && n.parent;

                )
                  n.parent._time !==
                    n._start +
                      (n._ts >= 0
                        ? n._tTime / n._ts
                        : (n.totalDuration() - n._tTime) / -n._ts) &&
                    n.totalTime(n._tTime, !0),
                    (n = n.parent);
                !this.parent &&
                  this._dp.autoRemoveChildren &&
                  ((this._ts > 0 && t < this._tDur) ||
                    (this._ts < 0 && t > 0) ||
                    (!this._tDur && !t)) &&
                  Gt(this._dp, this, this._start - this._delay);
              }
              return (
                (this._tTime !== t ||
                  (!this._dur && !e) ||
                  (this._initted && Math.abs(this._zTime) === T) ||
                  (!t && !this._initted && (this.add || this._ptLookup))) &&
                  (this._ts || (this._pTime = t), St(this, t, e)),
                this
              );
            }),
            (e.time = function (t, e) {
              return arguments.length
                ? this.totalTime(
                    Math.min(this.totalDuration(), t + Ot(this)) %
                      (this._dur + this._rDelay) || (t ? this._dur : 0),
                    e
                  )
                : this._time;
            }),
            (e.totalProgress = function (t, e) {
              return arguments.length
                ? this.totalTime(this.totalDuration() * t, e)
                : this.totalDuration()
                ? Math.min(1, this._tTime / this._tDur)
                : this.rawTime() > 0
                ? 1
                : 0;
            }),
            (e.progress = function (t, e) {
              return arguments.length
                ? this.totalTime(
                    this.duration() *
                      (!this._yoyo || 1 & this.iteration() ? t : 1 - t) +
                      Ot(this),
                    e
                  )
                : this.duration()
                ? Math.min(1, this._time / this._dur)
                : this.rawTime() > 0
                ? 1
                : 0;
            }),
            (e.iteration = function (t, e) {
              var n = this.duration() + this._rDelay;
              return arguments.length
                ? this.totalTime(this._time + (t - 1) * n, e)
                : this._repeat
                ? Ft(this._tTime, n) + 1
                : 1;
            }),
            (e.timeScale = function (t, e) {
              if (!arguments.length) return -1e-8 === this._rts ? 0 : this._rts;
              if (this._rts === t) return this;
              var n =
                this.parent && this._ts
                  ? Bt(this.parent._time, this)
                  : this._tTime;
              return (
                (this._rts = +t || 0),
                (this._ts = this._ps || -1e-8 === t ? 0 : this._rts),
                this.totalTime(
                  Jt(-Math.abs(this._delay), this._tDur, n),
                  !1 !== e
                ),
                zt(this),
                (function (t) {
                  for (var e = t.parent; e && e.parent; )
                    (e._dirty = 1), e.totalDuration(), (e = e.parent);
                  return t;
                })(this)
              );
            }),
            (e.paused = function (t) {
              return arguments.length
                ? (this._ps !== t &&
                    ((this._ps = t),
                    t
                      ? ((this._pTime =
                          this._tTime ||
                          Math.max(-this._delay, this.rawTime())),
                        (this._ts = this._act = 0))
                      : (Re(),
                        (this._ts = this._rts),
                        this.totalTime(
                          this.parent && !this.parent.smoothChildTiming
                            ? this.rawTime()
                            : this._tTime || this._pTime,
                          1 === this.progress() &&
                            Math.abs(this._zTime) !== T &&
                            (this._tTime -= T)
                        ))),
                  this)
                : this._ps;
            }),
            (e.startTime = function (t) {
              if (arguments.length) {
                this._start = t;
                var e = this.parent || this._dp;
                return (
                  e &&
                    (e._sort || !this.parent) &&
                    Gt(e, this, t - this._delay),
                  this
                );
              }
              return this._start;
            }),
            (e.endTime = function (t) {
              return (
                this._start +
                (F(t) ? this.totalDuration() : this.duration()) /
                  Math.abs(this._ts || 1)
              );
            }),
            (e.rawTime = function (t) {
              var e = this.parent || this._dp;
              return e
                ? t &&
                  (!this._ts ||
                    (this._repeat && this._time && this.totalProgress() < 1))
                  ? this._tTime % (this._dur + this._rDelay)
                  : this._ts
                  ? Bt(e.rawTime(t), this)
                  : this._tTime
                : this._tTime;
            }),
            (e.revert = function (t) {
              void 0 === t && (t = rt);
              var e = s;
              return (
                (s = t),
                (this._initted || this._startAt) &&
                  (this.timeline && this.timeline.revert(t),
                  this.totalTime(-0.01, t.suppressEvents)),
                "nested" !== this.data && !1 !== t.kill && this.kill(),
                (s = e),
                this
              );
            }),
            (e.globalTime = function (t) {
              for (var e = this, n = arguments.length ? t : e.rawTime(); e; )
                (n = e._start + n / (Math.abs(e._ts) || 1)), (e = e._dp);
              return !this.parent && this._sat ? this._sat.globalTime(t) : n;
            }),
            (e.repeat = function (t) {
              return arguments.length
                ? ((this._repeat = t === 1 / 0 ? -2 : t), Yt(this))
                : -2 === this._repeat
                ? 1 / 0
                : this._repeat;
            }),
            (e.repeatDelay = function (t) {
              if (arguments.length) {
                var e = this._time;
                return (this._rDelay = t), Yt(this), e ? this.time(e) : this;
              }
              return this._rDelay;
            }),
            (e.yoyo = function (t) {
              return arguments.length ? ((this._yoyo = t), this) : this._yoyo;
            }),
            (e.seek = function (t, e) {
              return this.totalTime(Zt(this, t), F(e));
            }),
            (e.restart = function (t, e) {
              return this.play().totalTime(t ? -this._delay : 0, F(e));
            }),
            (e.play = function (t, e) {
              return null != t && this.seek(t, e), this.reversed(!1).paused(!1);
            }),
            (e.reverse = function (t, e) {
              return (
                null != t && this.seek(t || this.totalDuration(), e),
                this.reversed(!0).paused(!1)
              );
            }),
            (e.pause = function (t, e) {
              return null != t && this.seek(t, e), this.paused(!0);
            }),
            (e.resume = function () {
              return this.paused(!1);
            }),
            (e.reversed = function (t) {
              return arguments.length
                ? (!!t !== this.reversed() &&
                    this.timeScale(-this._rts || (t ? -1e-8 : 0)),
                  this)
                : this._rts < 0;
            }),
            (e.invalidate = function () {
              return (
                (this._initted = this._act = 0), (this._zTime = -1e-8), this
              );
            }),
            (e.isActive = function () {
              var t,
                e = this.parent || this._dp,
                n = this._start;
              return !(
                e &&
                !(
                  this._ts &&
                  this._initted &&
                  e.isActive() &&
                  (t = e.rawTime(!0)) >= n &&
                  t < this.endTime(!0) - T
                )
              );
            }),
            (e.eventCallback = function (t, e, n) {
              var i = this.vars;
              return arguments.length > 1
                ? (e
                    ? ((i[t] = e),
                      n && (i[t + "Params"] = n),
                      "onUpdate" === t && (this._onUpdate = e))
                    : delete i[t],
                  this)
                : i[t];
            }),
            (e.then = function (t) {
              var e = this;
              return new Promise(function (n) {
                var i = D(t) ? t : bt,
                  r = function () {
                    var t = e.then;
                    (e.then = null),
                      D(i) && (i = i(e)) && (i.then || i === e) && (e.then = t),
                      n(i),
                      (e.then = t);
                  };
                (e._initted && 1 === e.totalProgress() && e._ts >= 0) ||
                (!e._tTime && e._ts < 0)
                  ? r()
                  : (e._prom = r);
              });
            }),
            (e.kill = function () {
              me(this);
            }),
            t
          );
        })();
      Tt(He.prototype, {
        _time: 0,
        _start: 0,
        _end: 0,
        _tTime: 0,
        _tDur: 0,
        _dirty: 0,
        _repeat: 0,
        _yoyo: !1,
        parent: null,
        _initted: !1,
        _rDelay: 0,
        _ts: 1,
        _dp: 0,
        ratio: 0,
        _zTime: -1e-8,
        _prom: 0,
        _ps: !1,
        _rts: 1,
      });
      var Ge = (function (t) {
        function e(e, n) {
          var r;
          return (
            void 0 === e && (e = {}),
            ((r = t.call(this, e) || this).labels = {}),
            (r.smoothChildTiming = !!e.smoothChildTiming),
            (r.autoRemoveChildren = !!e.autoRemoveChildren),
            (r._sort = F(e.sortChildren)),
            l && Gt(e.parent || l, i(r), n),
            e.reversed && r.reverse(),
            e.paused && r.paused(!0),
            e.scrollTrigger && Vt(i(r), e.scrollTrigger),
            r
          );
        }
        r(e, t);
        var n = e.prototype;
        return (
          (n.to = function (t, e, n) {
            return $t(0, arguments, this), this;
          }),
          (n.from = function (t, e, n) {
            return $t(1, arguments, this), this;
          }),
          (n.fromTo = function (t, e, n, i) {
            return $t(2, arguments, this), this;
          }),
          (n.set = function (t, e, n) {
            return (
              (e.duration = 0),
              (e.parent = this),
              Ct(e).repeatDelay || (e.repeat = 0),
              (e.immediateRender = !!e.immediateRender),
              new Je(t, e, Zt(this, n), 1),
              this
            );
          }),
          (n.call = function (t, e, n) {
            return Gt(this, Je.delayedCall(0, t, e), n);
          }),
          (n.staggerTo = function (t, e, n, i, r, a, s) {
            return (
              (n.duration = e),
              (n.stagger = n.stagger || i),
              (n.onComplete = a),
              (n.onCompleteParams = s),
              (n.parent = this),
              new Je(t, n, Zt(this, r)),
              this
            );
          }),
          (n.staggerFrom = function (t, e, n, i, r, a, s) {
            return (
              (n.runBackwards = 1),
              (Ct(n).immediateRender = F(n.immediateRender)),
              this.staggerTo(t, e, n, i, r, a, s)
            );
          }),
          (n.staggerFromTo = function (t, e, n, i, r, a, s, o) {
            return (
              (i.startAt = n),
              (Ct(i).immediateRender = F(i.immediateRender)),
              this.staggerTo(t, e, i, r, a, s, o)
            );
          }),
          (n.render = function (t, e, n) {
            var i,
              r,
              a,
              o,
              c,
              u,
              h,
              d,
              p,
              f,
              m,
              g,
              _ = this._time,
              v = this._dirty ? this.totalDuration() : this._tDur,
              x = this._dur,
              y = t <= 0 ? 0 : vt(t),
              M = this._zTime < 0 != t < 0 && (this._initted || !x);
            if (
              (this !== l && y > v && t >= 0 && (y = v),
              y !== this._tTime || n || M)
            ) {
              if (
                (_ !== this._time &&
                  x &&
                  ((y += this._time - _), (t += this._time - _)),
                (i = y),
                (p = this._start),
                (u = !(d = this._ts)),
                M && (x || (_ = this._zTime), (t || !e) && (this._zTime = t)),
                this._repeat)
              ) {
                if (
                  ((m = this._yoyo),
                  (c = x + this._rDelay),
                  this._repeat < -1 && t < 0)
                )
                  return this.totalTime(100 * c + t, e, n);
                if (
                  ((i = vt(y % c)),
                  y === v
                    ? ((o = this._repeat), (i = x))
                    : ((o = ~~(y / c)) && o === y / c && ((i = x), o--),
                      i > x && (i = x)),
                  (f = Ft(this._tTime, c)),
                  !_ &&
                    this._tTime &&
                    f !== o &&
                    this._tTime - f * c - this._dur <= 0 &&
                    (f = o),
                  m && 1 & o && ((i = x - i), (g = 1)),
                  o !== f && !this._lock)
                ) {
                  var S = m && 1 & f,
                    E = S === (m && 1 & o);
                  if (
                    (o < f && (S = !S),
                    (_ = S ? 0 : y % x ? x : y),
                    (this._lock = 1),
                    (this.render(_ || (g ? 0 : vt(o * c)), e, !x)._lock = 0),
                    (this._tTime = y),
                    !e && this.parent && fe(this, "onRepeat"),
                    this.vars.repeatRefresh &&
                      !g &&
                      (this.invalidate()._lock = 1),
                    (_ && _ !== this._time) ||
                      u !== !this._ts ||
                      (this.vars.onRepeat && !this.parent && !this._act))
                  )
                    return this;
                  if (
                    ((x = this._dur),
                    (v = this._tDur),
                    E &&
                      ((this._lock = 2),
                      (_ = S ? x : -1e-4),
                      this.render(_, !0),
                      this.vars.repeatRefresh && !g && this.invalidate()),
                    (this._lock = 0),
                    !this._ts && !u)
                  )
                    return this;
                  Ie(this, g);
                }
              }
              if (
                (this._hasPause &&
                  !this._forcing &&
                  this._lock < 2 &&
                  ((h = (function (t, e, n) {
                    var i;
                    if (n > e)
                      for (i = t._first; i && i._start <= n; ) {
                        if ("isPause" === i.data && i._start > e) return i;
                        i = i._next;
                      }
                    else
                      for (i = t._last; i && i._start >= n; ) {
                        if ("isPause" === i.data && i._start < e) return i;
                        i = i._prev;
                      }
                  })(this, vt(_), vt(i))),
                  h && (y -= i - (i = h._start))),
                (this._tTime = y),
                (this._time = i),
                (this._act = !d),
                this._initted ||
                  ((this._onUpdate = this.vars.onUpdate),
                  (this._initted = 1),
                  (this._zTime = t),
                  (_ = 0)),
                !_ && i && !e && !o && (fe(this, "onStart"), this._tTime !== y))
              )
                return this;
              if (i >= _ && t >= 0)
                for (r = this._first; r; ) {
                  if (
                    ((a = r._next),
                    (r._act || i >= r._start) && r._ts && h !== r)
                  ) {
                    if (r.parent !== this) return this.render(t, e, n);
                    if (
                      (r.render(
                        r._ts > 0
                          ? (i - r._start) * r._ts
                          : (r._dirty ? r.totalDuration() : r._tDur) +
                              (i - r._start) * r._ts,
                        e,
                        n
                      ),
                      i !== this._time || (!this._ts && !u))
                    ) {
                      (h = 0), a && (y += this._zTime = -1e-8);
                      break;
                    }
                  }
                  r = a;
                }
              else {
                r = this._last;
                for (var b = t < 0 ? t : i; r; ) {
                  if (
                    ((a = r._prev), (r._act || b <= r._end) && r._ts && h !== r)
                  ) {
                    if (r.parent !== this) return this.render(t, e, n);
                    if (
                      (r.render(
                        r._ts > 0
                          ? (b - r._start) * r._ts
                          : (r._dirty ? r.totalDuration() : r._tDur) +
                              (b - r._start) * r._ts,
                        e,
                        n || (s && (r._initted || r._startAt))
                      ),
                      i !== this._time || (!this._ts && !u))
                    ) {
                      (h = 0), a && (y += this._zTime = b ? -1e-8 : T);
                      break;
                    }
                  }
                  r = a;
                }
              }
              if (
                h &&
                !e &&
                (this.pause(),
                (h.render(i >= _ ? 0 : -1e-8)._zTime = i >= _ ? 1 : -1),
                this._ts)
              )
                return (this._start = p), zt(this), this.render(t, e, n);
              this._onUpdate && !e && fe(this, "onUpdate", !0),
                ((y === v && this._tTime >= this.totalDuration()) ||
                  (!y && _)) &&
                  ((p !== this._start && Math.abs(d) === Math.abs(this._ts)) ||
                    this._lock ||
                    ((t || !x) &&
                      ((y === v && this._ts > 0) || (!y && this._ts < 0)) &&
                      Ut(this, 1),
                    e ||
                      (t < 0 && !_) ||
                      (!y && !_ && v) ||
                      (fe(
                        this,
                        y === v && t >= 0 ? "onComplete" : "onReverseComplete",
                        !0
                      ),
                      this._prom &&
                        !(y < v && this.timeScale() > 0) &&
                        this._prom())));
            }
            return this;
          }),
          (n.add = function (t, e) {
            var n = this;
            if ((I(e) || (e = Zt(this, e, t)), !(t instanceof He))) {
              if (H(t))
                return (
                  t.forEach(function (t) {
                    return n.add(t, e);
                  }),
                  this
                );
              if (U(t)) return this.addLabel(t, e);
              if (!D(t)) return this;
              t = Je.delayedCall(0, t);
            }
            return this !== t ? Gt(this, t, e) : this;
          }),
          (n.getChildren = function (t, e, n, i) {
            void 0 === t && (t = !0),
              void 0 === e && (e = !0),
              void 0 === n && (n = !0),
              void 0 === i && (i = -b);
            for (var r = [], a = this._first; a; )
              a._start >= i &&
                (a instanceof Je
                  ? e && r.push(a)
                  : (n && r.push(a),
                    t && r.push.apply(r, a.getChildren(!0, e, n)))),
                (a = a._next);
            return r;
          }),
          (n.getById = function (t) {
            for (var e = this.getChildren(1, 1, 1), n = e.length; n--; )
              if (e[n].vars.id === t) return e[n];
          }),
          (n.remove = function (t) {
            return U(t)
              ? this.removeLabel(t)
              : D(t)
              ? this.killTweensOf(t)
              : (Lt(this, t),
                t === this._recent && (this._recent = this._last),
                Dt(this));
          }),
          (n.totalTime = function (e, n) {
            return arguments.length
              ? ((this._forcing = 1),
                !this._dp &&
                  this._ts &&
                  (this._start = vt(
                    Ae.time -
                      (this._ts > 0
                        ? e / this._ts
                        : (this.totalDuration() - e) / -this._ts)
                  )),
                t.prototype.totalTime.call(this, e, n),
                (this._forcing = 0),
                this)
              : this._tTime;
          }),
          (n.addLabel = function (t, e) {
            return (this.labels[t] = Zt(this, e)), this;
          }),
          (n.removeLabel = function (t) {
            return delete this.labels[t], this;
          }),
          (n.addPause = function (t, e, n) {
            var i = Je.delayedCall(0, e || et, n);
            return (
              (i.data = "isPause"),
              (this._hasPause = 1),
              Gt(this, i, Zt(this, t))
            );
          }),
          (n.removePause = function (t) {
            var e = this._first;
            for (t = Zt(this, t); e; )
              e._start === t && "isPause" === e.data && Ut(e), (e = e._next);
          }),
          (n.killTweensOf = function (t, e, n) {
            for (var i = this.getTweensOf(t, n), r = i.length; r--; )
              Ve !== i[r] && i[r].kill(t, e);
            return this;
          }),
          (n.getTweensOf = function (t, e) {
            for (var n, i = [], r = ie(t), a = this._first, s = I(e); a; )
              a instanceof Je
                ? yt(a._targets, r) &&
                  (s
                    ? (!Ve || (a._initted && a._ts)) &&
                      a.globalTime(0) <= e &&
                      a.globalTime(a.totalDuration()) > e
                    : !e || a.isActive()) &&
                  i.push(a)
                : (n = a.getTweensOf(r, e)).length && i.push.apply(i, n),
                (a = a._next);
            return i;
          }),
          (n.tweenTo = function (t, e) {
            e = e || {};
            var n,
              i = this,
              r = Zt(i, t),
              a = e,
              s = a.startAt,
              o = a.onStart,
              l = a.onStartParams,
              c = a.immediateRender,
              u = Je.to(
                i,
                Tt(
                  {
                    ease: e.ease || "none",
                    lazy: !1,
                    immediateRender: !1,
                    time: r,
                    overwrite: "auto",
                    duration:
                      e.duration ||
                      Math.abs(
                        (r - (s && "time" in s ? s.time : i._time)) /
                          i.timeScale()
                      ) ||
                      T,
                    onStart: function () {
                      if ((i.pause(), !n)) {
                        var t =
                          e.duration ||
                          Math.abs(
                            (r - (s && "time" in s ? s.time : i._time)) /
                              i.timeScale()
                          );
                        u._dur !== t && jt(u, t, 0, 1).render(u._time, !0, !0),
                          (n = 1);
                      }
                      o && o.apply(u, l || []);
                    },
                  },
                  e
                )
              );
            return c ? u.render(0) : u;
          }),
          (n.tweenFromTo = function (t, e, n) {
            return this.tweenTo(e, Tt({ startAt: { time: Zt(this, t) } }, n));
          }),
          (n.recent = function () {
            return this._recent;
          }),
          (n.nextLabel = function (t) {
            return void 0 === t && (t = this._time), pe(this, Zt(this, t));
          }),
          (n.previousLabel = function (t) {
            return void 0 === t && (t = this._time), pe(this, Zt(this, t), 1);
          }),
          (n.currentLabel = function (t) {
            return arguments.length
              ? this.seek(t, !0)
              : this.previousLabel(this._time + T);
          }),
          (n.shiftChildren = function (t, e, n) {
            void 0 === n && (n = 0);
            for (var i, r = this._first, a = this.labels; r; )
              r._start >= n && ((r._start += t), (r._end += t)), (r = r._next);
            if (e) for (i in a) a[i] >= n && (a[i] += t);
            return Dt(this);
          }),
          (n.invalidate = function (e) {
            var n = this._first;
            for (this._lock = 0; n; ) n.invalidate(e), (n = n._next);
            return t.prototype.invalidate.call(this, e);
          }),
          (n.clear = function (t) {
            void 0 === t && (t = !0);
            for (var e, n = this._first; n; )
              (e = n._next), this.remove(n), (n = e);
            return (
              this._dp && (this._time = this._tTime = this._pTime = 0),
              t && (this.labels = {}),
              Dt(this)
            );
          }),
          (n.totalDuration = function (t) {
            var e,
              n,
              i,
              r = 0,
              a = this,
              s = a._last,
              o = b;
            if (arguments.length)
              return a.timeScale(
                (a._repeat < 0 ? a.duration() : a.totalDuration()) /
                  (a.reversed() ? -t : t)
              );
            if (a._dirty) {
              for (i = a.parent; s; )
                (e = s._prev),
                  s._dirty && s.totalDuration(),
                  (n = s._start) > o && a._sort && s._ts && !a._lock
                    ? ((a._lock = 1), (Gt(a, s, n - s._delay, 1)._lock = 0))
                    : (o = n),
                  n < 0 &&
                    s._ts &&
                    ((r -= n),
                    ((!i && !a._dp) || (i && i.smoothChildTiming)) &&
                      ((a._start += n / a._ts),
                      (a._time -= n),
                      (a._tTime -= n)),
                    a.shiftChildren(-n, !1, -Infinity),
                    (o = 0)),
                  s._end > r && s._ts && (r = s._end),
                  (s = e);
              jt(a, a === l && a._time > r ? a._time : r, 1, 1), (a._dirty = 0);
            }
            return a._tDur;
          }),
          (e.updateRoot = function (t) {
            if ((l._ts && (St(l, Bt(t, l)), (p = Ae.frame)), Ae.frame >= ut)) {
              ut += S.autoSleep || 120;
              var e = l._first;
              if ((!e || !e._ts) && S.autoSleep && Ae._listeners.length < 2) {
                for (; e && !e._ts; ) e = e._next;
                e || Ae.sleep();
              }
            }
          }),
          e
        );
      })(He);
      Tt(Ge.prototype, { _lock: 0, _hasPause: 0, _forcing: 0 });
      var Ve,
        We,
        Xe = function (t, e, n, i, r, a, s) {
          var o,
            l,
            c,
            u,
            h,
            d,
            p,
            f,
            m = new fn(this._pt, t, e, 0, 1, ln, null, r),
            g = 0,
            _ = 0;
          for (
            m.b = n,
              m.e = i,
              n += "",
              (p = ~(i += "").indexOf("random(")) && (i = he(i)),
              a && (a((f = [n, i]), t, e), (n = f[0]), (i = f[1])),
              l = n.match(X) || [];
            (o = X.exec(i));

          )
            (u = o[0]),
              (h = i.substring(g, o.index)),
              c ? (c = (c + 1) % 5) : "rgba(" === h.substr(-5) && (c = 1),
              u !== l[_++] &&
                ((d = parseFloat(l[_ - 1]) || 0),
                (m._pt = {
                  _next: m._pt,
                  p: h || 1 === _ ? h : ",",
                  s: d,
                  c: "=" === u.charAt(1) ? xt(d, u) - d : parseFloat(u) - d,
                  m: c && c < 4 ? Math.round : 0,
                }),
                (g = X.lastIndex));
          return (
            (m.c = g < i.length ? i.substring(g, i.length) : ""),
            (m.fp = s),
            (q.test(i) || p) && (m.e = 0),
            (this._pt = m),
            m
          );
        },
        qe = function (t, e, n, i, r, a, s, o, l, c) {
          D(i) && (i = i(r || 0, t, a));
          var u,
            h = t[e],
            d =
              "get" !== n
                ? n
                : D(h)
                ? l
                  ? t[
                      e.indexOf("set") || !D(t["get" + e.substr(3)])
                        ? e
                        : "get" + e.substr(3)
                    ](l)
                  : t[e]()
                : h,
            p = D(h) ? (l ? nn : en) : tn;
          if (
            (U(i) &&
              (~i.indexOf("random(") && (i = he(i)),
              "=" === i.charAt(1) &&
                ((u = xt(d, i) + (te(d) || 0)) || 0 === u) &&
                (i = u)),
            !c || d !== i || We)
          )
            return isNaN(d * i) || "" === i
              ? (!h && !(e in t) && Q(e, i),
                Xe.call(this, t, e, d, i, p, o || S.stringFilter, l))
              : ((u = new fn(
                  this._pt,
                  t,
                  e,
                  +d || 0,
                  i - (d || 0),
                  "boolean" == typeof h ? on : sn,
                  0,
                  p
                )),
                l && (u.fp = l),
                s && u.modifier(s, this, t),
                (this._pt = u));
        },
        je = function (t, e, n, i, r, a) {
          var s, o, l, c;
          if (
            lt[t] &&
            !1 !==
              (s = new lt[t]()).init(
                r,
                s.rawVars
                  ? e[t]
                  : (function (t, e, n, i, r) {
                      if (
                        (D(t) && (t = Ze(t, r, e, n, i)),
                        !O(t) || (t.style && t.nodeType) || H(t) || k(t))
                      )
                        return U(t) ? Ze(t, r, e, n, i) : t;
                      var a,
                        s = {};
                      for (a in t) s[a] = Ze(t[a], r, e, n, i);
                      return s;
                    })(e[t], i, r, a, n),
                n,
                i,
                a
              ) &&
            ((n._pt = o =
              new fn(n._pt, r, t, 0, 1, s.render, s, 0, s.priority)),
            n !== f)
          )
            for (
              l = n._ptLookup[n._targets.indexOf(r)], c = s._props.length;
              c--;

            )
              l[s._props[c]] = o;
          return s;
        },
        Ye = function t(e, n, i) {
          var r,
            o,
            c,
            u,
            h,
            d,
            p,
            f,
            m,
            g,
            _,
            v,
            x,
            y = e.vars,
            M = y.ease,
            S = y.startAt,
            w = y.immediateRender,
            A = y.lazy,
            R = y.onUpdate,
            C = y.runBackwards,
            P = y.yoyoEase,
            L = y.keyframes,
            U = y.autoRevert,
            D = e._dur,
            I = e._startAt,
            N = e._targets,
            O = e.parent,
            B = O && "nested" === O.data ? O.vars.targets : N,
            z = "auto" === e._overwrite && !a,
            k = e.timeline;
          if (
            (k && (!L || !M) && (M = "none"),
            (e._ease = Ne(M, E.ease)),
            (e._yEase = P ? De(Ne(!0 === P ? M : P, E.ease)) : 0),
            P &&
              e._yoyo &&
              !e._repeat &&
              ((P = e._yEase), (e._yEase = e._ease), (e._ease = P)),
            (e._from = !k && !!y.runBackwards),
            !k || (L && !y.stagger))
          ) {
            if (
              ((v = (f = N[0] ? ft(N[0]).harness : 0) && y[f.prop]),
              (r = Rt(y, at)),
              I &&
                (I._zTime < 0 && I.progress(1),
                n < 0 && C && w && !U
                  ? I.render(-1, !0)
                  : I.revert(C && D ? it : nt),
                (I._lazy = 0)),
              S)
            ) {
              if (
                (Ut(
                  (e._startAt = Je.set(
                    N,
                    Tt(
                      {
                        data: "isStart",
                        overwrite: !1,
                        parent: O,
                        immediateRender: !0,
                        lazy: !I && F(A),
                        startAt: null,
                        delay: 0,
                        onUpdate:
                          R &&
                          function () {
                            return fe(e, "onUpdate");
                          },
                        stagger: 0,
                      },
                      S
                    )
                  ))
                ),
                (e._startAt._dp = 0),
                (e._startAt._sat = e),
                n < 0 && (s || (!w && !U)) && e._startAt.revert(it),
                w && D && n <= 0 && i <= 0)
              )
                return void (n && (e._zTime = n));
            } else if (C && D && !I)
              if (
                (n && (w = !1),
                (c = Tt(
                  {
                    overwrite: !1,
                    data: "isFromStart",
                    lazy: w && !I && F(A),
                    immediateRender: w,
                    stagger: 0,
                    parent: O,
                  },
                  r
                )),
                v && (c[f.prop] = v),
                Ut((e._startAt = Je.set(N, c))),
                (e._startAt._dp = 0),
                (e._startAt._sat = e),
                n < 0 &&
                  (s ? e._startAt.revert(it) : e._startAt.render(-1, !0)),
                (e._zTime = n),
                w)
              ) {
                if (!n) return;
              } else t(e._startAt, T, T);
            for (
              e._pt = e._ptCache = 0, A = (D && F(A)) || (A && !D), o = 0;
              o < N.length;
              o++
            ) {
              if (
                ((p = (h = N[o])._gsap || pt(N)[o]._gsap),
                (e._ptLookup[o] = g = {}),
                ot[p.id] && st.length && Mt(),
                (_ = B === N ? o : B.indexOf(h)),
                f &&
                  !1 !== (m = new f()).init(h, v || r, e, _, B) &&
                  ((e._pt = u =
                    new fn(e._pt, h, m.name, 0, 1, m.render, m, 0, m.priority)),
                  m._props.forEach(function (t) {
                    g[t] = u;
                  }),
                  m.priority && (d = 1)),
                !f || v)
              )
                for (c in r)
                  lt[c] && (m = je(c, r, e, _, h, B))
                    ? m.priority && (d = 1)
                    : (g[c] = u =
                        qe.call(e, h, c, "get", r[c], _, B, 0, y.stringFilter));
              e._op && e._op[o] && e.kill(h, e._op[o]),
                z &&
                  e._pt &&
                  ((Ve = e),
                  l.killTweensOf(h, g, e.globalTime(n)),
                  (x = !e.parent),
                  (Ve = 0)),
                e._pt && A && (ot[p.id] = 1);
            }
            d && pn(e), e._onInit && e._onInit(e);
          }
          (e._onUpdate = R),
            (e._initted = (!e._op || e._pt) && !x),
            L && n <= 0 && k.render(b, !0, !0);
        },
        Ke = function (t, e, n, i) {
          var r,
            a,
            s = e.ease || i || "power1.inOut";
          if (H(e))
            (a = n[t] || (n[t] = [])),
              e.forEach(function (t, n) {
                return a.push({ t: (n / (e.length - 1)) * 100, v: t, e: s });
              });
          else
            for (r in e)
              (a = n[r] || (n[r] = [])),
                "ease" === r || a.push({ t: parseFloat(t), v: e[r], e: s });
        },
        Ze = function (t, e, n, i, r) {
          return D(t)
            ? t.call(e, n, i, r)
            : U(t) && ~t.indexOf("random(")
            ? he(t)
            : t;
        },
        $e = dt + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
        Qe = {};
      gt($e + ",id,stagger,delay,duration,paused,scrollTrigger", function (t) {
        return (Qe[t] = 1);
      });
      var Je = (function (t) {
        function e(e, n, r, s) {
          var o;
          "number" == typeof n && ((r.duration = n), (n = r), (r = null));
          var c,
            u,
            h,
            d,
            p,
            f,
            m,
            g,
            _ = (o = t.call(this, s ? n : Ct(n)) || this).vars,
            v = _.duration,
            x = _.delay,
            y = _.immediateRender,
            M = _.stagger,
            E = _.overwrite,
            b = _.keyframes,
            T = _.defaults,
            w = _.scrollTrigger,
            A = _.yoyoEase,
            R = n.parent || l,
            C = (H(e) || k(e) ? I(e[0]) : "length" in n) ? [e] : ie(e);
          if (
            ((o._targets = C.length
              ? pt(C)
              : J(
                  "GSAP target " + e + " not found. https://gsap.com",
                  !S.nullTargetWarn
                ) || []),
            (o._ptLookup = []),
            (o._overwrite = E),
            b || M || z(v) || z(x))
          ) {
            if (
              ((n = o.vars),
              (c = o.timeline =
                new Ge({
                  data: "nested",
                  defaults: T || {},
                  targets: R && "nested" === R.data ? R.vars.targets : C,
                })).kill(),
              (c.parent = c._dp = i(o)),
              (c._start = 0),
              M || z(v) || z(x))
            ) {
              if (((d = C.length), (m = M && se(M)), O(M)))
                for (p in M) ~$e.indexOf(p) && (g || (g = {}), (g[p] = M[p]));
              for (u = 0; u < d; u++)
                ((h = Rt(n, Qe)).stagger = 0),
                  A && (h.yoyoEase = A),
                  g && wt(h, g),
                  (f = C[u]),
                  (h.duration = +Ze(v, i(o), u, f, C)),
                  (h.delay = (+Ze(x, i(o), u, f, C) || 0) - o._delay),
                  !M &&
                    1 === d &&
                    h.delay &&
                    ((o._delay = x = h.delay), (o._start += x), (h.delay = 0)),
                  c.to(f, h, m ? m(u, f, C) : 0),
                  (c._ease = Ce.none);
              c.duration() ? (v = x = 0) : (o.timeline = 0);
            } else if (b) {
              Ct(Tt(c.vars.defaults, { ease: "none" })),
                (c._ease = Ne(b.ease || n.ease || "none"));
              var P,
                L,
                U,
                D = 0;
              if (H(b))
                b.forEach(function (t) {
                  return c.to(C, t, ">");
                }),
                  c.duration();
              else {
                for (p in ((h = {}), b))
                  "ease" === p ||
                    "easeEach" === p ||
                    Ke(p, b[p], h, b.easeEach);
                for (p in h)
                  for (
                    P = h[p].sort(function (t, e) {
                      return t.t - e.t;
                    }),
                      D = 0,
                      u = 0;
                    u < P.length;
                    u++
                  )
                    ((U = {
                      ease: (L = P[u]).e,
                      duration: ((L.t - (u ? P[u - 1].t : 0)) / 100) * v,
                    })[p] = L.v),
                      c.to(C, U, D),
                      (D += U.duration);
                c.duration() < v && c.to({}, { duration: v - c.duration() });
              }
            }
            v || o.duration((v = c.duration()));
          } else o.timeline = 0;
          return (
            !0 !== E || a || ((Ve = i(o)), l.killTweensOf(C), (Ve = 0)),
            Gt(R, i(o), r),
            n.reversed && o.reverse(),
            n.paused && o.paused(!0),
            (y ||
              (!v &&
                !b &&
                o._start === vt(R._time) &&
                F(y) &&
                Nt(i(o)) &&
                "nested" !== R.data)) &&
              ((o._tTime = -1e-8), o.render(Math.max(0, -x) || 0)),
            w && Vt(i(o), w),
            o
          );
        }
        r(e, t);
        var n = e.prototype;
        return (
          (n.render = function (t, e, n) {
            var i,
              r,
              a,
              o,
              l,
              c,
              u,
              h,
              d,
              p = this._time,
              f = this._tDur,
              m = this._dur,
              g = t < 0,
              _ = t > f - T && !g ? f : t < T ? 0 : t;
            if (m) {
              if (
                _ !== this._tTime ||
                !t ||
                n ||
                (!this._initted && this._tTime) ||
                (this._startAt && this._zTime < 0 !== g)
              ) {
                if (((i = _), (h = this.timeline), this._repeat)) {
                  if (((o = m + this._rDelay), this._repeat < -1 && g))
                    return this.totalTime(100 * o + t, e, n);
                  if (
                    ((i = vt(_ % o)),
                    _ === f
                      ? ((a = this._repeat), (i = m))
                      : ((a = ~~(_ / o)) && a === vt(_ / o) && ((i = m), a--),
                        i > m && (i = m)),
                    (c = this._yoyo && 1 & a) &&
                      ((d = this._yEase), (i = m - i)),
                    (l = Ft(this._tTime, o)),
                    i === p && !n && this._initted && a === l)
                  )
                    return (this._tTime = _), this;
                  a !== l &&
                    (h && this._yEase && Ie(h, c),
                    this.vars.repeatRefresh &&
                      !c &&
                      !this._lock &&
                      this._time !== o &&
                      this._initted &&
                      ((this._lock = n = 1),
                      (this.render(vt(o * a), !0).invalidate()._lock = 0)));
                }
                if (!this._initted) {
                  if (Wt(this, g ? t : i, n, e, _))
                    return (this._tTime = 0), this;
                  if (
                    !(
                      p === this._time ||
                      (n && this.vars.repeatRefresh && a !== l)
                    )
                  )
                    return this;
                  if (m !== this._dur) return this.render(t, e, n);
                }
                if (
                  ((this._tTime = _),
                  (this._time = i),
                  !this._act && this._ts && ((this._act = 1), (this._lazy = 0)),
                  (this.ratio = u = (d || this._ease)(i / m)),
                  this._from && (this.ratio = u = 1 - u),
                  i &&
                    !p &&
                    !e &&
                    !a &&
                    (fe(this, "onStart"), this._tTime !== _))
                )
                  return this;
                for (r = this._pt; r; ) r.r(u, r.d), (r = r._next);
                (h &&
                  h.render(
                    t < 0 ? t : h._dur * h._ease(i / this._dur),
                    e,
                    n
                  )) ||
                  (this._startAt && (this._zTime = t)),
                  this._onUpdate &&
                    !e &&
                    (g && It(this, t, 0, n), fe(this, "onUpdate")),
                  this._repeat &&
                    a !== l &&
                    this.vars.onRepeat &&
                    !e &&
                    this.parent &&
                    fe(this, "onRepeat"),
                  (_ !== this._tDur && _) ||
                    this._tTime !== _ ||
                    (g && !this._onUpdate && It(this, t, 0, !0),
                    (t || !m) &&
                      ((_ === this._tDur && this._ts > 0) ||
                        (!_ && this._ts < 0)) &&
                      Ut(this, 1),
                    e ||
                      (g && !p) ||
                      !(_ || p || c) ||
                      (fe(
                        this,
                        _ === f ? "onComplete" : "onReverseComplete",
                        !0
                      ),
                      this._prom &&
                        !(_ < f && this.timeScale() > 0) &&
                        this._prom()));
              }
            } else
              !(function (t, e, n, i) {
                var r,
                  a,
                  o,
                  l = t.ratio,
                  c =
                    e < 0 ||
                    (!e &&
                      ((!t._start && Xt(t) && (t._initted || !qt(t))) ||
                        ((t._ts < 0 || t._dp._ts < 0) && !qt(t))))
                      ? 0
                      : 1,
                  u = t._rDelay,
                  h = 0;
                if (
                  (u &&
                    t._repeat &&
                    ((h = Jt(0, t._tDur, e)),
                    (a = Ft(h, u)),
                    t._yoyo && 1 & a && (c = 1 - c),
                    a !== Ft(t._tTime, u) &&
                      ((l = 1 - c),
                      t.vars.repeatRefresh && t._initted && t.invalidate())),
                  c !== l || s || i || t._zTime === T || (!e && t._zTime))
                ) {
                  if (!t._initted && Wt(t, e, i, n, h)) return;
                  for (
                    o = t._zTime,
                      t._zTime = e || (n ? T : 0),
                      n || (n = e && !o),
                      t.ratio = c,
                      t._from && (c = 1 - c),
                      t._time = 0,
                      t._tTime = h,
                      r = t._pt;
                    r;

                  )
                    r.r(c, r.d), (r = r._next);
                  e < 0 && It(t, e, 0, !0),
                    t._onUpdate && !n && fe(t, "onUpdate"),
                    h && t._repeat && !n && t.parent && fe(t, "onRepeat"),
                    (e >= t._tDur || e < 0) &&
                      t.ratio === c &&
                      (c && Ut(t, 1),
                      n ||
                        s ||
                        (fe(t, c ? "onComplete" : "onReverseComplete", !0),
                        t._prom && t._prom()));
                } else t._zTime || (t._zTime = e);
              })(this, t, e, n);
            return this;
          }),
          (n.targets = function () {
            return this._targets;
          }),
          (n.invalidate = function (e) {
            return (
              (!e || !this.vars.runBackwards) && (this._startAt = 0),
              (this._pt =
                this._op =
                this._onUpdate =
                this._lazy =
                this.ratio =
                  0),
              (this._ptLookup = []),
              this.timeline && this.timeline.invalidate(e),
              t.prototype.invalidate.call(this, e)
            );
          }),
          (n.resetTo = function (t, e, n, i, r) {
            m || Ae.wake(), this._ts || this.play();
            var a = Math.min(
              this._dur,
              (this._dp._time - this._start) * this._ts
            );
            return (
              this._initted || Ye(this, a),
              (function (t, e, n, i, r, a, s, o) {
                var l,
                  c,
                  u,
                  h,
                  d = ((t._pt && t._ptCache) || (t._ptCache = {}))[e];
                if (!d)
                  for (
                    d = t._ptCache[e] = [],
                      u = t._ptLookup,
                      h = t._targets.length;
                    h--;

                  ) {
                    if ((l = u[h][e]) && l.d && l.d._pt)
                      for (l = l.d._pt; l && l.p !== e && l.fp !== e; )
                        l = l._next;
                    if (!l)
                      return (
                        (We = 1),
                        (t.vars[e] = "+=0"),
                        Ye(t, s),
                        (We = 0),
                        o ? J(e + " not eligible for reset") : 1
                      );
                    d.push(l);
                  }
                for (h = d.length; h--; )
                  ((l = (c = d[h])._pt || c).s =
                    (!i && 0 !== i) || r ? l.s + (i || 0) + a * l.c : i),
                    (l.c = n - l.s),
                    c.e && (c.e = _t(n) + te(c.e)),
                    c.b && (c.b = l.s + te(c.b));
              })(this, t, e, n, i, this._ease(a / this._dur), a, r)
                ? this.resetTo(t, e, n, i, 1)
                : (kt(this, 0),
                  this.parent ||
                    Pt(
                      this._dp,
                      this,
                      "_first",
                      "_last",
                      this._dp._sort ? "_start" : 0
                    ),
                  this.render(0))
            );
          }),
          (n.kill = function (t, e) {
            if ((void 0 === e && (e = "all"), !(t || (e && "all" !== e))))
              return (this._lazy = this._pt = 0), this.parent ? me(this) : this;
            if (this.timeline) {
              var n = this.timeline.totalDuration();
              return (
                this.timeline.killTweensOf(t, e, Ve && !0 !== Ve.vars.overwrite)
                  ._first || me(this),
                this.parent &&
                  n !== this.timeline.totalDuration() &&
                  jt(this, (this._dur * this.timeline._tDur) / n, 0, 1),
                this
              );
            }
            var i,
              r,
              a,
              s,
              o,
              l,
              c,
              u = this._targets,
              h = t ? ie(t) : u,
              d = this._ptLookup,
              p = this._pt;
            if (
              (!e || "all" === e) &&
              (function (t, e) {
                for (
                  var n = t.length, i = n === e.length;
                  i && n-- && t[n] === e[n];

                );
                return n < 0;
              })(u, h)
            )
              return "all" === e && (this._pt = 0), me(this);
            for (
              i = this._op = this._op || [],
                "all" !== e &&
                  (U(e) &&
                    ((o = {}),
                    gt(e, function (t) {
                      return (o[t] = 1);
                    }),
                    (e = o)),
                  (e = (function (t, e) {
                    var n,
                      i,
                      r,
                      a,
                      s = t[0] ? ft(t[0]).harness : 0,
                      o = s && s.aliases;
                    if (!o) return e;
                    for (i in ((n = wt({}, e)), o))
                      if ((i in n))
                        for (r = (a = o[i].split(",")).length; r--; )
                          n[a[r]] = n[i];
                    return n;
                  })(u, e))),
                c = u.length;
              c--;

            )
              if (~h.indexOf(u[c]))
                for (o in ((r = d[c]),
                "all" === e
                  ? ((i[c] = e), (s = r), (a = {}))
                  : ((a = i[c] = i[c] || {}), (s = e)),
                s))
                  (l = r && r[o]) &&
                    (("kill" in l.d && !0 !== l.d.kill(o)) ||
                      Lt(this, l, "_pt"),
                    delete r[o]),
                    "all" !== a && (a[o] = 1);
            return this._initted && !this._pt && p && me(this), this;
          }),
          (e.to = function (t, n) {
            return new e(t, n, arguments[2]);
          }),
          (e.from = function (t, e) {
            return $t(1, arguments);
          }),
          (e.delayedCall = function (t, n, i, r) {
            return new e(n, 0, {
              immediateRender: !1,
              lazy: !1,
              overwrite: !1,
              delay: t,
              onComplete: n,
              onReverseComplete: n,
              onCompleteParams: i,
              onReverseCompleteParams: i,
              callbackScope: r,
            });
          }),
          (e.fromTo = function (t, e, n) {
            return $t(2, arguments);
          }),
          (e.set = function (t, n) {
            return (
              (n.duration = 0), n.repeatDelay || (n.repeat = 0), new e(t, n)
            );
          }),
          (e.killTweensOf = function (t, e, n) {
            return l.killTweensOf(t, e, n);
          }),
          e
        );
      })(He);
      Tt(Je.prototype, {
        _targets: [],
        _lazy: 0,
        _startAt: 0,
        _op: 0,
        _onInit: 0,
      }),
        gt("staggerTo,staggerFrom,staggerFromTo", function (t) {
          Je[t] = function () {
            var e = new Ge(),
              n = ee.call(arguments, 0);
            return (
              n.splice("staggerFromTo" === t ? 5 : 4, 0, 0), e[t].apply(e, n)
            );
          };
        });
      var tn = function (t, e, n) {
          return (t[e] = n);
        },
        en = function (t, e, n) {
          return t[e](n);
        },
        nn = function (t, e, n, i) {
          return t[e](i.fp, n);
        },
        rn = function (t, e, n) {
          return t.setAttribute(e, n);
        },
        an = function (t, e) {
          return D(t[e]) ? en : N(t[e]) && t.setAttribute ? rn : tn;
        },
        sn = function (t, e) {
          return e.set(e.t, e.p, Math.round(1e6 * (e.s + e.c * t)) / 1e6, e);
        },
        on = function (t, e) {
          return e.set(e.t, e.p, !!(e.s + e.c * t), e);
        },
        ln = function (t, e) {
          var n = e._pt,
            i = "";
          if (!t && e.b) i = e.b;
          else if (1 === t && e.e) i = e.e;
          else {
            for (; n; )
              (i =
                n.p +
                (n.m
                  ? n.m(n.s + n.c * t)
                  : Math.round(1e4 * (n.s + n.c * t)) / 1e4) +
                i),
                (n = n._next);
            i += e.c;
          }
          e.set(e.t, e.p, i, e);
        },
        cn = function (t, e) {
          for (var n = e._pt; n; ) n.r(t, n.d), (n = n._next);
        },
        un = function (t, e, n, i) {
          for (var r, a = this._pt; a; )
            (r = a._next), a.p === i && a.modifier(t, e, n), (a = r);
        },
        hn = function (t) {
          for (var e, n, i = this._pt; i; )
            (n = i._next),
              (i.p === t && !i.op) || i.op === t
                ? Lt(this, i, "_pt")
                : i.dep || (e = 1),
              (i = n);
          return !e;
        },
        dn = function (t, e, n, i) {
          i.mSet(t, e, i.m.call(i.tween, n, i.mt), i);
        },
        pn = function (t) {
          for (var e, n, i, r, a = t._pt; a; ) {
            for (e = a._next, n = i; n && n.pr > a.pr; ) n = n._next;
            (a._prev = n ? n._prev : r) ? (a._prev._next = a) : (i = a),
              (a._next = n) ? (n._prev = a) : (r = a),
              (a = e);
          }
          t._pt = i;
        },
        fn = (function () {
          function t(t, e, n, i, r, a, s, o, l) {
            (this.t = e),
              (this.s = i),
              (this.c = r),
              (this.p = n),
              (this.r = a || sn),
              (this.d = s || this),
              (this.set = o || tn),
              (this.pr = l || 0),
              (this._next = t),
              t && (t._prev = this);
          }
          return (
            (t.prototype.modifier = function (t, e, n) {
              (this.mSet = this.mSet || this.set),
                (this.set = dn),
                (this.m = t),
                (this.mt = n),
                (this.tween = e);
            }),
            t
          );
        })();
      gt(
        dt +
          "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",
        function (t) {
          return (at[t] = 1);
        }
      ),
        (K.TweenMax = K.TweenLite = Je),
        (K.TimelineLite = K.TimelineMax = Ge),
        (l = new Ge({
          sortChildren: !1,
          defaults: E,
          autoRemoveChildren: !0,
          id: "root",
          smoothChildTiming: !0,
        })),
        (S.stringFilter = we);
      var mn = [],
        gn = {},
        _n = [],
        vn = 0,
        xn = 0,
        yn = function (t) {
          return (gn[t] || _n).map(function (t) {
            return t();
          });
        },
        Mn = function () {
          var t = Date.now(),
            e = [];
          t - vn > 2 &&
            (yn("matchMediaInit"),
            mn.forEach(function (t) {
              var n,
                i,
                r,
                a,
                s = t.queries,
                o = t.conditions;
              for (i in s)
                (n = c.matchMedia(s[i]).matches) && (r = 1),
                  n !== o[i] && ((o[i] = n), (a = 1));
              a && (t.revert(), r && e.push(t));
            }),
            yn("matchMediaRevert"),
            e.forEach(function (t) {
              return t.onMatch(t, function (e) {
                return t.add(null, e);
              });
            }),
            (vn = t),
            yn("matchMedia"));
        },
        Sn = (function () {
          function t(t, e) {
            (this.selector = e && re(e)),
              (this.data = []),
              (this._r = []),
              (this.isReverted = !1),
              (this.id = xn++),
              t && this.add(t);
          }
          var e = t.prototype;
          return (
            (e.add = function (t, e, n) {
              D(t) && ((n = e), (e = t), (t = D));
              var i = this,
                r = function () {
                  var t,
                    r = o,
                    a = i.selector;
                  return (
                    r && r !== i && r.data.push(i),
                    n && (i.selector = re(n)),
                    (o = i),
                    (t = e.apply(i, arguments)),
                    D(t) && i._r.push(t),
                    (o = r),
                    (i.selector = a),
                    (i.isReverted = !1),
                    t
                  );
                };
              return (
                (i.last = r),
                t === D
                  ? r(i, function (t) {
                      return i.add(null, t);
                    })
                  : t
                  ? (i[t] = r)
                  : r
              );
            }),
            (e.ignore = function (t) {
              var e = o;
              (o = null), t(this), (o = e);
            }),
            (e.getTweens = function () {
              var e = [];
              return (
                this.data.forEach(function (n) {
                  return n instanceof t
                    ? e.push.apply(e, n.getTweens())
                    : n instanceof Je &&
                        !(n.parent && "nested" === n.parent.data) &&
                        e.push(n);
                }),
                e
              );
            }),
            (e.clear = function () {
              this._r.length = this.data.length = 0;
            }),
            (e.kill = function (t, e) {
              var n = this;
              if (
                (t
                  ? (function () {
                      for (var e, i = n.getTweens(), r = n.data.length; r--; )
                        "isFlip" === (e = n.data[r]).data &&
                          (e.revert(),
                          e.getChildren(!0, !0, !1).forEach(function (t) {
                            return i.splice(i.indexOf(t), 1);
                          }));
                      for (
                        i
                          .map(function (t) {
                            return {
                              g:
                                t._dur ||
                                t._delay ||
                                (t._sat && !t._sat.vars.immediateRender)
                                  ? t.globalTime(0)
                                  : -1 / 0,
                              t,
                            };
                          })
                          .sort(function (t, e) {
                            return e.g - t.g || -1 / 0;
                          })
                          .forEach(function (e) {
                            return e.t.revert(t);
                          }),
                          r = n.data.length;
                        r--;

                      )
                        (e = n.data[r]) instanceof Ge
                          ? "nested" !== e.data &&
                            (e.scrollTrigger && e.scrollTrigger.revert(),
                            e.kill())
                          : !(e instanceof Je) && e.revert && e.revert(t);
                      n._r.forEach(function (e) {
                        return e(t, n);
                      }),
                        (n.isReverted = !0);
                    })()
                  : this.data.forEach(function (t) {
                      return t.kill && t.kill();
                    }),
                this.clear(),
                e)
              )
                for (var i = mn.length; i--; )
                  mn[i].id === this.id && mn.splice(i, 1);
            }),
            (e.revert = function (t) {
              this.kill(t || {});
            }),
            t
          );
        })(),
        En = (function () {
          function t(t) {
            (this.contexts = []), (this.scope = t), o && o.data.push(this);
          }
          var e = t.prototype;
          return (
            (e.add = function (t, e, n) {
              O(t) || (t = { matches: t });
              var i,
                r,
                a,
                s = new Sn(0, n || this.scope),
                l = (s.conditions = {});
              for (r in (o && !s.selector && (s.selector = o.selector),
              this.contexts.push(s),
              (e = s.add("onMatch", e)),
              (s.queries = t),
              t))
                "all" === r
                  ? (a = 1)
                  : (i = c.matchMedia(t[r])) &&
                    (mn.indexOf(s) < 0 && mn.push(s),
                    (l[r] = i.matches) && (a = 1),
                    i.addListener
                      ? i.addListener(Mn)
                      : i.addEventListener("change", Mn));
              return (
                a &&
                  e(s, function (t) {
                    return s.add(null, t);
                  }),
                this
              );
            }),
            (e.revert = function (t) {
              this.kill(t || {});
            }),
            (e.kill = function (t) {
              this.contexts.forEach(function (e) {
                return e.kill(t, !0);
              });
            }),
            t
          );
        })(),
        bn = {
          registerPlugin: function () {
            for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
              e[n] = arguments[n];
            e.forEach(function (t) {
              return _e(t);
            });
          },
          timeline: function (t) {
            return new Ge(t);
          },
          getTweensOf: function (t, e) {
            return l.getTweensOf(t, e);
          },
          getProperty: function (t, e, n, i) {
            U(t) && (t = ie(t)[0]);
            var r = ft(t || {}).get,
              a = n ? bt : Et;
            return (
              "native" === n && (n = ""),
              t
                ? e
                  ? a(((lt[e] && lt[e].get) || r)(t, e, n, i))
                  : function (e, n, i) {
                      return a(((lt[e] && lt[e].get) || r)(t, e, n, i));
                    }
                : t
            );
          },
          quickSetter: function (t, e, n) {
            if ((t = ie(t)).length > 1) {
              var i = t.map(function (t) {
                  return An.quickSetter(t, e, n);
                }),
                r = i.length;
              return function (t) {
                for (var e = r; e--; ) i[e](t);
              };
            }
            t = t[0] || {};
            var a = lt[e],
              s = ft(t),
              o = (s.harness && (s.harness.aliases || {})[e]) || e,
              l = a
                ? function (e) {
                    var i = new a();
                    (f._pt = 0),
                      i.init(t, n ? e + n : e, f, 0, [t]),
                      i.render(1, i),
                      f._pt && cn(1, f);
                  }
                : s.set(t, o);
            return a
              ? l
              : function (e) {
                  return l(t, o, n ? e + n : e, s, 1);
                };
          },
          quickTo: function (t, e, n) {
            var i,
              r = An.to(
                t,
                wt((((i = {})[e] = "+=0.1"), (i.paused = !0), i), n || {})
              ),
              a = function (t, n, i) {
                return r.resetTo(e, t, n, i);
              };
            return (a.tween = r), a;
          },
          isTweening: function (t) {
            return l.getTweensOf(t, !0).length > 0;
          },
          defaults: function (t) {
            return t && t.ease && (t.ease = Ne(t.ease, E.ease)), At(E, t || {});
          },
          config: function (t) {
            return At(S, t || {});
          },
          registerEffect: function (t) {
            var e = t.name,
              n = t.effect,
              i = t.plugins,
              r = t.defaults,
              a = t.extendTimeline;
            (i || "").split(",").forEach(function (t) {
              return (
                t &&
                !lt[t] &&
                !K[t] &&
                J(e + " effect requires " + t + " plugin.")
              );
            }),
              (ct[e] = function (t, e, i) {
                return n(ie(t), Tt(e || {}, r), i);
              }),
              a &&
                (Ge.prototype[e] = function (t, n, i) {
                  return this.add(ct[e](t, O(n) ? n : (i = n) && {}, this), i);
                });
          },
          registerEase: function (t, e) {
            Ce[t] = Ne(e);
          },
          parseEase: function (t, e) {
            return arguments.length ? Ne(t, e) : Ce;
          },
          getById: function (t) {
            return l.getById(t);
          },
          exportRoot: function (t, e) {
            void 0 === t && (t = {});
            var n,
              i,
              r = new Ge(t);
            for (
              r.smoothChildTiming = F(t.smoothChildTiming),
                l.remove(r),
                r._dp = 0,
                r._time = r._tTime = l._time,
                n = l._first;
              n;

            )
              (i = n._next),
                (!e &&
                  !n._dur &&
                  n instanceof Je &&
                  n.vars.onComplete === n._targets[0]) ||
                  Gt(r, n, n._start - n._delay),
                (n = i);
            return Gt(l, r, 0), r;
          },
          context: function (t, e) {
            return t ? new Sn(t, e) : o;
          },
          matchMedia: function (t) {
            return new En(t);
          },
          matchMediaRefresh: function () {
            return (
              mn.forEach(function (t) {
                var e,
                  n,
                  i = t.conditions;
                for (n in i) i[n] && ((i[n] = !1), (e = 1));
                e && t.revert();
              }) || Mn()
            );
          },
          addEventListener: function (t, e) {
            var n = gn[t] || (gn[t] = []);
            ~n.indexOf(e) || n.push(e);
          },
          removeEventListener: function (t, e) {
            var n = gn[t],
              i = n && n.indexOf(e);
            i >= 0 && n.splice(i, 1);
          },
          utils: {
            wrap: function t(e, n, i) {
              var r = n - e;
              return H(e)
                ? ue(e, t(0, e.length), n)
                : Qt(i, function (t) {
                    return ((r + ((t - e) % r)) % r) + e;
                  });
            },
            wrapYoyo: function t(e, n, i) {
              var r = n - e,
                a = 2 * r;
              return H(e)
                ? ue(e, t(0, e.length - 1), n)
                : Qt(i, function (t) {
                    return (
                      e + ((t = (a + ((t - e) % a)) % a || 0) > r ? a - t : t)
                    );
                  });
            },
            distribute: se,
            random: ce,
            snap: le,
            normalize: function (t, e, n) {
              return de(t, e, 0, 1, n);
            },
            getUnit: te,
            clamp: function (t, e, n) {
              return Qt(n, function (n) {
                return Jt(t, e, n);
              });
            },
            splitColor: Me,
            toArray: ie,
            selector: re,
            mapRange: de,
            pipe: function () {
              for (
                var t = arguments.length, e = new Array(t), n = 0;
                n < t;
                n++
              )
                e[n] = arguments[n];
              return function (t) {
                return e.reduce(function (t, e) {
                  return e(t);
                }, t);
              };
            },
            unitize: function (t, e) {
              return function (n) {
                return t(parseFloat(n)) + (e || te(n));
              };
            },
            interpolate: function t(e, n, i, r) {
              var a = isNaN(e + n)
                ? 0
                : function (t) {
                    return (1 - t) * e + t * n;
                  };
              if (!a) {
                var s,
                  o,
                  l,
                  c,
                  u,
                  h = U(e),
                  d = {};
                if ((!0 === i && (r = 1) && (i = null), h))
                  (e = { p: e }), (n = { p: n });
                else if (H(e) && !H(n)) {
                  for (l = [], c = e.length, u = c - 2, o = 1; o < c; o++)
                    l.push(t(e[o - 1], e[o]));
                  c--,
                    (a = function (t) {
                      t *= c;
                      var e = Math.min(u, ~~t);
                      return l[e](t - e);
                    }),
                    (i = n);
                } else r || (e = wt(H(e) ? [] : {}, e));
                if (!l) {
                  for (s in n) qe.call(d, e, s, "get", n[s]);
                  a = function (t) {
                    return cn(t, d) || (h ? e.p : e);
                  };
                }
              }
              return Qt(i, a);
            },
            shuffle: ae,
          },
          install: $,
          effects: ct,
          ticker: Ae,
          updateRoot: Ge.updateRoot,
          plugins: lt,
          globalTimeline: l,
          core: {
            PropTween: fn,
            globals: tt,
            Tween: Je,
            Timeline: Ge,
            Animation: He,
            getCache: ft,
            _removeLinkedListItem: Lt,
            reverting: function () {
              return s;
            },
            context: function (t) {
              return t && o && (o.data.push(t), (t._ctx = o)), o;
            },
            suppressOverwrites: function (t) {
              return (a = t);
            },
          },
        };
      gt("to,from,fromTo,delayedCall,set,killTweensOf", function (t) {
        return (bn[t] = Je[t]);
      }),
        Ae.add(Ge.updateRoot),
        (f = bn.to({}, { duration: 0 }));
      var Tn = function (t, e) {
          for (var n = t._pt; n && n.p !== e && n.op !== e && n.fp !== e; )
            n = n._next;
          return n;
        },
        wn = function (t, e) {
          return {
            name: t,
            rawVars: 1,
            init: function (t, n, i) {
              i._onInit = function (t) {
                var i, r;
                if (
                  (U(n) &&
                    ((i = {}),
                    gt(n, function (t) {
                      return (i[t] = 1);
                    }),
                    (n = i)),
                  e)
                ) {
                  for (r in ((i = {}), n)) i[r] = e(n[r]);
                  n = i;
                }
                !(function (t, e) {
                  var n,
                    i,
                    r,
                    a = t._targets;
                  for (n in e)
                    for (i = a.length; i--; )
                      (r = t._ptLookup[i][n]) &&
                        (r = r.d) &&
                        (r._pt && (r = Tn(r, n)),
                        r && r.modifier && r.modifier(e[n], t, a[i], n));
                })(t, n);
              };
            },
          };
        },
        An =
          bn.registerPlugin(
            {
              name: "attr",
              init: function (t, e, n, i, r) {
                var a, s, o;
                for (a in ((this.tween = n), e))
                  (o = t.getAttribute(a) || ""),
                    ((s = this.add(
                      t,
                      "setAttribute",
                      (o || 0) + "",
                      e[a],
                      i,
                      r,
                      0,
                      0,
                      a
                    )).op = a),
                    (s.b = o),
                    this._props.push(a);
              },
              render: function (t, e) {
                for (var n = e._pt; n; )
                  s ? n.set(n.t, n.p, n.b, n) : n.r(t, n.d), (n = n._next);
              },
            },
            {
              name: "endArray",
              init: function (t, e) {
                for (var n = e.length; n--; )
                  this.add(t, n, t[n] || 0, e[n], 0, 0, 0, 0, 0, 1);
              },
            },
            wn("roundProps", oe),
            wn("modifiers"),
            wn("snap", le)
          ) || bn;
      (Je.version = Ge.version = An.version = "3.12.5"),
        (d = 1),
        B() && Re(),
        Ce.Power0,
        Ce.Power1,
        Ce.Power2,
        Ce.Power3,
        Ce.Power4,
        Ce.Linear,
        Ce.Quad,
        Ce.Cubic,
        Ce.Quart,
        Ce.Quint,
        Ce.Strong,
        Ce.Elastic,
        Ce.Back,
        Ce.SteppedEase,
        Ce.Bounce,
        Ce.Sine,
        Ce.Expo,
        Ce.Circ;
      var Rn,
        Cn,
        Pn,
        Ln,
        Un,
        Dn,
        In,
        Nn,
        On = {},
        Fn = 180 / Math.PI,
        Bn = Math.PI / 180,
        zn = Math.atan2,
        kn = /([A-Z])/g,
        Hn = /(left|right|width|margin|padding|x)/i,
        Gn = /[\s,\(]\S/,
        Vn = {
          autoAlpha: "opacity,visibility",
          scale: "scaleX,scaleY",
          alpha: "opacity",
        },
        Wn = function (t, e) {
          return e.set(
            e.t,
            e.p,
            Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u,
            e
          );
        },
        Xn = function (t, e) {
          return e.set(
            e.t,
            e.p,
            1 === t ? e.e : Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u,
            e
          );
        },
        qn = function (t, e) {
          return e.set(
            e.t,
            e.p,
            t ? Math.round(1e4 * (e.s + e.c * t)) / 1e4 + e.u : e.b,
            e
          );
        },
        jn = function (t, e) {
          var n = e.s + e.c * t;
          e.set(e.t, e.p, ~~(n + (n < 0 ? -0.5 : 0.5)) + e.u, e);
        },
        Yn = function (t, e) {
          return e.set(e.t, e.p, t ? e.e : e.b, e);
        },
        Kn = function (t, e) {
          return e.set(e.t, e.p, 1 !== t ? e.b : e.e, e);
        },
        Zn = function (t, e, n) {
          return (t.style[e] = n);
        },
        $n = function (t, e, n) {
          return t.style.setProperty(e, n);
        },
        Qn = function (t, e, n) {
          return (t._gsap[e] = n);
        },
        Jn = function (t, e, n) {
          return (t._gsap.scaleX = t._gsap.scaleY = n);
        },
        ti = function (t, e, n, i, r) {
          var a = t._gsap;
          (a.scaleX = a.scaleY = n), a.renderTransform(r, a);
        },
        ei = function (t, e, n, i, r) {
          var a = t._gsap;
          (a[e] = n), a.renderTransform(r, a);
        },
        ni = "transform",
        ii = ni + "Origin",
        ri = function t(e, n) {
          var i = this,
            r = this.target,
            a = r.style,
            s = r._gsap;
          if (e in On && a) {
            if (((this.tfm = this.tfm || {}), "transform" === e))
              return Vn.transform.split(",").forEach(function (e) {
                return t.call(i, e, n);
              });
            if (
              (~(e = Vn[e] || e).indexOf(",")
                ? e.split(",").forEach(function (t) {
                    return (i.tfm[t] = Si(r, t));
                  })
                : (this.tfm[e] = s.x ? s[e] : Si(r, e)),
              e === ii && (this.tfm.zOrigin = s.zOrigin),
              this.props.indexOf(ni) >= 0)
            )
              return;
            s.svg &&
              ((this.svgo = r.getAttribute("data-svg-origin")),
              this.props.push(ii, n, "")),
              (e = ni);
          }
          (a || n) && this.props.push(e, n, a[e]);
        },
        ai = function (t) {
          t.translate &&
            (t.removeProperty("translate"),
            t.removeProperty("scale"),
            t.removeProperty("rotate"));
        },
        si = function () {
          var t,
            e,
            n = this.props,
            i = this.target,
            r = i.style,
            a = i._gsap;
          for (t = 0; t < n.length; t += 3)
            n[t + 1]
              ? (i[n[t]] = n[t + 2])
              : n[t + 2]
              ? (r[n[t]] = n[t + 2])
              : r.removeProperty(
                  "--" === n[t].substr(0, 2)
                    ? n[t]
                    : n[t].replace(kn, "-$1").toLowerCase()
                );
          if (this.tfm) {
            for (e in this.tfm) a[e] = this.tfm[e];
            a.svg &&
              (a.renderTransform(),
              i.setAttribute("data-svg-origin", this.svgo || "")),
              ((t = In()) && t.isStart) ||
                r[ni] ||
                (ai(r),
                a.zOrigin &&
                  r[ii] &&
                  ((r[ii] += " " + a.zOrigin + "px"),
                  (a.zOrigin = 0),
                  a.renderTransform()),
                (a.uncache = 1));
          }
        },
        oi = function (t, e) {
          var n = { target: t, props: [], revert: si, save: ri };
          return (
            t._gsap || An.core.getCache(t),
            e &&
              e.split(",").forEach(function (t) {
                return n.save(t);
              }),
            n
          );
        },
        li = function (t, e) {
          var n = Cn.createElementNS
            ? Cn.createElementNS(
                (e || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"),
                t
              )
            : Cn.createElement(t);
          return n && n.style ? n : Cn.createElement(t);
        },
        ci = function t(e, n, i) {
          var r = getComputedStyle(e);
          return (
            r[n] ||
            r.getPropertyValue(n.replace(kn, "-$1").toLowerCase()) ||
            r.getPropertyValue(n) ||
            (!i && t(e, hi(n) || n, 1)) ||
            ""
          );
        },
        ui = "O,Moz,ms,Ms,Webkit".split(","),
        hi = function (t, e, n) {
          var i = (e || Un).style,
            r = 5;
          if (t in i && !n) return t;
          for (
            t = t.charAt(0).toUpperCase() + t.substr(1);
            r-- && !(ui[r] + t in i);

          );
          return r < 0 ? null : (3 === r ? "ms" : r >= 0 ? ui[r] : "") + t;
        },
        di = function () {
          "undefined" != typeof window &&
            window.document &&
            ((Rn = window),
            (Cn = Rn.document),
            (Pn = Cn.documentElement),
            (Un = li("div") || { style: {} }),
            li("div"),
            (ni = hi(ni)),
            (ii = ni + "Origin"),
            (Un.style.cssText =
              "border-width:0;line-height:0;position:absolute;padding:0"),
            (Nn = !!hi("perspective")),
            (In = An.core.reverting),
            (Ln = 1));
        },
        pi = function t(e) {
          var n,
            i = li(
              "svg",
              (this.ownerSVGElement &&
                this.ownerSVGElement.getAttribute("xmlns")) ||
                "http://www.w3.org/2000/svg"
            ),
            r = this.parentNode,
            a = this.nextSibling,
            s = this.style.cssText;
          if (
            (Pn.appendChild(i),
            i.appendChild(this),
            (this.style.display = "block"),
            e)
          )
            try {
              (n = this.getBBox()),
                (this._gsapBBox = this.getBBox),
                (this.getBBox = t);
            } catch (t) {}
          else this._gsapBBox && (n = this._gsapBBox());
          return (
            r && (a ? r.insertBefore(this, a) : r.appendChild(this)),
            Pn.removeChild(i),
            (this.style.cssText = s),
            n
          );
        },
        fi = function (t, e) {
          for (var n = e.length; n--; )
            if (t.hasAttribute(e[n])) return t.getAttribute(e[n]);
        },
        mi = function (t) {
          var e;
          try {
            e = t.getBBox();
          } catch (n) {
            e = pi.call(t, !0);
          }
          return (
            (e && (e.width || e.height)) ||
              t.getBBox === pi ||
              (e = pi.call(t, !0)),
            !e || e.width || e.x || e.y
              ? e
              : {
                  x: +fi(t, ["x", "cx", "x1"]) || 0,
                  y: +fi(t, ["y", "cy", "y1"]) || 0,
                  width: 0,
                  height: 0,
                }
          );
        },
        gi = function (t) {
          return !(!t.getCTM || (t.parentNode && !t.ownerSVGElement) || !mi(t));
        },
        _i = function (t, e) {
          if (e) {
            var n,
              i = t.style;
            e in On && e !== ii && (e = ni),
              i.removeProperty
                ? (("ms" !== (n = e.substr(0, 2)) &&
                    "webkit" !== e.substr(0, 6)) ||
                    (e = "-" + e),
                  i.removeProperty(
                    "--" === n ? e : e.replace(kn, "-$1").toLowerCase()
                  ))
                : i.removeAttribute(e);
          }
        },
        vi = function (t, e, n, i, r, a) {
          var s = new fn(t._pt, e, n, 0, 1, a ? Kn : Yn);
          return (t._pt = s), (s.b = i), (s.e = r), t._props.push(n), s;
        },
        xi = { deg: 1, rad: 1, turn: 1 },
        yi = { grid: 1, flex: 1 },
        Mi = function t(e, n, i, r) {
          var a,
            s,
            o,
            l,
            c = parseFloat(i) || 0,
            u = (i + "").trim().substr((c + "").length) || "px",
            h = Un.style,
            d = Hn.test(n),
            p = "svg" === e.tagName.toLowerCase(),
            f = (p ? "client" : "offset") + (d ? "Width" : "Height"),
            m = 100,
            g = "px" === r,
            _ = "%" === r;
          if (r === u || !c || xi[r] || xi[u]) return c;
          if (
            ("px" !== u && !g && (c = t(e, n, i, "px")),
            (l = e.getCTM && gi(e)),
            (_ || "%" === u) && (On[n] || ~n.indexOf("adius")))
          )
            return (
              (a = l ? e.getBBox()[d ? "width" : "height"] : e[f]),
              _t(_ ? (c / a) * m : (c / 100) * a)
            );
          if (
            ((h[d ? "width" : "height"] = m + (g ? u : r)),
            (s =
              ~n.indexOf("adius") || ("em" === r && e.appendChild && !p)
                ? e
                : e.parentNode),
            l && (s = (e.ownerSVGElement || {}).parentNode),
            (s && s !== Cn && s.appendChild) || (s = Cn.body),
            (o = s._gsap) &&
              _ &&
              o.width &&
              d &&
              o.time === Ae.time &&
              !o.uncache)
          )
            return _t((c / o.width) * m);
          if (!_ || ("height" !== n && "width" !== n))
            (_ || "%" === u) &&
              !yi[ci(s, "display")] &&
              (h.position = ci(e, "position")),
              s === e && (h.position = "static"),
              s.appendChild(Un),
              (a = Un[f]),
              s.removeChild(Un),
              (h.position = "absolute");
          else {
            var v = e.style[n];
            (e.style[n] = m + r), (a = e[f]), v ? (e.style[n] = v) : _i(e, n);
          }
          return (
            d && _ && (((o = ft(s)).time = Ae.time), (o.width = s[f])),
            _t(g ? (a * c) / m : a && c ? (m / a) * c : 0)
          );
        },
        Si = function (t, e, n, i) {
          var r;
          return (
            Ln || di(),
            e in Vn &&
              "transform" !== e &&
              ~(e = Vn[e]).indexOf(",") &&
              (e = e.split(",")[0]),
            On[e] && "transform" !== e
              ? ((r = Di(t, i)),
                (r =
                  "transformOrigin" !== e
                    ? r[e]
                    : r.svg
                    ? r.origin
                    : Ii(ci(t, ii)) + " " + r.zOrigin + "px"))
              : (!(r = t.style[e]) ||
                  "auto" === r ||
                  i ||
                  ~(r + "").indexOf("calc(")) &&
                (r =
                  (wi[e] && wi[e](t, e, n)) ||
                  ci(t, e) ||
                  mt(t, e) ||
                  ("opacity" === e ? 1 : 0)),
            n && !~(r + "").trim().indexOf(" ") ? Mi(t, e, r, n) + n : r
          );
        },
        Ei = function (t, e, n, i) {
          if (!n || "none" === n) {
            var r = hi(e, t, 1),
              a = r && ci(t, r, 1);
            a && a !== n
              ? ((e = r), (n = a))
              : "borderColor" === e && (n = ci(t, "borderTopColor"));
          }
          var s,
            o,
            l,
            c,
            u,
            h,
            d,
            p,
            f,
            m,
            g,
            _ = new fn(this._pt, t.style, e, 0, 1, ln),
            v = 0,
            x = 0;
          if (
            ((_.b = n),
            (_.e = i),
            (n += ""),
            "auto" == (i += "") &&
              ((h = t.style[e]),
              (t.style[e] = i),
              (i = ci(t, e) || i),
              h ? (t.style[e] = h) : _i(t, e)),
            we((s = [n, i])),
            (i = s[1]),
            (l = (n = s[0]).match(W) || []),
            (i.match(W) || []).length)
          ) {
            for (; (o = W.exec(i)); )
              (d = o[0]),
                (f = i.substring(v, o.index)),
                u
                  ? (u = (u + 1) % 5)
                  : ("rgba(" !== f.substr(-5) && "hsla(" !== f.substr(-5)) ||
                    (u = 1),
                d !== (h = l[x++] || "") &&
                  ((c = parseFloat(h) || 0),
                  (g = h.substr((c + "").length)),
                  "=" === d.charAt(1) && (d = xt(c, d) + g),
                  (p = parseFloat(d)),
                  (m = d.substr((p + "").length)),
                  (v = W.lastIndex - m.length),
                  m ||
                    ((m = m || S.units[e] || g),
                    v === i.length && ((i += m), (_.e += m))),
                  g !== m && (c = Mi(t, e, h, m) || 0),
                  (_._pt = {
                    _next: _._pt,
                    p: f || 1 === x ? f : ",",
                    s: c,
                    c: p - c,
                    m: (u && u < 4) || "zIndex" === e ? Math.round : 0,
                  }));
            _.c = v < i.length ? i.substring(v, i.length) : "";
          } else _.r = "display" === e && "none" === i ? Kn : Yn;
          return q.test(i) && (_.e = 0), (this._pt = _), _;
        },
        bi = {
          top: "0%",
          bottom: "100%",
          left: "0%",
          right: "100%",
          center: "50%",
        },
        Ti = function (t, e) {
          if (e.tween && e.tween._time === e.tween._dur) {
            var n,
              i,
              r,
              a = e.t,
              s = a.style,
              o = e.u,
              l = a._gsap;
            if ("all" === o || !0 === o) (s.cssText = ""), (i = 1);
            else
              for (r = (o = o.split(",")).length; --r > -1; )
                (n = o[r]),
                  On[n] && ((i = 1), (n = "transformOrigin" === n ? ii : ni)),
                  _i(a, n);
            i &&
              (_i(a, ni),
              l &&
                (l.svg && a.removeAttribute("transform"),
                Di(a, 1),
                (l.uncache = 1),
                ai(s)));
          }
        },
        wi = {
          clearProps: function (t, e, n, i, r) {
            if ("isFromStart" !== r.data) {
              var a = (t._pt = new fn(t._pt, e, n, 0, 0, Ti));
              return (
                (a.u = i), (a.pr = -10), (a.tween = r), t._props.push(n), 1
              );
            }
          },
        },
        Ai = [1, 0, 0, 1, 0, 0],
        Ri = {},
        Ci = function (t) {
          return "matrix(1, 0, 0, 1, 0, 0)" === t || "none" === t || !t;
        },
        Pi = function (t) {
          var e = ci(t, ni);
          return Ci(e) ? Ai : e.substr(7).match(V).map(_t);
        },
        Li = function (t, e) {
          var n,
            i,
            r,
            a,
            s = t._gsap || ft(t),
            o = t.style,
            l = Pi(t);
          return s.svg && t.getAttribute("transform")
            ? "1,0,0,1,0,0" ===
              (l = [
                (r = t.transform.baseVal.consolidate().matrix).a,
                r.b,
                r.c,
                r.d,
                r.e,
                r.f,
              ]).join(",")
              ? Ai
              : l
            : (l !== Ai ||
                t.offsetParent ||
                t === Pn ||
                s.svg ||
                ((r = o.display),
                (o.display = "block"),
                ((n = t.parentNode) && t.offsetParent) ||
                  ((a = 1), (i = t.nextElementSibling), Pn.appendChild(t)),
                (l = Pi(t)),
                r ? (o.display = r) : _i(t, "display"),
                a &&
                  (i
                    ? n.insertBefore(t, i)
                    : n
                    ? n.appendChild(t)
                    : Pn.removeChild(t))),
              e && l.length > 6 ? [l[0], l[1], l[4], l[5], l[12], l[13]] : l);
        },
        Ui = function (t, e, n, i, r, a) {
          var s,
            o,
            l,
            c = t._gsap,
            u = r || Li(t, !0),
            h = c.xOrigin || 0,
            d = c.yOrigin || 0,
            p = c.xOffset || 0,
            f = c.yOffset || 0,
            m = u[0],
            g = u[1],
            _ = u[2],
            v = u[3],
            x = u[4],
            y = u[5],
            M = e.split(" "),
            S = parseFloat(M[0]) || 0,
            E = parseFloat(M[1]) || 0;
          n
            ? u !== Ai &&
              (o = m * v - g * _) &&
              ((l = S * (-g / o) + E * (m / o) - (m * y - g * x) / o),
              (S = S * (v / o) + E * (-_ / o) + (_ * y - v * x) / o),
              (E = l))
            : ((S =
                (s = mi(t)).x + (~M[0].indexOf("%") ? (S / 100) * s.width : S)),
              (E =
                s.y +
                (~(M[1] || M[0]).indexOf("%") ? (E / 100) * s.height : E))),
            i || (!1 !== i && c.smooth)
              ? ((x = S - h),
                (y = E - d),
                (c.xOffset = p + (x * m + y * _) - x),
                (c.yOffset = f + (x * g + y * v) - y))
              : (c.xOffset = c.yOffset = 0),
            (c.xOrigin = S),
            (c.yOrigin = E),
            (c.smooth = !!i),
            (c.origin = e),
            (c.originIsAbsolute = !!n),
            (t.style[ii] = "0px 0px"),
            a &&
              (vi(a, c, "xOrigin", h, S),
              vi(a, c, "yOrigin", d, E),
              vi(a, c, "xOffset", p, c.xOffset),
              vi(a, c, "yOffset", f, c.yOffset)),
            t.setAttribute("data-svg-origin", S + " " + E);
        },
        Di = function (t, e) {
          var n = t._gsap || new ke(t);
          if ("x" in n && !e && !n.uncache) return n;
          var i,
            r,
            a,
            s,
            o,
            l,
            c,
            u,
            h,
            d,
            p,
            f,
            m,
            g,
            _,
            v,
            x,
            y,
            M,
            E,
            b,
            T,
            w,
            A,
            R,
            C,
            P,
            L,
            U,
            D,
            I,
            N,
            O = t.style,
            F = n.scaleX < 0,
            B = "px",
            z = "deg",
            k = getComputedStyle(t),
            H = ci(t, ii) || "0";
          return (
            (i = r = a = l = c = u = h = d = p = 0),
            (s = o = 1),
            (n.svg = !(!t.getCTM || !gi(t))),
            k.translate &&
              (("none" === k.translate &&
                "none" === k.scale &&
                "none" === k.rotate) ||
                (O[ni] =
                  ("none" !== k.translate
                    ? "translate3d(" +
                      (k.translate + " 0 0").split(" ").slice(0, 3).join(", ") +
                      ") "
                    : "") +
                  ("none" !== k.rotate ? "rotate(" + k.rotate + ") " : "") +
                  ("none" !== k.scale
                    ? "scale(" + k.scale.split(" ").join(",") + ") "
                    : "") +
                  ("none" !== k[ni] ? k[ni] : "")),
              (O.scale = O.rotate = O.translate = "none")),
            (g = Li(t, n.svg)),
            n.svg &&
              (n.uncache
                ? ((R = t.getBBox()),
                  (H = n.xOrigin - R.x + "px " + (n.yOrigin - R.y) + "px"),
                  (A = ""))
                : (A = !e && t.getAttribute("data-svg-origin")),
              Ui(t, A || H, !!A || n.originIsAbsolute, !1 !== n.smooth, g)),
            (f = n.xOrigin || 0),
            (m = n.yOrigin || 0),
            g !== Ai &&
              ((y = g[0]),
              (M = g[1]),
              (E = g[2]),
              (b = g[3]),
              (i = T = g[4]),
              (r = w = g[5]),
              6 === g.length
                ? ((s = Math.sqrt(y * y + M * M)),
                  (o = Math.sqrt(b * b + E * E)),
                  (l = y || M ? zn(M, y) * Fn : 0),
                  (h = E || b ? zn(E, b) * Fn + l : 0) &&
                    (o *= Math.abs(Math.cos(h * Bn))),
                  n.svg &&
                    ((i -= f - (f * y + m * E)), (r -= m - (f * M + m * b))))
                : ((N = g[6]),
                  (D = g[7]),
                  (P = g[8]),
                  (L = g[9]),
                  (U = g[10]),
                  (I = g[11]),
                  (i = g[12]),
                  (r = g[13]),
                  (a = g[14]),
                  (c = (_ = zn(N, U)) * Fn),
                  _ &&
                    ((A = T * (v = Math.cos(-_)) + P * (x = Math.sin(-_))),
                    (R = w * v + L * x),
                    (C = N * v + U * x),
                    (P = T * -x + P * v),
                    (L = w * -x + L * v),
                    (U = N * -x + U * v),
                    (I = D * -x + I * v),
                    (T = A),
                    (w = R),
                    (N = C)),
                  (u = (_ = zn(-E, U)) * Fn),
                  _ &&
                    ((v = Math.cos(-_)),
                    (I = b * (x = Math.sin(-_)) + I * v),
                    (y = A = y * v - P * x),
                    (M = R = M * v - L * x),
                    (E = C = E * v - U * x)),
                  (l = (_ = zn(M, y)) * Fn),
                  _ &&
                    ((A = y * (v = Math.cos(_)) + M * (x = Math.sin(_))),
                    (R = T * v + w * x),
                    (M = M * v - y * x),
                    (w = w * v - T * x),
                    (y = A),
                    (T = R)),
                  c &&
                    Math.abs(c) + Math.abs(l) > 359.9 &&
                    ((c = l = 0), (u = 180 - u)),
                  (s = _t(Math.sqrt(y * y + M * M + E * E))),
                  (o = _t(Math.sqrt(w * w + N * N))),
                  (_ = zn(T, w)),
                  (h = Math.abs(_) > 2e-4 ? _ * Fn : 0),
                  (p = I ? 1 / (I < 0 ? -I : I) : 0)),
              n.svg &&
                ((A = t.getAttribute("transform")),
                (n.forceCSS =
                  t.setAttribute("transform", "") || !Ci(ci(t, ni))),
                A && t.setAttribute("transform", A))),
            Math.abs(h) > 90 &&
              Math.abs(h) < 270 &&
              (F
                ? ((s *= -1),
                  (h += l <= 0 ? 180 : -180),
                  (l += l <= 0 ? 180 : -180))
                : ((o *= -1), (h += h <= 0 ? 180 : -180))),
            (e = e || n.uncache),
            (n.x =
              i -
              ((n.xPercent =
                i &&
                ((!e && n.xPercent) ||
                  (Math.round(t.offsetWidth / 2) === Math.round(-i) ? -50 : 0)))
                ? (t.offsetWidth * n.xPercent) / 100
                : 0) +
              B),
            (n.y =
              r -
              ((n.yPercent =
                r &&
                ((!e && n.yPercent) ||
                  (Math.round(t.offsetHeight / 2) === Math.round(-r)
                    ? -50
                    : 0)))
                ? (t.offsetHeight * n.yPercent) / 100
                : 0) +
              B),
            (n.z = a + B),
            (n.scaleX = _t(s)),
            (n.scaleY = _t(o)),
            (n.rotation = _t(l) + z),
            (n.rotationX = _t(c) + z),
            (n.rotationY = _t(u) + z),
            (n.skewX = h + z),
            (n.skewY = d + z),
            (n.transformPerspective = p + B),
            (n.zOrigin =
              parseFloat(H.split(" ")[2]) || (!e && n.zOrigin) || 0) &&
              (O[ii] = Ii(H)),
            (n.xOffset = n.yOffset = 0),
            (n.force3D = S.force3D),
            (n.renderTransform = n.svg ? Hi : Nn ? ki : Oi),
            (n.uncache = 0),
            n
          );
        },
        Ii = function (t) {
          return (t = t.split(" "))[0] + " " + t[1];
        },
        Ni = function (t, e, n) {
          var i = te(e);
          return _t(parseFloat(e) + parseFloat(Mi(t, "x", n + "px", i))) + i;
        },
        Oi = function (t, e) {
          (e.z = "0px"),
            (e.rotationY = e.rotationX = "0deg"),
            (e.force3D = 0),
            ki(t, e);
        },
        Fi = "0deg",
        Bi = "0px",
        zi = ") ",
        ki = function (t, e) {
          var n = e || this,
            i = n.xPercent,
            r = n.yPercent,
            a = n.x,
            s = n.y,
            o = n.z,
            l = n.rotation,
            c = n.rotationY,
            u = n.rotationX,
            h = n.skewX,
            d = n.skewY,
            p = n.scaleX,
            f = n.scaleY,
            m = n.transformPerspective,
            g = n.force3D,
            _ = n.target,
            v = n.zOrigin,
            x = "",
            y = ("auto" === g && t && 1 !== t) || !0 === g;
          if (v && (u !== Fi || c !== Fi)) {
            var M,
              S = parseFloat(c) * Bn,
              E = Math.sin(S),
              b = Math.cos(S);
            (S = parseFloat(u) * Bn),
              (M = Math.cos(S)),
              (a = Ni(_, a, E * M * -v)),
              (s = Ni(_, s, -Math.sin(S) * -v)),
              (o = Ni(_, o, b * M * -v + v));
          }
          m !== Bi && (x += "perspective(" + m + zi),
            (i || r) && (x += "translate(" + i + "%, " + r + "%) "),
            (y || a !== Bi || s !== Bi || o !== Bi) &&
              (x +=
                o !== Bi || y
                  ? "translate3d(" + a + ", " + s + ", " + o + ") "
                  : "translate(" + a + ", " + s + zi),
            l !== Fi && (x += "rotate(" + l + zi),
            c !== Fi && (x += "rotateY(" + c + zi),
            u !== Fi && (x += "rotateX(" + u + zi),
            (h === Fi && d === Fi) || (x += "skew(" + h + ", " + d + zi),
            (1 === p && 1 === f) || (x += "scale(" + p + ", " + f + zi),
            (_.style[ni] = x || "translate(0, 0)");
        },
        Hi = function (t, e) {
          var n,
            i,
            r,
            a,
            s,
            o = e || this,
            l = o.xPercent,
            c = o.yPercent,
            u = o.x,
            h = o.y,
            d = o.rotation,
            p = o.skewX,
            f = o.skewY,
            m = o.scaleX,
            g = o.scaleY,
            _ = o.target,
            v = o.xOrigin,
            x = o.yOrigin,
            y = o.xOffset,
            M = o.yOffset,
            S = o.forceCSS,
            E = parseFloat(u),
            b = parseFloat(h);
          (d = parseFloat(d)),
            (p = parseFloat(p)),
            (f = parseFloat(f)) && ((p += f = parseFloat(f)), (d += f)),
            d || p
              ? ((d *= Bn),
                (p *= Bn),
                (n = Math.cos(d) * m),
                (i = Math.sin(d) * m),
                (r = Math.sin(d - p) * -g),
                (a = Math.cos(d - p) * g),
                p &&
                  ((f *= Bn),
                  (s = Math.tan(p - f)),
                  (r *= s = Math.sqrt(1 + s * s)),
                  (a *= s),
                  f &&
                    ((s = Math.tan(f)),
                    (n *= s = Math.sqrt(1 + s * s)),
                    (i *= s))),
                (n = _t(n)),
                (i = _t(i)),
                (r = _t(r)),
                (a = _t(a)))
              : ((n = m), (a = g), (i = r = 0)),
            ((E && !~(u + "").indexOf("px")) ||
              (b && !~(h + "").indexOf("px"))) &&
              ((E = Mi(_, "x", u, "px")), (b = Mi(_, "y", h, "px"))),
            (v || x || y || M) &&
              ((E = _t(E + v - (v * n + x * r) + y)),
              (b = _t(b + x - (v * i + x * a) + M))),
            (l || c) &&
              ((s = _.getBBox()),
              (E = _t(E + (l / 100) * s.width)),
              (b = _t(b + (c / 100) * s.height))),
            (s =
              "matrix(" +
              n +
              "," +
              i +
              "," +
              r +
              "," +
              a +
              "," +
              E +
              "," +
              b +
              ")"),
            _.setAttribute("transform", s),
            S && (_.style[ni] = s);
        },
        Gi = function (t, e, n, i, r) {
          var a,
            s,
            o = 360,
            l = U(r),
            c = parseFloat(r) * (l && ~r.indexOf("rad") ? Fn : 1) - i,
            u = i + c + "deg";
          return (
            l &&
              ("short" === (a = r.split("_")[1]) &&
                (c %= o) != c % 180 &&
                (c += c < 0 ? o : -360),
              "cw" === a && c < 0
                ? (c = ((c + 36e9) % o) - ~~(c / o) * o)
                : "ccw" === a &&
                  c > 0 &&
                  (c = ((c - 36e9) % o) - ~~(c / o) * o)),
            (t._pt = s = new fn(t._pt, e, n, i, c, Xn)),
            (s.e = u),
            (s.u = "deg"),
            t._props.push(n),
            s
          );
        },
        Vi = function (t, e) {
          for (var n in e) t[n] = e[n];
          return t;
        },
        Wi = function (t, e, n) {
          var i,
            r,
            a,
            s,
            o,
            l,
            c,
            u = Vi({}, n._gsap),
            h = n.style;
          for (r in (u.svg
            ? ((a = n.getAttribute("transform")),
              n.setAttribute("transform", ""),
              (h[ni] = e),
              (i = Di(n, 1)),
              _i(n, ni),
              n.setAttribute("transform", a))
            : ((a = getComputedStyle(n)[ni]),
              (h[ni] = e),
              (i = Di(n, 1)),
              (h[ni] = a)),
          On))
            (a = u[r]) !== (s = i[r]) &&
              "perspective,force3D,transformOrigin,svgOrigin".indexOf(r) < 0 &&
              ((o = te(a) !== (c = te(s)) ? Mi(n, r, a, c) : parseFloat(a)),
              (l = parseFloat(s)),
              (t._pt = new fn(t._pt, i, r, o, l - o, Wn)),
              (t._pt.u = c || 0),
              t._props.push(r));
          Vi(i, u);
        };
      gt("padding,margin,Width,Radius", function (t, e) {
        var n = "Top",
          i = "Right",
          r = "Bottom",
          a = "Left",
          s = (e < 3 ? [n, i, r, a] : [n + a, n + i, r + i, r + a]).map(
            function (n) {
              return e < 2 ? t + n : "border" + n + t;
            }
          );
        wi[e > 1 ? "border" + t : t] = function (t, e, n, i, r) {
          var a, o;
          if (arguments.length < 4)
            return (
              (a = s.map(function (e) {
                return Si(t, e, n);
              })),
              5 === (o = a.join(" ")).split(a[0]).length ? a[0] : o
            );
          (a = (i + "").split(" ")),
            (o = {}),
            s.forEach(function (t, e) {
              return (o[t] = a[e] = a[e] || a[((e - 1) / 2) | 0]);
            }),
            t.init(e, o, r);
        };
      });
      var Xi,
        qi,
        ji = {
          name: "css",
          register: di,
          targetTest: function (t) {
            return t.style && t.nodeType;
          },
          init: function (t, e, n, i, r) {
            var a,
              s,
              o,
              l,
              c,
              u,
              h,
              d,
              p,
              f,
              m,
              g,
              _,
              v,
              x,
              y,
              M,
              E,
              b,
              T,
              w = this._props,
              A = t.style,
              R = n.vars.startAt;
            for (h in (Ln || di(),
            (this.styles = this.styles || oi(t)),
            (y = this.styles.props),
            (this.tween = n),
            e))
              if (
                "autoRound" !== h &&
                ((s = e[h]), !lt[h] || !je(h, e, n, i, t, r))
              )
                if (
                  ((c = typeof s),
                  (u = wi[h]),
                  "function" === c && (c = typeof (s = s.call(n, i, t, r))),
                  "string" === c && ~s.indexOf("random(") && (s = he(s)),
                  u)
                )
                  u(this, t, h, s, n) && (x = 1);
                else if ("--" === h.substr(0, 2))
                  (a = (getComputedStyle(t).getPropertyValue(h) + "").trim()),
                    (s += ""),
                    (be.lastIndex = 0),
                    be.test(a) || ((d = te(a)), (p = te(s))),
                    p ? d !== p && (a = Mi(t, h, a, p) + p) : d && (s += d),
                    this.add(A, "setProperty", a, s, i, r, 0, 0, h),
                    w.push(h),
                    y.push(h, 0, A[h]);
                else if ("undefined" !== c) {
                  if (
                    (R && h in R
                      ? ((a =
                          "function" == typeof R[h]
                            ? R[h].call(n, i, t, r)
                            : R[h]),
                        U(a) && ~a.indexOf("random(") && (a = he(a)),
                        te(a + "") ||
                          "auto" === a ||
                          (a += S.units[h] || te(Si(t, h)) || ""),
                        "=" === (a + "").charAt(1) && (a = Si(t, h)))
                      : (a = Si(t, h)),
                    (l = parseFloat(a)),
                    (f =
                      "string" === c &&
                      "=" === s.charAt(1) &&
                      s.substr(0, 2)) && (s = s.substr(2)),
                    (o = parseFloat(s)),
                    h in Vn &&
                      ("autoAlpha" === h &&
                        (1 === l &&
                          "hidden" === Si(t, "visibility") &&
                          o &&
                          (l = 0),
                        y.push("visibility", 0, A.visibility),
                        vi(
                          this,
                          A,
                          "visibility",
                          l ? "inherit" : "hidden",
                          o ? "inherit" : "hidden",
                          !o
                        )),
                      "scale" !== h &&
                        "transform" !== h &&
                        ~(h = Vn[h]).indexOf(",") &&
                        (h = h.split(",")[0])),
                    (m = h in On))
                  )
                    if (
                      (this.styles.save(h),
                      g ||
                        (((_ = t._gsap).renderTransform && !e.parseTransform) ||
                          Di(t, e.parseTransform),
                        (v = !1 !== e.smoothOrigin && _.smooth),
                        ((g = this._pt =
                          new fn(
                            this._pt,
                            A,
                            ni,
                            0,
                            1,
                            _.renderTransform,
                            _,
                            0,
                            -1
                          )).dep = 1)),
                      "scale" === h)
                    )
                      (this._pt = new fn(
                        this._pt,
                        _,
                        "scaleY",
                        _.scaleY,
                        (f ? xt(_.scaleY, f + o) : o) - _.scaleY || 0,
                        Wn
                      )),
                        (this._pt.u = 0),
                        w.push("scaleY", h),
                        (h += "X");
                    else {
                      if ("transformOrigin" === h) {
                        y.push(ii, 0, A[ii]),
                          (E = void 0),
                          (b = void 0),
                          (T = void 0),
                          (b = (E = (M = s).split(" "))[0]),
                          (T = E[1] || "50%"),
                          ("top" !== b &&
                            "bottom" !== b &&
                            "left" !== T &&
                            "right" !== T) ||
                            ((M = b), (b = T), (T = M)),
                          (E[0] = bi[b] || b),
                          (E[1] = bi[T] || T),
                          (s = E.join(" ")),
                          _.svg
                            ? Ui(t, s, 0, v, 0, this)
                            : ((p = parseFloat(s.split(" ")[2]) || 0) !==
                                _.zOrigin &&
                                vi(this, _, "zOrigin", _.zOrigin, p),
                              vi(this, A, h, Ii(a), Ii(s)));
                        continue;
                      }
                      if ("svgOrigin" === h) {
                        Ui(t, s, 1, v, 0, this);
                        continue;
                      }
                      if (h in Ri) {
                        Gi(this, _, h, l, f ? xt(l, f + s) : s);
                        continue;
                      }
                      if ("smoothOrigin" === h) {
                        vi(this, _, "smooth", _.smooth, s);
                        continue;
                      }
                      if ("force3D" === h) {
                        _[h] = s;
                        continue;
                      }
                      if ("transform" === h) {
                        Wi(this, s, t);
                        continue;
                      }
                    }
                  else h in A || (h = hi(h) || h);
                  if (
                    m ||
                    ((o || 0 === o) && (l || 0 === l) && !Gn.test(s) && h in A)
                  )
                    o || (o = 0),
                      (d = (a + "").substr((l + "").length)) !==
                        (p = te(s) || (h in S.units ? S.units[h] : d)) &&
                        (l = Mi(t, h, a, p)),
                      (this._pt = new fn(
                        this._pt,
                        m ? _ : A,
                        h,
                        l,
                        (f ? xt(l, f + o) : o) - l,
                        m ||
                        ("px" !== p && "zIndex" !== h) ||
                        !1 === e.autoRound
                          ? Wn
                          : jn
                      )),
                      (this._pt.u = p || 0),
                      d !== p &&
                        "%" !== p &&
                        ((this._pt.b = a), (this._pt.r = qn));
                  else if (h in A) Ei.call(this, t, h, a, f ? f + s : s);
                  else if (h in t)
                    this.add(t, h, a || t[h], f ? f + s : s, i, r);
                  else if ("parseTransform" !== h) {
                    Q(h, s);
                    continue;
                  }
                  m || (h in A ? y.push(h, 0, A[h]) : y.push(h, 1, a || t[h])),
                    w.push(h);
                }
            x && pn(this);
          },
          render: function (t, e) {
            if (e.tween._time || !In())
              for (var n = e._pt; n; ) n.r(t, n.d), (n = n._next);
            else e.styles.revert();
          },
          get: Si,
          aliases: Vn,
          getSetter: function (t, e, n) {
            var i = Vn[e];
            return (
              i && i.indexOf(",") < 0 && (e = i),
              e in On && e !== ii && (t._gsap.x || Si(t, "x"))
                ? n && Dn === n
                  ? "scale" === e
                    ? Jn
                    : Qn
                  : (Dn = n || {}) && ("scale" === e ? ti : ei)
                : t.style && !N(t.style[e])
                ? Zn
                : ~e.indexOf("-")
                ? $n
                : an(t, e)
            );
          },
          core: { _removeProperty: _i, _getMatrix: Li },
        };
      (An.utils.checkPrefix = hi),
        (An.core.getStyleSaver = oi),
        (qi = gt(
          "x,y,z,scale,scaleX,scaleY,xPercent,yPercent" +
            "," +
            (Xi = "rotation,rotationX,rotationY,skewX,skewY") +
            ",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",
          function (t) {
            On[t] = 1;
          }
        )),
        gt(Xi, function (t) {
          (S.units[t] = "deg"), (Ri[t] = 1);
        }),
        (Vn[qi[13]] = "x,y,z,scale,scaleX,scaleY,xPercent,yPercent," + Xi),
        gt(
          "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",
          function (t) {
            var e = t.split(":");
            Vn[e[1]] = qi[e[0]];
          }
        ),
        gt(
          "x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",
          function (t) {
            S.units[t] = "px";
          }
        ),
        An.registerPlugin(ji);
      var Yi = An.registerPlugin(ji) || An;
      Yi.core.Tween;
    },
    627: (t, e, n) => {
      n.d(e, { fu: () => o });
      const i = 0.5 * (Math.sqrt(3) - 1),
        r = (3 - Math.sqrt(3)) / 6,
        a = (Math.sqrt(5), Math.sqrt(5), (t) => 0 | Math.floor(t)),
        s = new Float64Array([
          1, 1, -1, 1, 1, -1, -1, -1, 1, 0, -1, 0, 1, 0, -1, 0, 0, 1, 0, -1, 0,
          1, 0, -1,
        ]);
      function o(t = Math.random) {
        const e = (function (t) {
            const e = 512,
              n = new Uint8Array(e);
            for (let t = 0; t < 256; t++) n[t] = t;
            for (let e = 0; e < 255; e++) {
              const i = e + ~~(t() * (256 - e)),
                r = n[e];
              (n[e] = n[i]), (n[i] = r);
            }
            for (let t = 256; t < e; t++) n[t] = n[t - 256];
            return n;
          })(t),
          n = new Float64Array(e).map((t) => s[(t % 12) * 2]),
          o = new Float64Array(e).map((t) => s[(t % 12) * 2 + 1]);
        return function (t, s) {
          let l = 0,
            c = 0,
            u = 0;
          const h = (t + s) * i,
            d = a(t + h),
            p = a(s + h),
            f = (d + p) * r,
            m = t - (d - f),
            g = s - (p - f);
          let _, v;
          m > g ? ((_ = 1), (v = 0)) : ((_ = 0), (v = 1));
          const x = m - _ + r,
            y = g - v + r,
            M = m - 1 + 2 * r,
            S = g - 1 + 2 * r,
            E = 255 & d,
            b = 255 & p;
          let T = 0.5 - m * m - g * g;
          if (T >= 0) {
            const t = E + e[b];
            (T *= T), (l = T * T * (n[t] * m + o[t] * g));
          }
          let w = 0.5 - x * x - y * y;
          if (w >= 0) {
            const t = E + _ + e[b + v];
            (w *= w), (c = w * w * (n[t] * x + o[t] * y));
          }
          let A = 0.5 - M * M - S * S;
          if (A >= 0) {
            const t = E + 1 + e[b + 1];
            (A *= A), (u = A * A * (n[t] * M + o[t] * S));
          }
          return 70 * (l + c + u);
        };
      }
    },
    587: (t, e, n) => {
      n.d(e, { i: () => s });
      var i = n(128),
        r = n(591),
        a = n(813);
      class s extends a.B {
        constructor() {
          super(),
            (this.isCamera = !0),
            (this.type = "Camera"),
            (this.matrixWorldInverse = new r.k()),
            (this.projectionMatrix = new r.k()),
            (this.projectionMatrixInverse = new r.k()),
            (this.coordinateSystem = i.TdN);
        }
        copy(t, e) {
          return (
            super.copy(t, e),
            this.matrixWorldInverse.copy(t.matrixWorldInverse),
            this.projectionMatrix.copy(t.projectionMatrix),
            this.projectionMatrixInverse.copy(t.projectionMatrixInverse),
            (this.coordinateSystem = t.coordinateSystem),
            this
          );
        }
        getWorldDirection(t) {
          return super.getWorldDirection(t).negate();
        }
        updateMatrixWorld(t) {
          super.updateMatrixWorld(t),
            this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        updateWorldMatrix(t, e) {
          super.updateWorldMatrix(t, e),
            this.matrixWorldInverse.copy(this.matrixWorld).invert();
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
    },
    189: (t, e, n) => {
      n.d(e, { q: () => r });
      var i = n(587);
      class r extends i.i {
        constructor(t = -1, e = 1, n = 1, i = -1, r = 0.1, a = 2e3) {
          super(),
            (this.isOrthographicCamera = !0),
            (this.type = "OrthographicCamera"),
            (this.zoom = 1),
            (this.view = null),
            (this.left = t),
            (this.right = e),
            (this.top = n),
            (this.bottom = i),
            (this.near = r),
            (this.far = a),
            this.updateProjectionMatrix();
        }
        copy(t, e) {
          return (
            super.copy(t, e),
            (this.left = t.left),
            (this.right = t.right),
            (this.top = t.top),
            (this.bottom = t.bottom),
            (this.near = t.near),
            (this.far = t.far),
            (this.zoom = t.zoom),
            (this.view = null === t.view ? null : Object.assign({}, t.view)),
            this
          );
        }
        setViewOffset(t, e, n, i, r, a) {
          null === this.view &&
            (this.view = {
              enabled: !0,
              fullWidth: 1,
              fullHeight: 1,
              offsetX: 0,
              offsetY: 0,
              width: 1,
              height: 1,
            }),
            (this.view.enabled = !0),
            (this.view.fullWidth = t),
            (this.view.fullHeight = e),
            (this.view.offsetX = n),
            (this.view.offsetY = i),
            (this.view.width = r),
            (this.view.height = a),
            this.updateProjectionMatrix();
        }
        clearViewOffset() {
          null !== this.view && (this.view.enabled = !1),
            this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const t = (this.right - this.left) / (2 * this.zoom),
            e = (this.top - this.bottom) / (2 * this.zoom),
            n = (this.right + this.left) / 2,
            i = (this.top + this.bottom) / 2;
          let r = n - t,
            a = n + t,
            s = i + e,
            o = i - e;
          if (null !== this.view && this.view.enabled) {
            const t =
                (this.right - this.left) / this.view.fullWidth / this.zoom,
              e = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            (r += t * this.view.offsetX),
              (a = r + t * this.view.width),
              (s -= e * this.view.offsetY),
              (o = s - e * this.view.height);
          }
          this.projectionMatrix.makeOrthographic(
            r,
            a,
            s,
            o,
            this.near,
            this.far,
            this.coordinateSystem
          ),
            this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(t) {
          const e = super.toJSON(t);
          return (
            (e.object.zoom = this.zoom),
            (e.object.left = this.left),
            (e.object.right = this.right),
            (e.object.top = this.top),
            (e.object.bottom = this.bottom),
            (e.object.near = this.near),
            (e.object.far = this.far),
            null !== this.view &&
              (e.object.view = Object.assign({}, this.view)),
            e
          );
        }
      }
    },
    128: (t, e, n) => {
      n.d(e, {
        $EB: () => d,
        $Yl: () => O,
        $_I: () => vt,
        $ei: () => E,
        BXX: () => qt,
        B_h: () => ee,
        CMB: () => Nt,
        CVz: () => $t,
        CWW: () => ye,
        Cfg: () => mt,
        Dmk: () => Pt,
        EZo: () => m,
        EdD: () => _,
        FFZ: () => Ve,
        FV: () => tt,
        FXf: () => y,
        Fn: () => fe,
        GJx: () => ut,
        GWd: () => Dt,
        Gwm: () => W,
        H23: () => me,
        HIg: () => Ut,
        HO_: () => xe,
        HXV: () => Kt,
        IE4: () => Vt,
        Jnc: () => s,
        K52: () => X,
        KDk: () => Jt,
        KLL: () => Le,
        KRh: () => Y,
        Kef: () => _e,
        Kwu: () => g,
        Kzv: () => It,
        LAk: () => nt,
        LiQ: () => A,
        Mjd: () => Q,
        N5j: () => Se,
        NTi: () => f,
        Nt7: () => L,
        Nz6: () => Wt,
        OUM: () => xt,
        Om: () => ct,
        OuU: () => C,
        QP0: () => o,
        Qrf: () => re,
        RQf: () => Tt,
        Riy: () => Qt,
        Rkk: () => Me,
        RrE: () => N,
        RyA: () => c,
        S$4: () => pe,
        TdN: () => qe,
        TiK: () => ze,
        TkQ: () => Ht,
        U3G: () => V,
        UTZ: () => rt,
        V3x: () => Ct,
        V5c: () => Re,
        VT0: () => Bt,
        VVr: () => Ie,
        Vb5: () => a,
        VxR: () => Pe,
        W9U: () => ge,
        WNZ: () => r,
        Wdf: () => Xe,
        Wew: () => At,
        Wk7: () => l,
        XG_: () => ve,
        XIg: () => p,
        XrR: () => K,
        Yuy: () => Et,
        ZQM: () => zt,
        Zr2: () => Ae,
        _QJ: () => oe,
        a5J: () => se,
        aEY: () => D,
        aJ8: () => it,
        agE: () => We,
        amv: () => Oe,
        bC7: () => ue,
        bCz: () => v,
        bI3: () => Ee,
        bkx: () => bt,
        brA: () => H,
        bw0: () => q,
        c90: () => Gt,
        cHt: () => St,
        caT: () => j,
        czI: () => ne,
        dcC: () => Ft,
        e0p: () => F,
        eHc: () => z,
        eoi: () => ke,
        er$: () => we,
        f4X: () => w,
        fBL: () => Mt,
        g7M: () => et,
        gJ2: () => Rt,
        gO9: () => x,
        gWB: () => Ge,
        ghU: () => ht,
        hB5: () => u,
        hdd: () => P,
        hgQ: () => I,
        hsX: () => h,
        hxR: () => pt,
        hy7: () => at,
        i7u: () => je,
        ie2: () => R,
        ix0: () => wt,
        jR7: () => Xt,
        jf0: () => Te,
        jzd: () => He,
        k6Q: () => jt,
        k6q: () => gt,
        kO0: () => Be,
        kRr: () => _t,
        kTW: () => dt,
        kTp: () => Yt,
        kyO: () => $,
        lGu: () => k,
        lyL: () => ce,
        nNL: () => J,
        nST: () => M,
        ojh: () => b,
        ojs: () => de,
        ov9: () => B,
        pBf: () => Zt,
        pHI: () => ft,
        paN: () => kt,
        psI: () => ae,
        qIQ: () => Ce,
        qa3: () => te,
        qad: () => T,
        rSH: () => ie,
        sKt: () => Ne,
        sPf: () => i,
        tJf: () => yt,
        uB5: () => le,
        uV5: () => lt,
        vim: () => Fe,
        vyJ: () => be,
        wfO: () => ot,
        wn6: () => U,
        wqq: () => De,
        wrO: () => Lt,
        xFO: () => st,
        xSv: () => G,
        y3Z: () => he,
        y_p: () => Z,
        z5: () => Ue,
        zdS: () => Ot,
        znC: () => S,
      });
      const i = "165",
        r = 0,
        a = 1,
        s = 2,
        o = 1,
        l = 2,
        c = 3,
        u = 0,
        h = 1,
        d = 2,
        p = 0,
        f = 1,
        m = 2,
        g = 3,
        _ = 4,
        v = 5,
        x = 100,
        y = 101,
        M = 102,
        S = 103,
        E = 104,
        b = 200,
        T = 201,
        w = 202,
        A = 203,
        R = 204,
        C = 205,
        P = 206,
        L = 207,
        U = 208,
        D = 209,
        I = 210,
        N = 211,
        O = 212,
        F = 213,
        B = 214,
        z = 0,
        k = 1,
        H = 2,
        G = 3,
        V = 4,
        W = 5,
        X = 6,
        q = 7,
        j = 0,
        Y = 1,
        K = 2,
        Z = 0,
        $ = 1,
        Q = 2,
        J = 3,
        tt = 4,
        et = 5,
        nt = 6,
        it = 7,
        rt = 300,
        at = 301,
        st = 302,
        ot = 303,
        lt = 304,
        ct = 306,
        ut = 1e3,
        ht = 1001,
        dt = 1002,
        pt = 1003,
        ft = 1004,
        mt = 1005,
        gt = 1006,
        _t = 1007,
        vt = 1008,
        xt = 1009,
        yt = 1010,
        Mt = 1011,
        St = 1012,
        Et = 1013,
        bt = 1014,
        Tt = 1015,
        wt = 1016,
        At = 1017,
        Rt = 1018,
        Ct = 1020,
        Pt = 35902,
        Lt = 1021,
        Ut = 1022,
        Dt = 1023,
        It = 1024,
        Nt = 1025,
        Ot = 1026,
        Ft = 1027,
        Bt = 1028,
        zt = 1029,
        kt = 1030,
        Ht = 1031,
        Gt = 1033,
        Vt = 33776,
        Wt = 33777,
        Xt = 33778,
        qt = 33779,
        jt = 35840,
        Yt = 35841,
        Kt = 35842,
        Zt = 35843,
        $t = 36196,
        Qt = 37492,
        Jt = 37496,
        te = 37808,
        ee = 37809,
        ne = 37810,
        ie = 37811,
        re = 37812,
        ae = 37813,
        se = 37814,
        oe = 37815,
        le = 37816,
        ce = 37817,
        ue = 37818,
        he = 37819,
        de = 37820,
        pe = 37821,
        fe = 36492,
        me = 36494,
        ge = 36495,
        _e = 36283,
        ve = 36284,
        xe = 36285,
        ye = 36286,
        Me = 3200,
        Se = 3201,
        Ee = 0,
        be = 1,
        Te = "",
        we = "srgb",
        Ae = "srgb-linear",
        Re = "display-p3",
        Ce = "display-p3-linear",
        Pe = "linear",
        Le = "srgb",
        Ue = "rec709",
        De = "p3",
        Ie = 7680,
        Ne = 519,
        Oe = 512,
        Fe = 513,
        Be = 514,
        ze = 515,
        ke = 516,
        He = 517,
        Ge = 518,
        Ve = 519,
        We = 35044,
        Xe = "300 es",
        qe = 2e3,
        je = 2001;
    },
    642: (t, e, n) => {
      n.d(e, { TH: () => u, qt: () => p, A$: () => h, MW: () => d });
      var i = n(499),
        r = n(279),
        a = n(823),
        s = n(128),
        o = n(108);
      const l = new i.P(),
        c = new r.I();
      class u {
        constructor(t, e, n = !1) {
          if (Array.isArray(t))
            throw new TypeError(
              "THREE.BufferAttribute: array should be a Typed Array."
            );
          (this.isBufferAttribute = !0),
            (this.name = ""),
            (this.array = t),
            (this.itemSize = e),
            (this.count = void 0 !== t ? t.length / e : 0),
            (this.normalized = n),
            (this.usage = s.agE),
            (this._updateRange = { offset: 0, count: -1 }),
            (this.updateRanges = []),
            (this.gpuType = s.RQf),
            (this.version = 0);
        }
        onUploadCallback() {}
        set needsUpdate(t) {
          !0 === t && this.version++;
        }
        get updateRange() {
          return (
            (0, o.mc)(
              "THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."
            ),
            this._updateRange
          );
        }
        setUsage(t) {
          return (this.usage = t), this;
        }
        addUpdateRange(t, e) {
          this.updateRanges.push({ start: t, count: e });
        }
        clearUpdateRanges() {
          this.updateRanges.length = 0;
        }
        copy(t) {
          return (
            (this.name = t.name),
            (this.array = new t.array.constructor(t.array)),
            (this.itemSize = t.itemSize),
            (this.count = t.count),
            (this.normalized = t.normalized),
            (this.usage = t.usage),
            (this.gpuType = t.gpuType),
            this
          );
        }
        copyAt(t, e, n) {
          (t *= this.itemSize), (n *= e.itemSize);
          for (let i = 0, r = this.itemSize; i < r; i++)
            this.array[t + i] = e.array[n + i];
          return this;
        }
        copyArray(t) {
          return this.array.set(t), this;
        }
        applyMatrix3(t) {
          if (2 === this.itemSize)
            for (let e = 0, n = this.count; e < n; e++)
              c.fromBufferAttribute(this, e),
                c.applyMatrix3(t),
                this.setXY(e, c.x, c.y);
          else if (3 === this.itemSize)
            for (let e = 0, n = this.count; e < n; e++)
              l.fromBufferAttribute(this, e),
                l.applyMatrix3(t),
                this.setXYZ(e, l.x, l.y, l.z);
          return this;
        }
        applyMatrix4(t) {
          for (let e = 0, n = this.count; e < n; e++)
            l.fromBufferAttribute(this, e),
              l.applyMatrix4(t),
              this.setXYZ(e, l.x, l.y, l.z);
          return this;
        }
        applyNormalMatrix(t) {
          for (let e = 0, n = this.count; e < n; e++)
            l.fromBufferAttribute(this, e),
              l.applyNormalMatrix(t),
              this.setXYZ(e, l.x, l.y, l.z);
          return this;
        }
        transformDirection(t) {
          for (let e = 0, n = this.count; e < n; e++)
            l.fromBufferAttribute(this, e),
              l.transformDirection(t),
              this.setXYZ(e, l.x, l.y, l.z);
          return this;
        }
        set(t, e = 0) {
          return this.array.set(t, e), this;
        }
        getComponent(t, e) {
          let n = this.array[t * this.itemSize + e];
          return this.normalized && (n = (0, a.NU)(n, this.array)), n;
        }
        setComponent(t, e, n) {
          return (
            this.normalized && (n = (0, a.S8)(n, this.array)),
            (this.array[t * this.itemSize + e] = n),
            this
          );
        }
        getX(t) {
          let e = this.array[t * this.itemSize];
          return this.normalized && (e = (0, a.NU)(e, this.array)), e;
        }
        setX(t, e) {
          return (
            this.normalized && (e = (0, a.S8)(e, this.array)),
            (this.array[t * this.itemSize] = e),
            this
          );
        }
        getY(t) {
          let e = this.array[t * this.itemSize + 1];
          return this.normalized && (e = (0, a.NU)(e, this.array)), e;
        }
        setY(t, e) {
          return (
            this.normalized && (e = (0, a.S8)(e, this.array)),
            (this.array[t * this.itemSize + 1] = e),
            this
          );
        }
        getZ(t) {
          let e = this.array[t * this.itemSize + 2];
          return this.normalized && (e = (0, a.NU)(e, this.array)), e;
        }
        setZ(t, e) {
          return (
            this.normalized && (e = (0, a.S8)(e, this.array)),
            (this.array[t * this.itemSize + 2] = e),
            this
          );
        }
        getW(t) {
          let e = this.array[t * this.itemSize + 3];
          return this.normalized && (e = (0, a.NU)(e, this.array)), e;
        }
        setW(t, e) {
          return (
            this.normalized && (e = (0, a.S8)(e, this.array)),
            (this.array[t * this.itemSize + 3] = e),
            this
          );
        }
        setXY(t, e, n) {
          return (
            (t *= this.itemSize),
            this.normalized &&
              ((e = (0, a.S8)(e, this.array)), (n = (0, a.S8)(n, this.array))),
            (this.array[t + 0] = e),
            (this.array[t + 1] = n),
            this
          );
        }
        setXYZ(t, e, n, i) {
          return (
            (t *= this.itemSize),
            this.normalized &&
              ((e = (0, a.S8)(e, this.array)),
              (n = (0, a.S8)(n, this.array)),
              (i = (0, a.S8)(i, this.array))),
            (this.array[t + 0] = e),
            (this.array[t + 1] = n),
            (this.array[t + 2] = i),
            this
          );
        }
        setXYZW(t, e, n, i, r) {
          return (
            (t *= this.itemSize),
            this.normalized &&
              ((e = (0, a.S8)(e, this.array)),
              (n = (0, a.S8)(n, this.array)),
              (i = (0, a.S8)(i, this.array)),
              (r = (0, a.S8)(r, this.array))),
            (this.array[t + 0] = e),
            (this.array[t + 1] = n),
            (this.array[t + 2] = i),
            (this.array[t + 3] = r),
            this
          );
        }
        onUpload(t) {
          return (this.onUploadCallback = t), this;
        }
        clone() {
          return new this.constructor(this.array, this.itemSize).copy(this);
        }
        toJSON() {
          const t = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.from(this.array),
            normalized: this.normalized,
          };
          return (
            "" !== this.name && (t.name = this.name),
            this.usage !== s.agE && (t.usage = this.usage),
            t
          );
        }
      }
      class h extends u {
        constructor(t, e, n) {
          super(new Uint16Array(t), e, n);
        }
      }
      class d extends u {
        constructor(t, e, n) {
          super(new Uint32Array(t), e, n);
        }
      }
      class p extends u {
        constructor(t, e, n) {
          super(new Float32Array(t), e, n);
        }
      }
    },
    231: (t, e, n) => {
      n.d(e, { L: () => M });
      var i = n(499),
        r = n(279),
        a = n(976),
        s = n(168),
        o = n(642),
        l = n(351),
        c = n(813),
        u = n(591),
        h = n(326),
        d = n(823),
        p = n(108);
      let f = 0;
      const m = new u.k(),
        g = new c.B(),
        _ = new i.P(),
        v = new a.N(),
        x = new a.N(),
        y = new i.P();
      class M extends s.Q {
        constructor() {
          super(),
            (this.isBufferGeometry = !0),
            Object.defineProperty(this, "id", { value: f++ }),
            (this.uuid = d.lk()),
            (this.name = ""),
            (this.type = "BufferGeometry"),
            (this.index = null),
            (this.attributes = {}),
            (this.morphAttributes = {}),
            (this.morphTargetsRelative = !1),
            (this.groups = []),
            (this.boundingBox = null),
            (this.boundingSphere = null),
            (this.drawRange = { start: 0, count: 1 / 0 }),
            (this.userData = {});
        }
        getIndex() {
          return this.index;
        }
        setIndex(t) {
          return (
            Array.isArray(t)
              ? (this.index = new ((0, p.AQ)(t) ? o.MW : o.A$)(t, 1))
              : (this.index = t),
            this
          );
        }
        getAttribute(t) {
          return this.attributes[t];
        }
        setAttribute(t, e) {
          return (this.attributes[t] = e), this;
        }
        deleteAttribute(t) {
          return delete this.attributes[t], this;
        }
        hasAttribute(t) {
          return void 0 !== this.attributes[t];
        }
        addGroup(t, e, n = 0) {
          this.groups.push({ start: t, count: e, materialIndex: n });
        }
        clearGroups() {
          this.groups = [];
        }
        setDrawRange(t, e) {
          (this.drawRange.start = t), (this.drawRange.count = e);
        }
        applyMatrix4(t) {
          const e = this.attributes.position;
          void 0 !== e && (e.applyMatrix4(t), (e.needsUpdate = !0));
          const n = this.attributes.normal;
          if (void 0 !== n) {
            const e = new h.d().getNormalMatrix(t);
            n.applyNormalMatrix(e), (n.needsUpdate = !0);
          }
          const i = this.attributes.tangent;
          return (
            void 0 !== i && (i.transformDirection(t), (i.needsUpdate = !0)),
            null !== this.boundingBox && this.computeBoundingBox(),
            null !== this.boundingSphere && this.computeBoundingSphere(),
            this
          );
        }
        applyQuaternion(t) {
          return m.makeRotationFromQuaternion(t), this.applyMatrix4(m), this;
        }
        rotateX(t) {
          return m.makeRotationX(t), this.applyMatrix4(m), this;
        }
        rotateY(t) {
          return m.makeRotationY(t), this.applyMatrix4(m), this;
        }
        rotateZ(t) {
          return m.makeRotationZ(t), this.applyMatrix4(m), this;
        }
        translate(t, e, n) {
          return m.makeTranslation(t, e, n), this.applyMatrix4(m), this;
        }
        scale(t, e, n) {
          return m.makeScale(t, e, n), this.applyMatrix4(m), this;
        }
        lookAt(t) {
          return (
            g.lookAt(t), g.updateMatrix(), this.applyMatrix4(g.matrix), this
          );
        }
        center() {
          return (
            this.computeBoundingBox(),
            this.boundingBox.getCenter(_).negate(),
            this.translate(_.x, _.y, _.z),
            this
          );
        }
        setFromPoints(t) {
          const e = [];
          for (let n = 0, i = t.length; n < i; n++) {
            const i = t[n];
            e.push(i.x, i.y, i.z || 0);
          }
          return this.setAttribute("position", new o.qt(e, 3)), this;
        }
        computeBoundingBox() {
          null === this.boundingBox && (this.boundingBox = new a.N());
          const t = this.attributes.position,
            e = this.morphAttributes.position;
          if (t && t.isGLBufferAttribute)
            return (
              console.error(
                "THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",
                this
              ),
              void this.boundingBox.set(
                new i.P(-1 / 0, -1 / 0, -1 / 0),
                new i.P(1 / 0, 1 / 0, 1 / 0)
              )
            );
          if (void 0 !== t) {
            if ((this.boundingBox.setFromBufferAttribute(t), e))
              for (let t = 0, n = e.length; t < n; t++) {
                const n = e[t];
                v.setFromBufferAttribute(n),
                  this.morphTargetsRelative
                    ? (y.addVectors(this.boundingBox.min, v.min),
                      this.boundingBox.expandByPoint(y),
                      y.addVectors(this.boundingBox.max, v.max),
                      this.boundingBox.expandByPoint(y))
                    : (this.boundingBox.expandByPoint(v.min),
                      this.boundingBox.expandByPoint(v.max));
              }
          } else this.boundingBox.makeEmpty();
          (isNaN(this.boundingBox.min.x) ||
            isNaN(this.boundingBox.min.y) ||
            isNaN(this.boundingBox.min.z)) &&
            console.error(
              'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
              this
            );
        }
        computeBoundingSphere() {
          null === this.boundingSphere && (this.boundingSphere = new l.i());
          const t = this.attributes.position,
            e = this.morphAttributes.position;
          if (t && t.isGLBufferAttribute)
            return (
              console.error(
                "THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",
                this
              ),
              void this.boundingSphere.set(new i.P(), 1 / 0)
            );
          if (t) {
            const n = this.boundingSphere.center;
            if ((v.setFromBufferAttribute(t), e))
              for (let t = 0, n = e.length; t < n; t++) {
                const n = e[t];
                x.setFromBufferAttribute(n),
                  this.morphTargetsRelative
                    ? (y.addVectors(v.min, x.min),
                      v.expandByPoint(y),
                      y.addVectors(v.max, x.max),
                      v.expandByPoint(y))
                    : (v.expandByPoint(x.min), v.expandByPoint(x.max));
              }
            v.getCenter(n);
            let i = 0;
            for (let e = 0, r = t.count; e < r; e++)
              y.fromBufferAttribute(t, e),
                (i = Math.max(i, n.distanceToSquared(y)));
            if (e)
              for (let r = 0, a = e.length; r < a; r++) {
                const a = e[r],
                  s = this.morphTargetsRelative;
                for (let e = 0, r = a.count; e < r; e++)
                  y.fromBufferAttribute(a, e),
                    s && (_.fromBufferAttribute(t, e), y.add(_)),
                    (i = Math.max(i, n.distanceToSquared(y)));
              }
            (this.boundingSphere.radius = Math.sqrt(i)),
              isNaN(this.boundingSphere.radius) &&
                console.error(
                  'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
                  this
                );
          }
        }
        computeTangents() {
          const t = this.index,
            e = this.attributes;
          if (
            null === t ||
            void 0 === e.position ||
            void 0 === e.normal ||
            void 0 === e.uv
          )
            return void console.error(
              "THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)"
            );
          const n = e.position,
            a = e.normal,
            s = e.uv;
          !1 === this.hasAttribute("tangent") &&
            this.setAttribute(
              "tangent",
              new o.TH(new Float32Array(4 * n.count), 4)
            );
          const l = this.getAttribute("tangent"),
            c = [],
            u = [];
          for (let t = 0; t < n.count; t++)
            (c[t] = new i.P()), (u[t] = new i.P());
          const h = new i.P(),
            d = new i.P(),
            p = new i.P(),
            f = new r.I(),
            m = new r.I(),
            g = new r.I(),
            _ = new i.P(),
            v = new i.P();
          function x(t, e, i) {
            h.fromBufferAttribute(n, t),
              d.fromBufferAttribute(n, e),
              p.fromBufferAttribute(n, i),
              f.fromBufferAttribute(s, t),
              m.fromBufferAttribute(s, e),
              g.fromBufferAttribute(s, i),
              d.sub(h),
              p.sub(h),
              m.sub(f),
              g.sub(f);
            const r = 1 / (m.x * g.y - g.x * m.y);
            isFinite(r) &&
              (_.copy(d)
                .multiplyScalar(g.y)
                .addScaledVector(p, -m.y)
                .multiplyScalar(r),
              v
                .copy(p)
                .multiplyScalar(m.x)
                .addScaledVector(d, -g.x)
                .multiplyScalar(r),
              c[t].add(_),
              c[e].add(_),
              c[i].add(_),
              u[t].add(v),
              u[e].add(v),
              u[i].add(v));
          }
          let y = this.groups;
          0 === y.length && (y = [{ start: 0, count: t.count }]);
          for (let e = 0, n = y.length; e < n; ++e) {
            const n = y[e],
              i = n.start;
            for (let e = i, r = i + n.count; e < r; e += 3)
              x(t.getX(e + 0), t.getX(e + 1), t.getX(e + 2));
          }
          const M = new i.P(),
            S = new i.P(),
            E = new i.P(),
            b = new i.P();
          function T(t) {
            E.fromBufferAttribute(a, t), b.copy(E);
            const e = c[t];
            M.copy(e),
              M.sub(E.multiplyScalar(E.dot(e))).normalize(),
              S.crossVectors(b, e);
            const n = S.dot(u[t]) < 0 ? -1 : 1;
            l.setXYZW(t, M.x, M.y, M.z, n);
          }
          for (let e = 0, n = y.length; e < n; ++e) {
            const n = y[e],
              i = n.start;
            for (let e = i, r = i + n.count; e < r; e += 3)
              T(t.getX(e + 0)), T(t.getX(e + 1)), T(t.getX(e + 2));
          }
        }
        computeVertexNormals() {
          const t = this.index,
            e = this.getAttribute("position");
          if (void 0 !== e) {
            let n = this.getAttribute("normal");
            if (void 0 === n)
              (n = new o.TH(new Float32Array(3 * e.count), 3)),
                this.setAttribute("normal", n);
            else for (let t = 0, e = n.count; t < e; t++) n.setXYZ(t, 0, 0, 0);
            const r = new i.P(),
              a = new i.P(),
              s = new i.P(),
              l = new i.P(),
              c = new i.P(),
              u = new i.P(),
              h = new i.P(),
              d = new i.P();
            if (t)
              for (let i = 0, o = t.count; i < o; i += 3) {
                const o = t.getX(i + 0),
                  p = t.getX(i + 1),
                  f = t.getX(i + 2);
                r.fromBufferAttribute(e, o),
                  a.fromBufferAttribute(e, p),
                  s.fromBufferAttribute(e, f),
                  h.subVectors(s, a),
                  d.subVectors(r, a),
                  h.cross(d),
                  l.fromBufferAttribute(n, o),
                  c.fromBufferAttribute(n, p),
                  u.fromBufferAttribute(n, f),
                  l.add(h),
                  c.add(h),
                  u.add(h),
                  n.setXYZ(o, l.x, l.y, l.z),
                  n.setXYZ(p, c.x, c.y, c.z),
                  n.setXYZ(f, u.x, u.y, u.z);
              }
            else
              for (let t = 0, i = e.count; t < i; t += 3)
                r.fromBufferAttribute(e, t + 0),
                  a.fromBufferAttribute(e, t + 1),
                  s.fromBufferAttribute(e, t + 2),
                  h.subVectors(s, a),
                  d.subVectors(r, a),
                  h.cross(d),
                  n.setXYZ(t + 0, h.x, h.y, h.z),
                  n.setXYZ(t + 1, h.x, h.y, h.z),
                  n.setXYZ(t + 2, h.x, h.y, h.z);
            this.normalizeNormals(), (n.needsUpdate = !0);
          }
        }
        normalizeNormals() {
          const t = this.attributes.normal;
          for (let e = 0, n = t.count; e < n; e++)
            y.fromBufferAttribute(t, e),
              y.normalize(),
              t.setXYZ(e, y.x, y.y, y.z);
        }
        toNonIndexed() {
          function t(t, e) {
            const n = t.array,
              i = t.itemSize,
              r = t.normalized,
              a = new n.constructor(e.length * i);
            let s = 0,
              l = 0;
            for (let r = 0, o = e.length; r < o; r++) {
              s = t.isInterleavedBufferAttribute
                ? e[r] * t.data.stride + t.offset
                : e[r] * i;
              for (let t = 0; t < i; t++) a[l++] = n[s++];
            }
            return new o.TH(a, i, r);
          }
          if (null === this.index)
            return (
              console.warn(
                "THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."
              ),
              this
            );
          const e = new M(),
            n = this.index.array,
            i = this.attributes;
          for (const r in i) {
            const a = t(i[r], n);
            e.setAttribute(r, a);
          }
          const r = this.morphAttributes;
          for (const i in r) {
            const a = [],
              s = r[i];
            for (let e = 0, i = s.length; e < i; e++) {
              const i = t(s[e], n);
              a.push(i);
            }
            e.morphAttributes[i] = a;
          }
          e.morphTargetsRelative = this.morphTargetsRelative;
          const a = this.groups;
          for (let t = 0, n = a.length; t < n; t++) {
            const n = a[t];
            e.addGroup(n.start, n.count, n.materialIndex);
          }
          return e;
        }
        toJSON() {
          const t = {
            metadata: {
              version: 4.6,
              type: "BufferGeometry",
              generator: "BufferGeometry.toJSON",
            },
          };
          if (
            ((t.uuid = this.uuid),
            (t.type = this.type),
            "" !== this.name && (t.name = this.name),
            Object.keys(this.userData).length > 0 &&
              (t.userData = this.userData),
            void 0 !== this.parameters)
          ) {
            const e = this.parameters;
            for (const n in e) void 0 !== e[n] && (t[n] = e[n]);
            return t;
          }
          t.data = { attributes: {} };
          const e = this.index;
          null !== e &&
            (t.data.index = {
              type: e.array.constructor.name,
              array: Array.prototype.slice.call(e.array),
            });
          const n = this.attributes;
          for (const e in n) {
            const i = n[e];
            t.data.attributes[e] = i.toJSON(t.data);
          }
          const i = {};
          let r = !1;
          for (const e in this.morphAttributes) {
            const n = this.morphAttributes[e],
              a = [];
            for (let e = 0, i = n.length; e < i; e++) {
              const i = n[e];
              a.push(i.toJSON(t.data));
            }
            a.length > 0 && ((i[e] = a), (r = !0));
          }
          r &&
            ((t.data.morphAttributes = i),
            (t.data.morphTargetsRelative = this.morphTargetsRelative));
          const a = this.groups;
          a.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(a)));
          const s = this.boundingSphere;
          return (
            null !== s &&
              (t.data.boundingSphere = {
                center: s.center.toArray(),
                radius: s.radius,
              }),
            t
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(t) {
          (this.index = null),
            (this.attributes = {}),
            (this.morphAttributes = {}),
            (this.groups = []),
            (this.boundingBox = null),
            (this.boundingSphere = null);
          const e = {};
          this.name = t.name;
          const n = t.index;
          null !== n && this.setIndex(n.clone(e));
          const i = t.attributes;
          for (const t in i) {
            const n = i[t];
            this.setAttribute(t, n.clone(e));
          }
          const r = t.morphAttributes;
          for (const t in r) {
            const n = [],
              i = r[t];
            for (let t = 0, r = i.length; t < r; t++) n.push(i[t].clone(e));
            this.morphAttributes[t] = n;
          }
          this.morphTargetsRelative = t.morphTargetsRelative;
          const a = t.groups;
          for (let t = 0, e = a.length; t < e; t++) {
            const e = a[t];
            this.addGroup(e.start, e.count, e.materialIndex);
          }
          const s = t.boundingBox;
          null !== s && (this.boundingBox = s.clone());
          const o = t.boundingSphere;
          return (
            null !== o && (this.boundingSphere = o.clone()),
            (this.drawRange.start = t.drawRange.start),
            (this.drawRange.count = t.drawRange.count),
            (this.userData = t.userData),
            this
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
      }
    },
    168: (t, e, n) => {
      n.d(e, { Q: () => i });
      class i {
        addEventListener(t, e) {
          void 0 === this._listeners && (this._listeners = {});
          const n = this._listeners;
          void 0 === n[t] && (n[t] = []),
            -1 === n[t].indexOf(e) && n[t].push(e);
        }
        hasEventListener(t, e) {
          if (void 0 === this._listeners) return !1;
          const n = this._listeners;
          return void 0 !== n[t] && -1 !== n[t].indexOf(e);
        }
        removeEventListener(t, e) {
          if (void 0 === this._listeners) return;
          const n = this._listeners[t];
          if (void 0 !== n) {
            const t = n.indexOf(e);
            -1 !== t && n.splice(t, 1);
          }
        }
        dispatchEvent(t) {
          if (void 0 === this._listeners) return;
          const e = this._listeners[t.type];
          if (void 0 !== e) {
            t.target = this;
            const n = e.slice(0);
            for (let e = 0, i = n.length; e < i; e++) n[e].call(this, t);
            t.target = null;
          }
        }
      }
    },
    415: (t, e, n) => {
      n.d(e, { z: () => i });
      class i {
        constructor() {
          this.mask = 1;
        }
        set(t) {
          this.mask = (1 << t) >>> 0;
        }
        enable(t) {
          this.mask |= 1 << t;
        }
        enableAll() {
          this.mask = -1;
        }
        toggle(t) {
          this.mask ^= 1 << t;
        }
        disable(t) {
          this.mask &= ~(1 << t);
        }
        disableAll() {
          this.mask = 0;
        }
        test(t) {
          return !!(this.mask & t.mask);
        }
        isEnabled(t) {
          return !!(this.mask & (1 << t));
        }
      }
    },
    813: (t, e, n) => {
      n.d(e, { B: () => w });
      var i = n(438),
        r = n(499),
        a = n(591),
        s = n(168),
        o = n(781),
        l = n(415),
        c = n(326),
        u = n(823);
      let h = 0;
      const d = new r.P(),
        p = new i.P(),
        f = new a.k(),
        m = new r.P(),
        g = new r.P(),
        _ = new r.P(),
        v = new i.P(),
        x = new r.P(1, 0, 0),
        y = new r.P(0, 1, 0),
        M = new r.P(0, 0, 1),
        S = { type: "added" },
        E = { type: "removed" },
        b = { type: "childadded", child: null },
        T = { type: "childremoved", child: null };
      class w extends s.Q {
        constructor() {
          super(),
            (this.isObject3D = !0),
            Object.defineProperty(this, "id", { value: h++ }),
            (this.uuid = u.lk()),
            (this.name = ""),
            (this.type = "Object3D"),
            (this.parent = null),
            (this.children = []),
            (this.up = w.DEFAULT_UP.clone());
          const t = new r.P(),
            e = new o.O(),
            n = new i.P(),
            s = new r.P(1, 1, 1);
          e._onChange(function () {
            n.setFromEuler(e, !1);
          }),
            n._onChange(function () {
              e.setFromQuaternion(n, void 0, !1);
            }),
            Object.defineProperties(this, {
              position: { configurable: !0, enumerable: !0, value: t },
              rotation: { configurable: !0, enumerable: !0, value: e },
              quaternion: { configurable: !0, enumerable: !0, value: n },
              scale: { configurable: !0, enumerable: !0, value: s },
              modelViewMatrix: { value: new a.k() },
              normalMatrix: { value: new c.d() },
            }),
            (this.matrix = new a.k()),
            (this.matrixWorld = new a.k()),
            (this.matrixAutoUpdate = w.DEFAULT_MATRIX_AUTO_UPDATE),
            (this.matrixWorldAutoUpdate = w.DEFAULT_MATRIX_WORLD_AUTO_UPDATE),
            (this.matrixWorldNeedsUpdate = !1),
            (this.layers = new l.z()),
            (this.visible = !0),
            (this.castShadow = !1),
            (this.receiveShadow = !1),
            (this.frustumCulled = !0),
            (this.renderOrder = 0),
            (this.animations = []),
            (this.userData = {});
        }
        onBeforeShadow() {}
        onAfterShadow() {}
        onBeforeRender() {}
        onAfterRender() {}
        applyMatrix4(t) {
          this.matrixAutoUpdate && this.updateMatrix(),
            this.matrix.premultiply(t),
            this.matrix.decompose(this.position, this.quaternion, this.scale);
        }
        applyQuaternion(t) {
          return this.quaternion.premultiply(t), this;
        }
        setRotationFromAxisAngle(t, e) {
          this.quaternion.setFromAxisAngle(t, e);
        }
        setRotationFromEuler(t) {
          this.quaternion.setFromEuler(t, !0);
        }
        setRotationFromMatrix(t) {
          this.quaternion.setFromRotationMatrix(t);
        }
        setRotationFromQuaternion(t) {
          this.quaternion.copy(t);
        }
        rotateOnAxis(t, e) {
          return p.setFromAxisAngle(t, e), this.quaternion.multiply(p), this;
        }
        rotateOnWorldAxis(t, e) {
          return p.setFromAxisAngle(t, e), this.quaternion.premultiply(p), this;
        }
        rotateX(t) {
          return this.rotateOnAxis(x, t);
        }
        rotateY(t) {
          return this.rotateOnAxis(y, t);
        }
        rotateZ(t) {
          return this.rotateOnAxis(M, t);
        }
        translateOnAxis(t, e) {
          return (
            d.copy(t).applyQuaternion(this.quaternion),
            this.position.add(d.multiplyScalar(e)),
            this
          );
        }
        translateX(t) {
          return this.translateOnAxis(x, t);
        }
        translateY(t) {
          return this.translateOnAxis(y, t);
        }
        translateZ(t) {
          return this.translateOnAxis(M, t);
        }
        localToWorld(t) {
          return (
            this.updateWorldMatrix(!0, !1), t.applyMatrix4(this.matrixWorld)
          );
        }
        worldToLocal(t) {
          return (
            this.updateWorldMatrix(!0, !1),
            t.applyMatrix4(f.copy(this.matrixWorld).invert())
          );
        }
        lookAt(t, e, n) {
          t.isVector3 ? m.copy(t) : m.set(t, e, n);
          const i = this.parent;
          this.updateWorldMatrix(!0, !1),
            g.setFromMatrixPosition(this.matrixWorld),
            this.isCamera || this.isLight
              ? f.lookAt(g, m, this.up)
              : f.lookAt(m, g, this.up),
            this.quaternion.setFromRotationMatrix(f),
            i &&
              (f.extractRotation(i.matrixWorld),
              p.setFromRotationMatrix(f),
              this.quaternion.premultiply(p.invert()));
        }
        add(t) {
          if (arguments.length > 1) {
            for (let t = 0; t < arguments.length; t++) this.add(arguments[t]);
            return this;
          }
          return t === this
            ? (console.error(
                "THREE.Object3D.add: object can't be added as a child of itself.",
                t
              ),
              this)
            : (t && t.isObject3D
                ? (t.removeFromParent(),
                  (t.parent = this),
                  this.children.push(t),
                  t.dispatchEvent(S),
                  (b.child = t),
                  this.dispatchEvent(b),
                  (b.child = null))
                : console.error(
                    "THREE.Object3D.add: object not an instance of THREE.Object3D.",
                    t
                  ),
              this);
        }
        remove(t) {
          if (arguments.length > 1) {
            for (let t = 0; t < arguments.length; t++)
              this.remove(arguments[t]);
            return this;
          }
          const e = this.children.indexOf(t);
          return (
            -1 !== e &&
              ((t.parent = null),
              this.children.splice(e, 1),
              t.dispatchEvent(E),
              (T.child = t),
              this.dispatchEvent(T),
              (T.child = null)),
            this
          );
        }
        removeFromParent() {
          const t = this.parent;
          return null !== t && t.remove(this), this;
        }
        clear() {
          return this.remove(...this.children);
        }
        attach(t) {
          return (
            this.updateWorldMatrix(!0, !1),
            f.copy(this.matrixWorld).invert(),
            null !== t.parent &&
              (t.parent.updateWorldMatrix(!0, !1),
              f.multiply(t.parent.matrixWorld)),
            t.applyMatrix4(f),
            t.removeFromParent(),
            (t.parent = this),
            this.children.push(t),
            t.updateWorldMatrix(!1, !0),
            t.dispatchEvent(S),
            (b.child = t),
            this.dispatchEvent(b),
            (b.child = null),
            this
          );
        }
        getObjectById(t) {
          return this.getObjectByProperty("id", t);
        }
        getObjectByName(t) {
          return this.getObjectByProperty("name", t);
        }
        getObjectByProperty(t, e) {
          if (this[t] === e) return this;
          for (let n = 0, i = this.children.length; n < i; n++) {
            const i = this.children[n].getObjectByProperty(t, e);
            if (void 0 !== i) return i;
          }
        }
        getObjectsByProperty(t, e, n = []) {
          this[t] === e && n.push(this);
          const i = this.children;
          for (let r = 0, a = i.length; r < a; r++)
            i[r].getObjectsByProperty(t, e, n);
          return n;
        }
        getWorldPosition(t) {
          return (
            this.updateWorldMatrix(!0, !1),
            t.setFromMatrixPosition(this.matrixWorld)
          );
        }
        getWorldQuaternion(t) {
          return (
            this.updateWorldMatrix(!0, !1),
            this.matrixWorld.decompose(g, t, _),
            t
          );
        }
        getWorldScale(t) {
          return (
            this.updateWorldMatrix(!0, !1),
            this.matrixWorld.decompose(g, v, t),
            t
          );
        }
        getWorldDirection(t) {
          this.updateWorldMatrix(!0, !1);
          const e = this.matrixWorld.elements;
          return t.set(e[8], e[9], e[10]).normalize();
        }
        raycast() {}
        traverse(t) {
          t(this);
          const e = this.children;
          for (let n = 0, i = e.length; n < i; n++) e[n].traverse(t);
        }
        traverseVisible(t) {
          if (!1 === this.visible) return;
          t(this);
          const e = this.children;
          for (let n = 0, i = e.length; n < i; n++) e[n].traverseVisible(t);
        }
        traverseAncestors(t) {
          const e = this.parent;
          null !== e && (t(e), e.traverseAncestors(t));
        }
        updateMatrix() {
          this.matrix.compose(this.position, this.quaternion, this.scale),
            (this.matrixWorldNeedsUpdate = !0);
        }
        updateMatrixWorld(t) {
          this.matrixAutoUpdate && this.updateMatrix(),
            (this.matrixWorldNeedsUpdate || t) &&
              (null === this.parent
                ? this.matrixWorld.copy(this.matrix)
                : this.matrixWorld.multiplyMatrices(
                    this.parent.matrixWorld,
                    this.matrix
                  ),
              (this.matrixWorldNeedsUpdate = !1),
              (t = !0));
          const e = this.children;
          for (let n = 0, i = e.length; n < i; n++) {
            const i = e[n];
            (!0 !== i.matrixWorldAutoUpdate && !0 !== t) ||
              i.updateMatrixWorld(t);
          }
        }
        updateWorldMatrix(t, e) {
          const n = this.parent;
          if (
            (!0 === t &&
              null !== n &&
              !0 === n.matrixWorldAutoUpdate &&
              n.updateWorldMatrix(!0, !1),
            this.matrixAutoUpdate && this.updateMatrix(),
            null === this.parent
              ? this.matrixWorld.copy(this.matrix)
              : this.matrixWorld.multiplyMatrices(
                  this.parent.matrixWorld,
                  this.matrix
                ),
            !0 === e)
          ) {
            const t = this.children;
            for (let e = 0, n = t.length; e < n; e++) {
              const n = t[e];
              !0 === n.matrixWorldAutoUpdate && n.updateWorldMatrix(!1, !0);
            }
          }
        }
        toJSON(t) {
          const e = void 0 === t || "string" == typeof t,
            n = {};
          e &&
            ((t = {
              geometries: {},
              materials: {},
              textures: {},
              images: {},
              shapes: {},
              skeletons: {},
              animations: {},
              nodes: {},
            }),
            (n.metadata = {
              version: 4.6,
              type: "Object",
              generator: "Object3D.toJSON",
            }));
          const i = {};
          function r(e, n) {
            return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid;
          }
          if (
            ((i.uuid = this.uuid),
            (i.type = this.type),
            "" !== this.name && (i.name = this.name),
            !0 === this.castShadow && (i.castShadow = !0),
            !0 === this.receiveShadow && (i.receiveShadow = !0),
            !1 === this.visible && (i.visible = !1),
            !1 === this.frustumCulled && (i.frustumCulled = !1),
            0 !== this.renderOrder && (i.renderOrder = this.renderOrder),
            Object.keys(this.userData).length > 0 &&
              (i.userData = this.userData),
            (i.layers = this.layers.mask),
            (i.matrix = this.matrix.toArray()),
            (i.up = this.up.toArray()),
            !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1),
            this.isInstancedMesh &&
              ((i.type = "InstancedMesh"),
              (i.count = this.count),
              (i.instanceMatrix = this.instanceMatrix.toJSON()),
              null !== this.instanceColor &&
                (i.instanceColor = this.instanceColor.toJSON())),
            this.isBatchedMesh &&
              ((i.type = "BatchedMesh"),
              (i.perObjectFrustumCulled = this.perObjectFrustumCulled),
              (i.sortObjects = this.sortObjects),
              (i.drawRanges = this._drawRanges),
              (i.reservedRanges = this._reservedRanges),
              (i.visibility = this._visibility),
              (i.active = this._active),
              (i.bounds = this._bounds.map((t) => ({
                boxInitialized: t.boxInitialized,
                boxMin: t.box.min.toArray(),
                boxMax: t.box.max.toArray(),
                sphereInitialized: t.sphereInitialized,
                sphereRadius: t.sphere.radius,
                sphereCenter: t.sphere.center.toArray(),
              }))),
              (i.maxGeometryCount = this._maxGeometryCount),
              (i.maxVertexCount = this._maxVertexCount),
              (i.maxIndexCount = this._maxIndexCount),
              (i.geometryInitialized = this._geometryInitialized),
              (i.geometryCount = this._geometryCount),
              (i.matricesTexture = this._matricesTexture.toJSON(t)),
              null !== this._colorsTexture &&
                (i.colorsTexture = this._colorsTexture.toJSON(t)),
              null !== this.boundingSphere &&
                (i.boundingSphere = {
                  center: i.boundingSphere.center.toArray(),
                  radius: i.boundingSphere.radius,
                }),
              null !== this.boundingBox &&
                (i.boundingBox = {
                  min: i.boundingBox.min.toArray(),
                  max: i.boundingBox.max.toArray(),
                })),
            this.isScene)
          )
            this.background &&
              (this.background.isColor
                ? (i.background = this.background.toJSON())
                : this.background.isTexture &&
                  (i.background = this.background.toJSON(t).uuid)),
              this.environment &&
                this.environment.isTexture &&
                !0 !== this.environment.isRenderTargetTexture &&
                (i.environment = this.environment.toJSON(t).uuid);
          else if (this.isMesh || this.isLine || this.isPoints) {
            i.geometry = r(t.geometries, this.geometry);
            const e = this.geometry.parameters;
            if (void 0 !== e && void 0 !== e.shapes) {
              const n = e.shapes;
              if (Array.isArray(n))
                for (let e = 0, i = n.length; e < i; e++) {
                  const i = n[e];
                  r(t.shapes, i);
                }
              else r(t.shapes, n);
            }
          }
          if (
            (this.isSkinnedMesh &&
              ((i.bindMode = this.bindMode),
              (i.bindMatrix = this.bindMatrix.toArray()),
              void 0 !== this.skeleton &&
                (r(t.skeletons, this.skeleton),
                (i.skeleton = this.skeleton.uuid))),
            void 0 !== this.material)
          )
            if (Array.isArray(this.material)) {
              const e = [];
              for (let n = 0, i = this.material.length; n < i; n++)
                e.push(r(t.materials, this.material[n]));
              i.material = e;
            } else i.material = r(t.materials, this.material);
          if (this.children.length > 0) {
            i.children = [];
            for (let e = 0; e < this.children.length; e++)
              i.children.push(this.children[e].toJSON(t).object);
          }
          if (this.animations.length > 0) {
            i.animations = [];
            for (let e = 0; e < this.animations.length; e++) {
              const n = this.animations[e];
              i.animations.push(r(t.animations, n));
            }
          }
          if (e) {
            const e = a(t.geometries),
              i = a(t.materials),
              r = a(t.textures),
              s = a(t.images),
              o = a(t.shapes),
              l = a(t.skeletons),
              c = a(t.animations),
              u = a(t.nodes);
            e.length > 0 && (n.geometries = e),
              i.length > 0 && (n.materials = i),
              r.length > 0 && (n.textures = r),
              s.length > 0 && (n.images = s),
              o.length > 0 && (n.shapes = o),
              l.length > 0 && (n.skeletons = l),
              c.length > 0 && (n.animations = c),
              u.length > 0 && (n.nodes = u);
          }
          return (n.object = i), n;
          function a(t) {
            const e = [];
            for (const n in t) {
              const i = t[n];
              delete i.metadata, e.push(i);
            }
            return e;
          }
        }
        clone(t) {
          return new this.constructor().copy(this, t);
        }
        copy(t, e = !0) {
          if (
            ((this.name = t.name),
            this.up.copy(t.up),
            this.position.copy(t.position),
            (this.rotation.order = t.rotation.order),
            this.quaternion.copy(t.quaternion),
            this.scale.copy(t.scale),
            this.matrix.copy(t.matrix),
            this.matrixWorld.copy(t.matrixWorld),
            (this.matrixAutoUpdate = t.matrixAutoUpdate),
            (this.matrixWorldAutoUpdate = t.matrixWorldAutoUpdate),
            (this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate),
            (this.layers.mask = t.layers.mask),
            (this.visible = t.visible),
            (this.castShadow = t.castShadow),
            (this.receiveShadow = t.receiveShadow),
            (this.frustumCulled = t.frustumCulled),
            (this.renderOrder = t.renderOrder),
            (this.animations = t.animations.slice()),
            (this.userData = JSON.parse(JSON.stringify(t.userData))),
            !0 === e)
          )
            for (let e = 0; e < t.children.length; e++) {
              const n = t.children[e];
              this.add(n.clone());
            }
          return this;
        }
      }
      (w.DEFAULT_UP = new r.P(0, 1, 0)),
        (w.DEFAULT_MATRIX_AUTO_UPDATE = !0),
        (w.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0);
    },
    712: (t, e, n) => {
      n.d(e, { b: () => a });
      var i = n(231),
        r = n(642);
      class a extends i.L {
        constructor(t = 1, e = 1, n = 1, i = 1) {
          super(),
            (this.type = "PlaneGeometry"),
            (this.parameters = {
              width: t,
              height: e,
              widthSegments: n,
              heightSegments: i,
            });
          const a = t / 2,
            s = e / 2,
            o = Math.floor(n),
            l = Math.floor(i),
            c = o + 1,
            u = l + 1,
            h = t / o,
            d = e / l,
            p = [],
            f = [],
            m = [],
            g = [];
          for (let t = 0; t < u; t++) {
            const e = t * d - s;
            for (let n = 0; n < c; n++) {
              const i = n * h - a;
              f.push(i, -e, 0),
                m.push(0, 0, 1),
                g.push(n / o),
                g.push(1 - t / l);
            }
          }
          for (let t = 0; t < l; t++)
            for (let e = 0; e < o; e++) {
              const n = e + c * t,
                i = e + c * (t + 1),
                r = e + 1 + c * (t + 1),
                a = e + 1 + c * t;
              p.push(n, i, a), p.push(i, r, a);
            }
          this.setIndex(p),
            this.setAttribute("position", new r.qt(f, 3)),
            this.setAttribute("normal", new r.qt(m, 3)),
            this.setAttribute("uv", new r.qt(g, 2));
        }
        copy(t) {
          return (
            super.copy(t),
            (this.parameters = Object.assign({}, t.parameters)),
            this
          );
        }
        static fromJSON(t) {
          return new a(t.width, t.height, t.widthSegments, t.heightSegments);
        }
      }
    },
    528: (t, e, n) => {
      n.d(e, { T: () => u });
      const i = {
        enabled: !1,
        files: {},
        add: function (t, e) {
          !1 !== this.enabled && (this.files[t] = e);
        },
        get: function (t) {
          if (!1 !== this.enabled) return this.files[t];
        },
        remove: function (t) {
          delete this.files[t];
        },
        clear: function () {
          this.files = {};
        },
      };
      class r {
        constructor(t, e, n) {
          const i = this;
          let r,
            a = !1,
            s = 0,
            o = 0;
          const l = [];
          (this.onStart = void 0),
            (this.onLoad = t),
            (this.onProgress = e),
            (this.onError = n),
            (this.itemStart = function (t) {
              o++,
                !1 === a && void 0 !== i.onStart && i.onStart(t, s, o),
                (a = !0);
            }),
            (this.itemEnd = function (t) {
              s++,
                void 0 !== i.onProgress && i.onProgress(t, s, o),
                s === o && ((a = !1), void 0 !== i.onLoad && i.onLoad());
            }),
            (this.itemError = function (t) {
              void 0 !== i.onError && i.onError(t);
            }),
            (this.resolveURL = function (t) {
              return r ? r(t) : t;
            }),
            (this.setURLModifier = function (t) {
              return (r = t), this;
            }),
            (this.addHandler = function (t, e) {
              return l.push(t, e), this;
            }),
            (this.removeHandler = function (t) {
              const e = l.indexOf(t);
              return -1 !== e && l.splice(e, 2), this;
            }),
            (this.getHandler = function (t) {
              for (let e = 0, n = l.length; e < n; e += 2) {
                const n = l[e],
                  i = l[e + 1];
                if ((n.global && (n.lastIndex = 0), n.test(t))) return i;
              }
              return null;
            });
        }
      }
      const a = new r();
      class s {
        constructor(t) {
          (this.manager = void 0 !== t ? t : a),
            (this.crossOrigin = "anonymous"),
            (this.withCredentials = !1),
            (this.path = ""),
            (this.resourcePath = ""),
            (this.requestHeader = {});
        }
        load() {}
        loadAsync(t, e) {
          const n = this;
          return new Promise(function (i, r) {
            n.load(t, i, e, r);
          });
        }
        parse() {}
        setCrossOrigin(t) {
          return (this.crossOrigin = t), this;
        }
        setWithCredentials(t) {
          return (this.withCredentials = t), this;
        }
        setPath(t) {
          return (this.path = t), this;
        }
        setResourcePath(t) {
          return (this.resourcePath = t), this;
        }
        setRequestHeader(t) {
          return (this.requestHeader = t), this;
        }
      }
      s.DEFAULT_MATERIAL_NAME = "__DEFAULT";
      var o = n(108);
      class l extends s {
        constructor(t) {
          super(t);
        }
        load(t, e, n, r) {
          void 0 !== this.path && (t = this.path + t),
            (t = this.manager.resolveURL(t));
          const a = this,
            s = i.get(t);
          if (void 0 !== s)
            return (
              a.manager.itemStart(t),
              setTimeout(function () {
                e && e(s), a.manager.itemEnd(t);
              }, 0),
              s
            );
          const l = (0, o.qq)("img");
          function c() {
            h(), i.add(t, this), e && e(this), a.manager.itemEnd(t);
          }
          function u(e) {
            h(), r && r(e), a.manager.itemError(t), a.manager.itemEnd(t);
          }
          function h() {
            l.removeEventListener("load", c, !1),
              l.removeEventListener("error", u, !1);
          }
          return (
            l.addEventListener("load", c, !1),
            l.addEventListener("error", u, !1),
            "data:" !== t.slice(0, 5) &&
              void 0 !== this.crossOrigin &&
              (l.crossOrigin = this.crossOrigin),
            a.manager.itemStart(t),
            (l.src = t),
            l
          );
        }
      }
      var c = n(913);
      class u extends s {
        constructor(t) {
          super(t);
        }
        load(t, e, n, i) {
          const r = new c.g(),
            a = new l(this.manager);
          return (
            a.setCrossOrigin(this.crossOrigin),
            a.setPath(this.path),
            a.load(
              t,
              function (t) {
                (r.image = t), (r.needsUpdate = !0), void 0 !== e && e(r);
              },
              n,
              i
            ),
            r
          );
        }
      }
    },
    371: (t, e, n) => {
      n.d(e, { i: () => l });
      var i = n(71),
        r = n(168),
        a = n(128),
        s = n(823);
      let o = 0;
      class l extends r.Q {
        constructor() {
          super(),
            (this.isMaterial = !0),
            Object.defineProperty(this, "id", { value: o++ }),
            (this.uuid = s.lk()),
            (this.name = ""),
            (this.type = "Material"),
            (this.blending = a.NTi),
            (this.side = a.hB5),
            (this.vertexColors = !1),
            (this.opacity = 1),
            (this.transparent = !1),
            (this.alphaHash = !1),
            (this.blendSrc = a.ie2),
            (this.blendDst = a.OuU),
            (this.blendEquation = a.gO9),
            (this.blendSrcAlpha = null),
            (this.blendDstAlpha = null),
            (this.blendEquationAlpha = null),
            (this.blendColor = new i.Q(0, 0, 0)),
            (this.blendAlpha = 0),
            (this.depthFunc = a.xSv),
            (this.depthTest = !0),
            (this.depthWrite = !0),
            (this.stencilWriteMask = 255),
            (this.stencilFunc = a.sKt),
            (this.stencilRef = 0),
            (this.stencilFuncMask = 255),
            (this.stencilFail = a.VVr),
            (this.stencilZFail = a.VVr),
            (this.stencilZPass = a.VVr),
            (this.stencilWrite = !1),
            (this.clippingPlanes = null),
            (this.clipIntersection = !1),
            (this.clipShadows = !1),
            (this.shadowSide = null),
            (this.colorWrite = !0),
            (this.precision = null),
            (this.polygonOffset = !1),
            (this.polygonOffsetFactor = 0),
            (this.polygonOffsetUnits = 0),
            (this.dithering = !1),
            (this.alphaToCoverage = !1),
            (this.premultipliedAlpha = !1),
            (this.forceSinglePass = !1),
            (this.visible = !0),
            (this.toneMapped = !0),
            (this.userData = {}),
            (this.version = 0),
            (this._alphaTest = 0);
        }
        get alphaTest() {
          return this._alphaTest;
        }
        set alphaTest(t) {
          this._alphaTest > 0 != t > 0 && this.version++, (this._alphaTest = t);
        }
        onBuild() {}
        onBeforeRender() {}
        onBeforeCompile() {}
        customProgramCacheKey() {
          return this.onBeforeCompile.toString();
        }
        setValues(t) {
          if (void 0 !== t)
            for (const e in t) {
              const n = t[e];
              if (void 0 === n) {
                console.warn(
                  `THREE.Material: parameter '${e}' has value of undefined.`
                );
                continue;
              }
              const i = this[e];
              void 0 !== i
                ? i && i.isColor
                  ? i.set(n)
                  : i && i.isVector3 && n && n.isVector3
                  ? i.copy(n)
                  : (this[e] = n)
                : console.warn(
                    `THREE.Material: '${e}' is not a property of THREE.${this.type}.`
                  );
            }
        }
        toJSON(t) {
          const e = void 0 === t || "string" == typeof t;
          e && (t = { textures: {}, images: {} });
          const n = {
            metadata: {
              version: 4.6,
              type: "Material",
              generator: "Material.toJSON",
            },
          };
          function i(t) {
            const e = [];
            for (const n in t) {
              const i = t[n];
              delete i.metadata, e.push(i);
            }
            return e;
          }
          if (
            ((n.uuid = this.uuid),
            (n.type = this.type),
            "" !== this.name && (n.name = this.name),
            this.color && this.color.isColor && (n.color = this.color.getHex()),
            void 0 !== this.roughness && (n.roughness = this.roughness),
            void 0 !== this.metalness && (n.metalness = this.metalness),
            void 0 !== this.sheen && (n.sheen = this.sheen),
            this.sheenColor &&
              this.sheenColor.isColor &&
              (n.sheenColor = this.sheenColor.getHex()),
            void 0 !== this.sheenRoughness &&
              (n.sheenRoughness = this.sheenRoughness),
            this.emissive &&
              this.emissive.isColor &&
              (n.emissive = this.emissive.getHex()),
            void 0 !== this.emissiveIntensity &&
              1 !== this.emissiveIntensity &&
              (n.emissiveIntensity = this.emissiveIntensity),
            this.specular &&
              this.specular.isColor &&
              (n.specular = this.specular.getHex()),
            void 0 !== this.specularIntensity &&
              (n.specularIntensity = this.specularIntensity),
            this.specularColor &&
              this.specularColor.isColor &&
              (n.specularColor = this.specularColor.getHex()),
            void 0 !== this.shininess && (n.shininess = this.shininess),
            void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat),
            void 0 !== this.clearcoatRoughness &&
              (n.clearcoatRoughness = this.clearcoatRoughness),
            this.clearcoatMap &&
              this.clearcoatMap.isTexture &&
              (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid),
            this.clearcoatRoughnessMap &&
              this.clearcoatRoughnessMap.isTexture &&
              (n.clearcoatRoughnessMap =
                this.clearcoatRoughnessMap.toJSON(t).uuid),
            this.clearcoatNormalMap &&
              this.clearcoatNormalMap.isTexture &&
              ((n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid),
              (n.clearcoatNormalScale = this.clearcoatNormalScale.toArray())),
            void 0 !== this.dispersion && (n.dispersion = this.dispersion),
            void 0 !== this.iridescence && (n.iridescence = this.iridescence),
            void 0 !== this.iridescenceIOR &&
              (n.iridescenceIOR = this.iridescenceIOR),
            void 0 !== this.iridescenceThicknessRange &&
              (n.iridescenceThicknessRange = this.iridescenceThicknessRange),
            this.iridescenceMap &&
              this.iridescenceMap.isTexture &&
              (n.iridescenceMap = this.iridescenceMap.toJSON(t).uuid),
            this.iridescenceThicknessMap &&
              this.iridescenceThicknessMap.isTexture &&
              (n.iridescenceThicknessMap =
                this.iridescenceThicknessMap.toJSON(t).uuid),
            void 0 !== this.anisotropy && (n.anisotropy = this.anisotropy),
            void 0 !== this.anisotropyRotation &&
              (n.anisotropyRotation = this.anisotropyRotation),
            this.anisotropyMap &&
              this.anisotropyMap.isTexture &&
              (n.anisotropyMap = this.anisotropyMap.toJSON(t).uuid),
            this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid),
            this.matcap &&
              this.matcap.isTexture &&
              (n.matcap = this.matcap.toJSON(t).uuid),
            this.alphaMap &&
              this.alphaMap.isTexture &&
              (n.alphaMap = this.alphaMap.toJSON(t).uuid),
            this.lightMap &&
              this.lightMap.isTexture &&
              ((n.lightMap = this.lightMap.toJSON(t).uuid),
              (n.lightMapIntensity = this.lightMapIntensity)),
            this.aoMap &&
              this.aoMap.isTexture &&
              ((n.aoMap = this.aoMap.toJSON(t).uuid),
              (n.aoMapIntensity = this.aoMapIntensity)),
            this.bumpMap &&
              this.bumpMap.isTexture &&
              ((n.bumpMap = this.bumpMap.toJSON(t).uuid),
              (n.bumpScale = this.bumpScale)),
            this.normalMap &&
              this.normalMap.isTexture &&
              ((n.normalMap = this.normalMap.toJSON(t).uuid),
              (n.normalMapType = this.normalMapType),
              (n.normalScale = this.normalScale.toArray())),
            this.displacementMap &&
              this.displacementMap.isTexture &&
              ((n.displacementMap = this.displacementMap.toJSON(t).uuid),
              (n.displacementScale = this.displacementScale),
              (n.displacementBias = this.displacementBias)),
            this.roughnessMap &&
              this.roughnessMap.isTexture &&
              (n.roughnessMap = this.roughnessMap.toJSON(t).uuid),
            this.metalnessMap &&
              this.metalnessMap.isTexture &&
              (n.metalnessMap = this.metalnessMap.toJSON(t).uuid),
            this.emissiveMap &&
              this.emissiveMap.isTexture &&
              (n.emissiveMap = this.emissiveMap.toJSON(t).uuid),
            this.specularMap &&
              this.specularMap.isTexture &&
              (n.specularMap = this.specularMap.toJSON(t).uuid),
            this.specularIntensityMap &&
              this.specularIntensityMap.isTexture &&
              (n.specularIntensityMap =
                this.specularIntensityMap.toJSON(t).uuid),
            this.specularColorMap &&
              this.specularColorMap.isTexture &&
              (n.specularColorMap = this.specularColorMap.toJSON(t).uuid),
            this.envMap &&
              this.envMap.isTexture &&
              ((n.envMap = this.envMap.toJSON(t).uuid),
              void 0 !== this.combine && (n.combine = this.combine)),
            void 0 !== this.envMapRotation &&
              (n.envMapRotation = this.envMapRotation.toArray()),
            void 0 !== this.envMapIntensity &&
              (n.envMapIntensity = this.envMapIntensity),
            void 0 !== this.reflectivity &&
              (n.reflectivity = this.reflectivity),
            void 0 !== this.refractionRatio &&
              (n.refractionRatio = this.refractionRatio),
            this.gradientMap &&
              this.gradientMap.isTexture &&
              (n.gradientMap = this.gradientMap.toJSON(t).uuid),
            void 0 !== this.transmission &&
              (n.transmission = this.transmission),
            this.transmissionMap &&
              this.transmissionMap.isTexture &&
              (n.transmissionMap = this.transmissionMap.toJSON(t).uuid),
            void 0 !== this.thickness && (n.thickness = this.thickness),
            this.thicknessMap &&
              this.thicknessMap.isTexture &&
              (n.thicknessMap = this.thicknessMap.toJSON(t).uuid),
            void 0 !== this.attenuationDistance &&
              this.attenuationDistance !== 1 / 0 &&
              (n.attenuationDistance = this.attenuationDistance),
            void 0 !== this.attenuationColor &&
              (n.attenuationColor = this.attenuationColor.getHex()),
            void 0 !== this.size && (n.size = this.size),
            null !== this.shadowSide && (n.shadowSide = this.shadowSide),
            void 0 !== this.sizeAttenuation &&
              (n.sizeAttenuation = this.sizeAttenuation),
            this.blending !== a.NTi && (n.blending = this.blending),
            this.side !== a.hB5 && (n.side = this.side),
            !0 === this.vertexColors && (n.vertexColors = !0),
            this.opacity < 1 && (n.opacity = this.opacity),
            !0 === this.transparent && (n.transparent = !0),
            this.blendSrc !== a.ie2 && (n.blendSrc = this.blendSrc),
            this.blendDst !== a.OuU && (n.blendDst = this.blendDst),
            this.blendEquation !== a.gO9 &&
              (n.blendEquation = this.blendEquation),
            null !== this.blendSrcAlpha &&
              (n.blendSrcAlpha = this.blendSrcAlpha),
            null !== this.blendDstAlpha &&
              (n.blendDstAlpha = this.blendDstAlpha),
            null !== this.blendEquationAlpha &&
              (n.blendEquationAlpha = this.blendEquationAlpha),
            this.blendColor &&
              this.blendColor.isColor &&
              (n.blendColor = this.blendColor.getHex()),
            0 !== this.blendAlpha && (n.blendAlpha = this.blendAlpha),
            this.depthFunc !== a.xSv && (n.depthFunc = this.depthFunc),
            !1 === this.depthTest && (n.depthTest = this.depthTest),
            !1 === this.depthWrite && (n.depthWrite = this.depthWrite),
            !1 === this.colorWrite && (n.colorWrite = this.colorWrite),
            255 !== this.stencilWriteMask &&
              (n.stencilWriteMask = this.stencilWriteMask),
            this.stencilFunc !== a.sKt && (n.stencilFunc = this.stencilFunc),
            0 !== this.stencilRef && (n.stencilRef = this.stencilRef),
            255 !== this.stencilFuncMask &&
              (n.stencilFuncMask = this.stencilFuncMask),
            this.stencilFail !== a.VVr && (n.stencilFail = this.stencilFail),
            this.stencilZFail !== a.VVr && (n.stencilZFail = this.stencilZFail),
            this.stencilZPass !== a.VVr && (n.stencilZPass = this.stencilZPass),
            !0 === this.stencilWrite && (n.stencilWrite = this.stencilWrite),
            void 0 !== this.rotation &&
              0 !== this.rotation &&
              (n.rotation = this.rotation),
            !0 === this.polygonOffset && (n.polygonOffset = !0),
            0 !== this.polygonOffsetFactor &&
              (n.polygonOffsetFactor = this.polygonOffsetFactor),
            0 !== this.polygonOffsetUnits &&
              (n.polygonOffsetUnits = this.polygonOffsetUnits),
            void 0 !== this.linewidth &&
              1 !== this.linewidth &&
              (n.linewidth = this.linewidth),
            void 0 !== this.dashSize && (n.dashSize = this.dashSize),
            void 0 !== this.gapSize && (n.gapSize = this.gapSize),
            void 0 !== this.scale && (n.scale = this.scale),
            !0 === this.dithering && (n.dithering = !0),
            this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
            !0 === this.alphaHash && (n.alphaHash = !0),
            !0 === this.alphaToCoverage && (n.alphaToCoverage = !0),
            !0 === this.premultipliedAlpha && (n.premultipliedAlpha = !0),
            !0 === this.forceSinglePass && (n.forceSinglePass = !0),
            !0 === this.wireframe && (n.wireframe = !0),
            this.wireframeLinewidth > 1 &&
              (n.wireframeLinewidth = this.wireframeLinewidth),
            "round" !== this.wireframeLinecap &&
              (n.wireframeLinecap = this.wireframeLinecap),
            "round" !== this.wireframeLinejoin &&
              (n.wireframeLinejoin = this.wireframeLinejoin),
            !0 === this.flatShading && (n.flatShading = !0),
            !1 === this.visible && (n.visible = !1),
            !1 === this.toneMapped && (n.toneMapped = !1),
            !1 === this.fog && (n.fog = !1),
            Object.keys(this.userData).length > 0 &&
              (n.userData = this.userData),
            e)
          ) {
            const e = i(t.textures),
              r = i(t.images);
            e.length > 0 && (n.textures = e), r.length > 0 && (n.images = r);
          }
          return n;
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(t) {
          (this.name = t.name),
            (this.blending = t.blending),
            (this.side = t.side),
            (this.vertexColors = t.vertexColors),
            (this.opacity = t.opacity),
            (this.transparent = t.transparent),
            (this.blendSrc = t.blendSrc),
            (this.blendDst = t.blendDst),
            (this.blendEquation = t.blendEquation),
            (this.blendSrcAlpha = t.blendSrcAlpha),
            (this.blendDstAlpha = t.blendDstAlpha),
            (this.blendEquationAlpha = t.blendEquationAlpha),
            this.blendColor.copy(t.blendColor),
            (this.blendAlpha = t.blendAlpha),
            (this.depthFunc = t.depthFunc),
            (this.depthTest = t.depthTest),
            (this.depthWrite = t.depthWrite),
            (this.stencilWriteMask = t.stencilWriteMask),
            (this.stencilFunc = t.stencilFunc),
            (this.stencilRef = t.stencilRef),
            (this.stencilFuncMask = t.stencilFuncMask),
            (this.stencilFail = t.stencilFail),
            (this.stencilZFail = t.stencilZFail),
            (this.stencilZPass = t.stencilZPass),
            (this.stencilWrite = t.stencilWrite);
          const e = t.clippingPlanes;
          let n = null;
          if (null !== e) {
            const t = e.length;
            n = new Array(t);
            for (let i = 0; i !== t; ++i) n[i] = e[i].clone();
          }
          return (
            (this.clippingPlanes = n),
            (this.clipIntersection = t.clipIntersection),
            (this.clipShadows = t.clipShadows),
            (this.shadowSide = t.shadowSide),
            (this.colorWrite = t.colorWrite),
            (this.precision = t.precision),
            (this.polygonOffset = t.polygonOffset),
            (this.polygonOffsetFactor = t.polygonOffsetFactor),
            (this.polygonOffsetUnits = t.polygonOffsetUnits),
            (this.dithering = t.dithering),
            (this.alphaTest = t.alphaTest),
            (this.alphaHash = t.alphaHash),
            (this.alphaToCoverage = t.alphaToCoverage),
            (this.premultipliedAlpha = t.premultipliedAlpha),
            (this.forceSinglePass = t.forceSinglePass),
            (this.visible = t.visible),
            (this.toneMapped = t.toneMapped),
            (this.userData = JSON.parse(JSON.stringify(t.userData))),
            this
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
        set needsUpdate(t) {
          !0 === t && this.version++;
        }
      }
    },
    96: (t, e, n) => {
      n.d(e, { V: () => o });
      var i = n(371),
        r = n(128),
        a = n(71),
        s = n(781);
      class o extends i.i {
        constructor(t) {
          super(),
            (this.isMeshBasicMaterial = !0),
            (this.type = "MeshBasicMaterial"),
            (this.color = new a.Q(16777215)),
            (this.map = null),
            (this.lightMap = null),
            (this.lightMapIntensity = 1),
            (this.aoMap = null),
            (this.aoMapIntensity = 1),
            (this.specularMap = null),
            (this.alphaMap = null),
            (this.envMap = null),
            (this.envMapRotation = new s.O()),
            (this.combine = r.caT),
            (this.reflectivity = 1),
            (this.refractionRatio = 0.98),
            (this.wireframe = !1),
            (this.wireframeLinewidth = 1),
            (this.wireframeLinecap = "round"),
            (this.wireframeLinejoin = "round"),
            (this.fog = !0),
            this.setValues(t);
        }
        copy(t) {
          return (
            super.copy(t),
            this.color.copy(t.color),
            (this.map = t.map),
            (this.lightMap = t.lightMap),
            (this.lightMapIntensity = t.lightMapIntensity),
            (this.aoMap = t.aoMap),
            (this.aoMapIntensity = t.aoMapIntensity),
            (this.specularMap = t.specularMap),
            (this.alphaMap = t.alphaMap),
            (this.envMap = t.envMap),
            this.envMapRotation.copy(t.envMapRotation),
            (this.combine = t.combine),
            (this.reflectivity = t.reflectivity),
            (this.refractionRatio = t.refractionRatio),
            (this.wireframe = t.wireframe),
            (this.wireframeLinewidth = t.wireframeLinewidth),
            (this.wireframeLinecap = t.wireframeLinecap),
            (this.wireframeLinejoin = t.wireframeLinejoin),
            (this.fog = t.fog),
            this
          );
        }
      }
    },
    898: (t, e, n) => {
      n.d(e, { D: () => r });
      var i = n(369);
      class r extends i.B {
        constructor(t) {
          super(t),
            (this.isRawShaderMaterial = !0),
            (this.type = "RawShaderMaterial");
        }
      }
    },
    369: (t, e, n) => {
      n.d(e, { B: () => a });
      var i = n(371),
        r = n(685);
      class a extends i.i {
        constructor(t) {
          super(),
            (this.isShaderMaterial = !0),
            (this.type = "ShaderMaterial"),
            (this.defines = {}),
            (this.uniforms = {}),
            (this.uniformsGroups = []),
            (this.vertexShader =
              "\nvoid main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n"),
            (this.fragmentShader =
              "\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}\n"),
            (this.linewidth = 1),
            (this.wireframe = !1),
            (this.wireframeLinewidth = 1),
            (this.fog = !1),
            (this.lights = !1),
            (this.clipping = !1),
            (this.forceSinglePass = !0),
            (this.extensions = { clipCullDistance: !1, multiDraw: !1 }),
            (this.defaultAttributeValues = {
              color: [1, 1, 1],
              uv: [0, 0],
              uv1: [0, 0],
            }),
            (this.index0AttributeName = void 0),
            (this.uniformsNeedUpdate = !1),
            (this.glslVersion = null),
            void 0 !== t && this.setValues(t);
        }
        copy(t) {
          return (
            super.copy(t),
            (this.fragmentShader = t.fragmentShader),
            (this.vertexShader = t.vertexShader),
            (this.uniforms = (0, r.lx)(t.uniforms)),
            (this.uniformsGroups = (0, r.Jd)(t.uniformsGroups)),
            (this.defines = Object.assign({}, t.defines)),
            (this.wireframe = t.wireframe),
            (this.wireframeLinewidth = t.wireframeLinewidth),
            (this.fog = t.fog),
            (this.lights = t.lights),
            (this.clipping = t.clipping),
            (this.extensions = Object.assign({}, t.extensions)),
            (this.glslVersion = t.glslVersion),
            this
          );
        }
        toJSON(t) {
          const e = super.toJSON(t);
          (e.glslVersion = this.glslVersion), (e.uniforms = {});
          for (const n in this.uniforms) {
            const i = this.uniforms[n].value;
            i && i.isTexture
              ? (e.uniforms[n] = { type: "t", value: i.toJSON(t).uuid })
              : i && i.isColor
              ? (e.uniforms[n] = { type: "c", value: i.getHex() })
              : i && i.isVector2
              ? (e.uniforms[n] = { type: "v2", value: i.toArray() })
              : i && i.isVector3
              ? (e.uniforms[n] = { type: "v3", value: i.toArray() })
              : i && i.isVector4
              ? (e.uniforms[n] = { type: "v4", value: i.toArray() })
              : i && i.isMatrix3
              ? (e.uniforms[n] = { type: "m3", value: i.toArray() })
              : i && i.isMatrix4
              ? (e.uniforms[n] = { type: "m4", value: i.toArray() })
              : (e.uniforms[n] = { value: i });
          }
          Object.keys(this.defines).length > 0 && (e.defines = this.defines),
            (e.vertexShader = this.vertexShader),
            (e.fragmentShader = this.fragmentShader),
            (e.lights = this.lights),
            (e.clipping = this.clipping);
          const n = {};
          for (const t in this.extensions)
            !0 === this.extensions[t] && (n[t] = !0);
          return Object.keys(n).length > 0 && (e.extensions = n), e;
        }
      }
    },
    976: (t, e, n) => {
      n.d(e, { N: () => r });
      var i = n(499);
      class r {
        constructor(
          t = new i.P(1 / 0, 1 / 0, 1 / 0),
          e = new i.P(-1 / 0, -1 / 0, -1 / 0)
        ) {
          (this.isBox3 = !0), (this.min = t), (this.max = e);
        }
        set(t, e) {
          return this.min.copy(t), this.max.copy(e), this;
        }
        setFromArray(t) {
          this.makeEmpty();
          for (let e = 0, n = t.length; e < n; e += 3)
            this.expandByPoint(s.fromArray(t, e));
          return this;
        }
        setFromBufferAttribute(t) {
          this.makeEmpty();
          for (let e = 0, n = t.count; e < n; e++)
            this.expandByPoint(s.fromBufferAttribute(t, e));
          return this;
        }
        setFromPoints(t) {
          this.makeEmpty();
          for (let e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
          return this;
        }
        setFromCenterAndSize(t, e) {
          const n = s.copy(e).multiplyScalar(0.5);
          return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
        }
        setFromObject(t, e = !1) {
          return this.makeEmpty(), this.expandByObject(t, e);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(t) {
          return this.min.copy(t.min), this.max.copy(t.max), this;
        }
        makeEmpty() {
          return (
            (this.min.x = this.min.y = this.min.z = 1 / 0),
            (this.max.x = this.max.y = this.max.z = -1 / 0),
            this
          );
        }
        isEmpty() {
          return (
            this.max.x < this.min.x ||
            this.max.y < this.min.y ||
            this.max.z < this.min.z
          );
        }
        getCenter(t) {
          return this.isEmpty()
            ? t.set(0, 0, 0)
            : t.addVectors(this.min, this.max).multiplyScalar(0.5);
        }
        getSize(t) {
          return this.isEmpty()
            ? t.set(0, 0, 0)
            : t.subVectors(this.max, this.min);
        }
        expandByPoint(t) {
          return this.min.min(t), this.max.max(t), this;
        }
        expandByVector(t) {
          return this.min.sub(t), this.max.add(t), this;
        }
        expandByScalar(t) {
          return this.min.addScalar(-t), this.max.addScalar(t), this;
        }
        expandByObject(t, e = !1) {
          t.updateWorldMatrix(!1, !1);
          const n = t.geometry;
          if (void 0 !== n) {
            const i = n.getAttribute("position");
            if (!0 === e && void 0 !== i && !0 !== t.isInstancedMesh)
              for (let e = 0, n = i.count; e < n; e++)
                !0 === t.isMesh
                  ? t.getVertexPosition(e, s)
                  : s.fromBufferAttribute(i, e),
                  s.applyMatrix4(t.matrixWorld),
                  this.expandByPoint(s);
            else
              void 0 !== t.boundingBox
                ? (null === t.boundingBox && t.computeBoundingBox(),
                  o.copy(t.boundingBox))
                : (null === n.boundingBox && n.computeBoundingBox(),
                  o.copy(n.boundingBox)),
                o.applyMatrix4(t.matrixWorld),
                this.union(o);
          }
          const i = t.children;
          for (let t = 0, n = i.length; t < n; t++)
            this.expandByObject(i[t], e);
          return this;
        }
        containsPoint(t) {
          return !(
            t.x < this.min.x ||
            t.x > this.max.x ||
            t.y < this.min.y ||
            t.y > this.max.y ||
            t.z < this.min.z ||
            t.z > this.max.z
          );
        }
        containsBox(t) {
          return (
            this.min.x <= t.min.x &&
            t.max.x <= this.max.x &&
            this.min.y <= t.min.y &&
            t.max.y <= this.max.y &&
            this.min.z <= t.min.z &&
            t.max.z <= this.max.z
          );
        }
        getParameter(t, e) {
          return e.set(
            (t.x - this.min.x) / (this.max.x - this.min.x),
            (t.y - this.min.y) / (this.max.y - this.min.y),
            (t.z - this.min.z) / (this.max.z - this.min.z)
          );
        }
        intersectsBox(t) {
          return !(
            t.max.x < this.min.x ||
            t.min.x > this.max.x ||
            t.max.y < this.min.y ||
            t.min.y > this.max.y ||
            t.max.z < this.min.z ||
            t.min.z > this.max.z
          );
        }
        intersectsSphere(t) {
          return (
            this.clampPoint(t.center, s),
            s.distanceToSquared(t.center) <= t.radius * t.radius
          );
        }
        intersectsPlane(t) {
          let e, n;
          return (
            t.normal.x > 0
              ? ((e = t.normal.x * this.min.x), (n = t.normal.x * this.max.x))
              : ((e = t.normal.x * this.max.x), (n = t.normal.x * this.min.x)),
            t.normal.y > 0
              ? ((e += t.normal.y * this.min.y), (n += t.normal.y * this.max.y))
              : ((e += t.normal.y * this.max.y),
                (n += t.normal.y * this.min.y)),
            t.normal.z > 0
              ? ((e += t.normal.z * this.min.z), (n += t.normal.z * this.max.z))
              : ((e += t.normal.z * this.max.z),
                (n += t.normal.z * this.min.z)),
            e <= -t.constant && n >= -t.constant
          );
        }
        intersectsTriangle(t) {
          if (this.isEmpty()) return !1;
          this.getCenter(f),
            m.subVectors(this.max, f),
            l.subVectors(t.a, f),
            c.subVectors(t.b, f),
            u.subVectors(t.c, f),
            h.subVectors(c, l),
            d.subVectors(u, c),
            p.subVectors(l, u);
          let e = [
            0,
            -h.z,
            h.y,
            0,
            -d.z,
            d.y,
            0,
            -p.z,
            p.y,
            h.z,
            0,
            -h.x,
            d.z,
            0,
            -d.x,
            p.z,
            0,
            -p.x,
            -h.y,
            h.x,
            0,
            -d.y,
            d.x,
            0,
            -p.y,
            p.x,
            0,
          ];
          return (
            !!v(e, l, c, u, m) &&
            ((e = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
            !!v(e, l, c, u, m) &&
              (g.crossVectors(h, d), (e = [g.x, g.y, g.z]), v(e, l, c, u, m)))
          );
        }
        clampPoint(t, e) {
          return e.copy(t).clamp(this.min, this.max);
        }
        distanceToPoint(t) {
          return this.clampPoint(t, s).distanceTo(t);
        }
        getBoundingSphere(t) {
          return (
            this.isEmpty()
              ? t.makeEmpty()
              : (this.getCenter(t.center),
                (t.radius = 0.5 * this.getSize(s).length())),
            t
          );
        }
        intersect(t) {
          return (
            this.min.max(t.min),
            this.max.min(t.max),
            this.isEmpty() && this.makeEmpty(),
            this
          );
        }
        union(t) {
          return this.min.min(t.min), this.max.max(t.max), this;
        }
        applyMatrix4(t) {
          return (
            this.isEmpty() ||
              (a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
              a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
              a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
              a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
              a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
              a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
              a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
              a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
              this.setFromPoints(a)),
            this
          );
        }
        translate(t) {
          return this.min.add(t), this.max.add(t), this;
        }
        equals(t) {
          return t.min.equals(this.min) && t.max.equals(this.max);
        }
      }
      const a = [
          new i.P(),
          new i.P(),
          new i.P(),
          new i.P(),
          new i.P(),
          new i.P(),
          new i.P(),
          new i.P(),
        ],
        s = new i.P(),
        o = new r(),
        l = new i.P(),
        c = new i.P(),
        u = new i.P(),
        h = new i.P(),
        d = new i.P(),
        p = new i.P(),
        f = new i.P(),
        m = new i.P(),
        g = new i.P(),
        _ = new i.P();
      function v(t, e, n, i, r) {
        for (let a = 0, s = t.length - 3; a <= s; a += 3) {
          _.fromArray(t, a);
          const s =
              r.x * Math.abs(_.x) + r.y * Math.abs(_.y) + r.z * Math.abs(_.z),
            o = e.dot(_),
            l = n.dot(_),
            c = i.dot(_);
          if (Math.max(-Math.max(o, l, c), Math.min(o, l, c)) > s) return !1;
        }
        return !0;
      }
    },
    71: (t, e, n) => {
      n.d(e, { Q: () => u });
      var i = n(823),
        r = n(656),
        a = n(128);
      const s = {
          aliceblue: 15792383,
          antiquewhite: 16444375,
          aqua: 65535,
          aquamarine: 8388564,
          azure: 15794175,
          beige: 16119260,
          bisque: 16770244,
          black: 0,
          blanchedalmond: 16772045,
          blue: 255,
          blueviolet: 9055202,
          brown: 10824234,
          burlywood: 14596231,
          cadetblue: 6266528,
          chartreuse: 8388352,
          chocolate: 13789470,
          coral: 16744272,
          cornflowerblue: 6591981,
          cornsilk: 16775388,
          crimson: 14423100,
          cyan: 65535,
          darkblue: 139,
          darkcyan: 35723,
          darkgoldenrod: 12092939,
          darkgray: 11119017,
          darkgreen: 25600,
          darkgrey: 11119017,
          darkkhaki: 12433259,
          darkmagenta: 9109643,
          darkolivegreen: 5597999,
          darkorange: 16747520,
          darkorchid: 10040012,
          darkred: 9109504,
          darksalmon: 15308410,
          darkseagreen: 9419919,
          darkslateblue: 4734347,
          darkslategray: 3100495,
          darkslategrey: 3100495,
          darkturquoise: 52945,
          darkviolet: 9699539,
          deeppink: 16716947,
          deepskyblue: 49151,
          dimgray: 6908265,
          dimgrey: 6908265,
          dodgerblue: 2003199,
          firebrick: 11674146,
          floralwhite: 16775920,
          forestgreen: 2263842,
          fuchsia: 16711935,
          gainsboro: 14474460,
          ghostwhite: 16316671,
          gold: 16766720,
          goldenrod: 14329120,
          gray: 8421504,
          green: 32768,
          greenyellow: 11403055,
          grey: 8421504,
          honeydew: 15794160,
          hotpink: 16738740,
          indianred: 13458524,
          indigo: 4915330,
          ivory: 16777200,
          khaki: 15787660,
          lavender: 15132410,
          lavenderblush: 16773365,
          lawngreen: 8190976,
          lemonchiffon: 16775885,
          lightblue: 11393254,
          lightcoral: 15761536,
          lightcyan: 14745599,
          lightgoldenrodyellow: 16448210,
          lightgray: 13882323,
          lightgreen: 9498256,
          lightgrey: 13882323,
          lightpink: 16758465,
          lightsalmon: 16752762,
          lightseagreen: 2142890,
          lightskyblue: 8900346,
          lightslategray: 7833753,
          lightslategrey: 7833753,
          lightsteelblue: 11584734,
          lightyellow: 16777184,
          lime: 65280,
          limegreen: 3329330,
          linen: 16445670,
          magenta: 16711935,
          maroon: 8388608,
          mediumaquamarine: 6737322,
          mediumblue: 205,
          mediumorchid: 12211667,
          mediumpurple: 9662683,
          mediumseagreen: 3978097,
          mediumslateblue: 8087790,
          mediumspringgreen: 64154,
          mediumturquoise: 4772300,
          mediumvioletred: 13047173,
          midnightblue: 1644912,
          mintcream: 16121850,
          mistyrose: 16770273,
          moccasin: 16770229,
          navajowhite: 16768685,
          navy: 128,
          oldlace: 16643558,
          olive: 8421376,
          olivedrab: 7048739,
          orange: 16753920,
          orangered: 16729344,
          orchid: 14315734,
          palegoldenrod: 15657130,
          palegreen: 10025880,
          paleturquoise: 11529966,
          palevioletred: 14381203,
          papayawhip: 16773077,
          peachpuff: 16767673,
          peru: 13468991,
          pink: 16761035,
          plum: 14524637,
          powderblue: 11591910,
          purple: 8388736,
          rebeccapurple: 6697881,
          red: 16711680,
          rosybrown: 12357519,
          royalblue: 4286945,
          saddlebrown: 9127187,
          salmon: 16416882,
          sandybrown: 16032864,
          seagreen: 3050327,
          seashell: 16774638,
          sienna: 10506797,
          silver: 12632256,
          skyblue: 8900331,
          slateblue: 6970061,
          slategray: 7372944,
          slategrey: 7372944,
          snow: 16775930,
          springgreen: 65407,
          steelblue: 4620980,
          tan: 13808780,
          teal: 32896,
          thistle: 14204888,
          tomato: 16737095,
          turquoise: 4251856,
          violet: 15631086,
          wheat: 16113331,
          white: 16777215,
          whitesmoke: 16119285,
          yellow: 16776960,
          yellowgreen: 10145074,
        },
        o = { h: 0, s: 0, l: 0 },
        l = { h: 0, s: 0, l: 0 };
      function c(t, e, n) {
        return (
          n < 0 && (n += 1),
          n > 1 && (n -= 1),
          n < 1 / 6
            ? t + 6 * (e - t) * n
            : n < 0.5
            ? e
            : n < 2 / 3
            ? t + 6 * (e - t) * (2 / 3 - n)
            : t
        );
      }
      class u {
        constructor(t, e, n) {
          return (
            (this.isColor = !0),
            (this.r = 1),
            (this.g = 1),
            (this.b = 1),
            this.set(t, e, n)
          );
        }
        set(t, e, n) {
          if (void 0 === e && void 0 === n) {
            const e = t;
            e && e.isColor
              ? this.copy(e)
              : "number" == typeof e
              ? this.setHex(e)
              : "string" == typeof e && this.setStyle(e);
          } else this.setRGB(t, e, n);
          return this;
        }
        setScalar(t) {
          return (this.r = t), (this.g = t), (this.b = t), this;
        }
        setHex(t, e = a.er$) {
          return (
            (t = Math.floor(t)),
            (this.r = ((t >> 16) & 255) / 255),
            (this.g = ((t >> 8) & 255) / 255),
            (this.b = (255 & t) / 255),
            r.pp.toWorkingColorSpace(this, e),
            this
          );
        }
        setRGB(t, e, n, i = r.pp.workingColorSpace) {
          return (
            (this.r = t),
            (this.g = e),
            (this.b = n),
            r.pp.toWorkingColorSpace(this, i),
            this
          );
        }
        setHSL(t, e, n, a = r.pp.workingColorSpace) {
          if (
            ((t = (0, i.rl)(t, 1)),
            (e = (0, i.qE)(e, 0, 1)),
            (n = (0, i.qE)(n, 0, 1)),
            0 === e)
          )
            this.r = this.g = this.b = n;
          else {
            const i = n <= 0.5 ? n * (1 + e) : n + e - n * e,
              r = 2 * n - i;
            (this.r = c(r, i, t + 1 / 3)),
              (this.g = c(r, i, t)),
              (this.b = c(r, i, t - 1 / 3));
          }
          return r.pp.toWorkingColorSpace(this, a), this;
        }
        setStyle(t, e = a.er$) {
          function n(e) {
            void 0 !== e &&
              parseFloat(e) < 1 &&
              console.warn(
                "THREE.Color: Alpha component of " + t + " will be ignored."
              );
          }
          let i;
          if ((i = /^(\w+)\(([^\)]*)\)/.exec(t))) {
            let r;
            const a = i[1],
              s = i[2];
            switch (a) {
              case "rgb":
              case "rgba":
                if (
                  (r =
                    /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(
                      s
                    ))
                )
                  return (
                    n(r[4]),
                    this.setRGB(
                      Math.min(255, parseInt(r[1], 10)) / 255,
                      Math.min(255, parseInt(r[2], 10)) / 255,
                      Math.min(255, parseInt(r[3], 10)) / 255,
                      e
                    )
                  );
                if (
                  (r =
                    /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(
                      s
                    ))
                )
                  return (
                    n(r[4]),
                    this.setRGB(
                      Math.min(100, parseInt(r[1], 10)) / 100,
                      Math.min(100, parseInt(r[2], 10)) / 100,
                      Math.min(100, parseInt(r[3], 10)) / 100,
                      e
                    )
                  );
                break;
              case "hsl":
              case "hsla":
                if (
                  (r =
                    /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(
                      s
                    ))
                )
                  return (
                    n(r[4]),
                    this.setHSL(
                      parseFloat(r[1]) / 360,
                      parseFloat(r[2]) / 100,
                      parseFloat(r[3]) / 100,
                      e
                    )
                  );
                break;
              default:
                console.warn("THREE.Color: Unknown color model " + t);
            }
          } else if ((i = /^\#([A-Fa-f\d]+)$/.exec(t))) {
            const n = i[1],
              r = n.length;
            if (3 === r)
              return this.setRGB(
                parseInt(n.charAt(0), 16) / 15,
                parseInt(n.charAt(1), 16) / 15,
                parseInt(n.charAt(2), 16) / 15,
                e
              );
            if (6 === r) return this.setHex(parseInt(n, 16), e);
            console.warn("THREE.Color: Invalid hex color " + t);
          } else if (t && t.length > 0) return this.setColorName(t, e);
          return this;
        }
        setColorName(t, e = a.er$) {
          const n = s[t.toLowerCase()];
          return (
            void 0 !== n
              ? this.setHex(n, e)
              : console.warn("THREE.Color: Unknown color " + t),
            this
          );
        }
        clone() {
          return new this.constructor(this.r, this.g, this.b);
        }
        copy(t) {
          return (this.r = t.r), (this.g = t.g), (this.b = t.b), this;
        }
        copySRGBToLinear(t) {
          return (
            (this.r = (0, r.dk)(t.r)),
            (this.g = (0, r.dk)(t.g)),
            (this.b = (0, r.dk)(t.b)),
            this
          );
        }
        copyLinearToSRGB(t) {
          return (
            (this.r = (0, r.rd)(t.r)),
            (this.g = (0, r.rd)(t.g)),
            (this.b = (0, r.rd)(t.b)),
            this
          );
        }
        convertSRGBToLinear() {
          return this.copySRGBToLinear(this), this;
        }
        convertLinearToSRGB() {
          return this.copyLinearToSRGB(this), this;
        }
        getHex(t = a.er$) {
          return (
            r.pp.fromWorkingColorSpace(h.copy(this), t),
            65536 * Math.round((0, i.qE)(255 * h.r, 0, 255)) +
              256 * Math.round((0, i.qE)(255 * h.g, 0, 255)) +
              Math.round((0, i.qE)(255 * h.b, 0, 255))
          );
        }
        getHexString(t = a.er$) {
          return ("000000" + this.getHex(t).toString(16)).slice(-6);
        }
        getHSL(t, e = r.pp.workingColorSpace) {
          r.pp.fromWorkingColorSpace(h.copy(this), e);
          const n = h.r,
            i = h.g,
            a = h.b,
            s = Math.max(n, i, a),
            o = Math.min(n, i, a);
          let l, c;
          const u = (o + s) / 2;
          if (o === s) (l = 0), (c = 0);
          else {
            const t = s - o;
            switch (((c = u <= 0.5 ? t / (s + o) : t / (2 - s - o)), s)) {
              case n:
                l = (i - a) / t + (i < a ? 6 : 0);
                break;
              case i:
                l = (a - n) / t + 2;
                break;
              case a:
                l = (n - i) / t + 4;
            }
            l /= 6;
          }
          return (t.h = l), (t.s = c), (t.l = u), t;
        }
        getRGB(t, e = r.pp.workingColorSpace) {
          return (
            r.pp.fromWorkingColorSpace(h.copy(this), e),
            (t.r = h.r),
            (t.g = h.g),
            (t.b = h.b),
            t
          );
        }
        getStyle(t = a.er$) {
          r.pp.fromWorkingColorSpace(h.copy(this), t);
          const e = h.r,
            n = h.g,
            i = h.b;
          return t !== a.er$
            ? `color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`
            : `rgb(${Math.round(255 * e)},${Math.round(255 * n)},${Math.round(
                255 * i
              )})`;
        }
        offsetHSL(t, e, n) {
          return this.getHSL(o), this.setHSL(o.h + t, o.s + e, o.l + n);
        }
        add(t) {
          return (this.r += t.r), (this.g += t.g), (this.b += t.b), this;
        }
        addColors(t, e) {
          return (
            (this.r = t.r + e.r),
            (this.g = t.g + e.g),
            (this.b = t.b + e.b),
            this
          );
        }
        addScalar(t) {
          return (this.r += t), (this.g += t), (this.b += t), this;
        }
        sub(t) {
          return (
            (this.r = Math.max(0, this.r - t.r)),
            (this.g = Math.max(0, this.g - t.g)),
            (this.b = Math.max(0, this.b - t.b)),
            this
          );
        }
        multiply(t) {
          return (this.r *= t.r), (this.g *= t.g), (this.b *= t.b), this;
        }
        multiplyScalar(t) {
          return (this.r *= t), (this.g *= t), (this.b *= t), this;
        }
        lerp(t, e) {
          return (
            (this.r += (t.r - this.r) * e),
            (this.g += (t.g - this.g) * e),
            (this.b += (t.b - this.b) * e),
            this
          );
        }
        lerpColors(t, e, n) {
          return (
            (this.r = t.r + (e.r - t.r) * n),
            (this.g = t.g + (e.g - t.g) * n),
            (this.b = t.b + (e.b - t.b) * n),
            this
          );
        }
        lerpHSL(t, e) {
          this.getHSL(o), t.getHSL(l);
          const n = (0, i.Cc)(o.h, l.h, e),
            r = (0, i.Cc)(o.s, l.s, e),
            a = (0, i.Cc)(o.l, l.l, e);
          return this.setHSL(n, r, a), this;
        }
        setFromVector3(t) {
          return (this.r = t.x), (this.g = t.y), (this.b = t.z), this;
        }
        applyMatrix3(t) {
          const e = this.r,
            n = this.g,
            i = this.b,
            r = t.elements;
          return (
            (this.r = r[0] * e + r[3] * n + r[6] * i),
            (this.g = r[1] * e + r[4] * n + r[7] * i),
            (this.b = r[2] * e + r[5] * n + r[8] * i),
            this
          );
        }
        equals(t) {
          return t.r === this.r && t.g === this.g && t.b === this.b;
        }
        fromArray(t, e = 0) {
          return (
            (this.r = t[e]), (this.g = t[e + 1]), (this.b = t[e + 2]), this
          );
        }
        toArray(t = [], e = 0) {
          return (t[e] = this.r), (t[e + 1] = this.g), (t[e + 2] = this.b), t;
        }
        fromBufferAttribute(t, e) {
          return (
            (this.r = t.getX(e)),
            (this.g = t.getY(e)),
            (this.b = t.getZ(e)),
            this
          );
        }
        toJSON() {
          return this.getHex();
        }
        *[Symbol.iterator]() {
          yield this.r, yield this.g, yield this.b;
        }
      }
      const h = new u();
      u.NAMES = s;
    },
    656: (t, e, n) => {
      n.d(e, { dk: () => u, pp: () => c, rd: () => h });
      var i = n(128),
        r = n(326);
      const a = new r.d().set(
          0.8224621,
          0.177538,
          0,
          0.0331941,
          0.9668058,
          0,
          0.0170827,
          0.0723974,
          0.9105199
        ),
        s = new r.d().set(
          1.2249401,
          -0.2249404,
          0,
          -0.0420569,
          1.0420571,
          0,
          -0.0196376,
          -0.0786361,
          1.0982735
        ),
        o = {
          [i.Zr2]: {
            transfer: i.VxR,
            primaries: i.z5,
            toReference: (t) => t,
            fromReference: (t) => t,
          },
          [i.er$]: {
            transfer: i.KLL,
            primaries: i.z5,
            toReference: (t) => t.convertSRGBToLinear(),
            fromReference: (t) => t.convertLinearToSRGB(),
          },
          [i.qIQ]: {
            transfer: i.VxR,
            primaries: i.wqq,
            toReference: (t) => t.applyMatrix3(s),
            fromReference: (t) => t.applyMatrix3(a),
          },
          [i.V5c]: {
            transfer: i.KLL,
            primaries: i.wqq,
            toReference: (t) => t.convertSRGBToLinear().applyMatrix3(s),
            fromReference: (t) => t.applyMatrix3(a).convertLinearToSRGB(),
          },
        },
        l = new Set([i.Zr2, i.qIQ]),
        c = {
          enabled: !0,
          _workingColorSpace: i.Zr2,
          get workingColorSpace() {
            return this._workingColorSpace;
          },
          set workingColorSpace(t) {
            if (!l.has(t))
              throw new Error(`Unsupported working color space, "${t}".`);
            this._workingColorSpace = t;
          },
          convert: function (t, e, n) {
            if (!1 === this.enabled || e === n || !e || !n) return t;
            const i = o[e].toReference;
            return (0, o[n].fromReference)(i(t));
          },
          fromWorkingColorSpace: function (t, e) {
            return this.convert(t, this._workingColorSpace, e);
          },
          toWorkingColorSpace: function (t, e) {
            return this.convert(t, e, this._workingColorSpace);
          },
          getPrimaries: function (t) {
            return o[t].primaries;
          },
          getTransfer: function (t) {
            return t === i.jf0 ? i.VxR : o[t].transfer;
          },
        };
      function u(t) {
        return t < 0.04045
          ? 0.0773993808 * t
          : Math.pow(0.9478672986 * t + 0.0521327014, 2.4);
      }
      function h(t) {
        return t < 0.0031308 ? 12.92 * t : 1.055 * Math.pow(t, 0.41666) - 0.055;
      }
    },
    781: (t, e, n) => {
      n.d(e, { O: () => l });
      var i = n(438),
        r = n(591),
        a = n(823);
      const s = new r.k(),
        o = new i.P();
      class l {
        constructor(t = 0, e = 0, n = 0, i = l.DEFAULT_ORDER) {
          (this.isEuler = !0),
            (this._x = t),
            (this._y = e),
            (this._z = n),
            (this._order = i);
        }
        get x() {
          return this._x;
        }
        set x(t) {
          (this._x = t), this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(t) {
          (this._y = t), this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(t) {
          (this._z = t), this._onChangeCallback();
        }
        get order() {
          return this._order;
        }
        set order(t) {
          (this._order = t), this._onChangeCallback();
        }
        set(t, e, n, i = this._order) {
          return (
            (this._x = t),
            (this._y = e),
            (this._z = n),
            (this._order = i),
            this._onChangeCallback(),
            this
          );
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._order);
        }
        copy(t) {
          return (
            (this._x = t._x),
            (this._y = t._y),
            (this._z = t._z),
            (this._order = t._order),
            this._onChangeCallback(),
            this
          );
        }
        setFromRotationMatrix(t, e = this._order, n = !0) {
          const i = t.elements,
            r = i[0],
            s = i[4],
            o = i[8],
            l = i[1],
            c = i[5],
            u = i[9],
            h = i[2],
            d = i[6],
            p = i[10];
          switch (e) {
            case "XYZ":
              (this._y = Math.asin((0, a.qE)(o, -1, 1))),
                Math.abs(o) < 0.9999999
                  ? ((this._x = Math.atan2(-u, p)),
                    (this._z = Math.atan2(-s, r)))
                  : ((this._x = Math.atan2(d, c)), (this._z = 0));
              break;
            case "YXZ":
              (this._x = Math.asin(-(0, a.qE)(u, -1, 1))),
                Math.abs(u) < 0.9999999
                  ? ((this._y = Math.atan2(o, p)), (this._z = Math.atan2(l, c)))
                  : ((this._y = Math.atan2(-h, r)), (this._z = 0));
              break;
            case "ZXY":
              (this._x = Math.asin((0, a.qE)(d, -1, 1))),
                Math.abs(d) < 0.9999999
                  ? ((this._y = Math.atan2(-h, p)),
                    (this._z = Math.atan2(-s, c)))
                  : ((this._y = 0), (this._z = Math.atan2(l, r)));
              break;
            case "ZYX":
              (this._y = Math.asin(-(0, a.qE)(h, -1, 1))),
                Math.abs(h) < 0.9999999
                  ? ((this._x = Math.atan2(d, p)), (this._z = Math.atan2(l, r)))
                  : ((this._x = 0), (this._z = Math.atan2(-s, c)));
              break;
            case "YZX":
              (this._z = Math.asin((0, a.qE)(l, -1, 1))),
                Math.abs(l) < 0.9999999
                  ? ((this._x = Math.atan2(-u, c)),
                    (this._y = Math.atan2(-h, r)))
                  : ((this._x = 0), (this._y = Math.atan2(o, p)));
              break;
            case "XZY":
              (this._z = Math.asin(-(0, a.qE)(s, -1, 1))),
                Math.abs(s) < 0.9999999
                  ? ((this._x = Math.atan2(d, c)), (this._y = Math.atan2(o, r)))
                  : ((this._x = Math.atan2(-u, p)), (this._y = 0));
              break;
            default:
              console.warn(
                "THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " +
                  e
              );
          }
          return (this._order = e), !0 === n && this._onChangeCallback(), this;
        }
        setFromQuaternion(t, e, n) {
          return (
            s.makeRotationFromQuaternion(t), this.setFromRotationMatrix(s, e, n)
          );
        }
        setFromVector3(t, e = this._order) {
          return this.set(t.x, t.y, t.z, e);
        }
        reorder(t) {
          return o.setFromEuler(this), this.setFromQuaternion(o, t);
        }
        equals(t) {
          return (
            t._x === this._x &&
            t._y === this._y &&
            t._z === this._z &&
            t._order === this._order
          );
        }
        fromArray(t) {
          return (
            (this._x = t[0]),
            (this._y = t[1]),
            (this._z = t[2]),
            void 0 !== t[3] && (this._order = t[3]),
            this._onChangeCallback(),
            this
          );
        }
        toArray(t = [], e = 0) {
          return (
            (t[e] = this._x),
            (t[e + 1] = this._y),
            (t[e + 2] = this._z),
            (t[e + 3] = this._order),
            t
          );
        }
        _onChange(t) {
          return (this._onChangeCallback = t), this;
        }
        _onChangeCallback() {}
        *[Symbol.iterator]() {
          yield this._x, yield this._y, yield this._z, yield this._order;
        }
      }
      l.DEFAULT_ORDER = "XYZ";
    },
    823: (t, e, n) => {
      n.d(e, {
        Cc: () => c,
        NU: () => u,
        S8: () => h,
        a5: () => a,
        lk: () => s,
        qE: () => o,
        rl: () => l,
        up: () => r,
      });
      const i = [
          "00",
          "01",
          "02",
          "03",
          "04",
          "05",
          "06",
          "07",
          "08",
          "09",
          "0a",
          "0b",
          "0c",
          "0d",
          "0e",
          "0f",
          "10",
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "18",
          "19",
          "1a",
          "1b",
          "1c",
          "1d",
          "1e",
          "1f",
          "20",
          "21",
          "22",
          "23",
          "24",
          "25",
          "26",
          "27",
          "28",
          "29",
          "2a",
          "2b",
          "2c",
          "2d",
          "2e",
          "2f",
          "30",
          "31",
          "32",
          "33",
          "34",
          "35",
          "36",
          "37",
          "38",
          "39",
          "3a",
          "3b",
          "3c",
          "3d",
          "3e",
          "3f",
          "40",
          "41",
          "42",
          "43",
          "44",
          "45",
          "46",
          "47",
          "48",
          "49",
          "4a",
          "4b",
          "4c",
          "4d",
          "4e",
          "4f",
          "50",
          "51",
          "52",
          "53",
          "54",
          "55",
          "56",
          "57",
          "58",
          "59",
          "5a",
          "5b",
          "5c",
          "5d",
          "5e",
          "5f",
          "60",
          "61",
          "62",
          "63",
          "64",
          "65",
          "66",
          "67",
          "68",
          "69",
          "6a",
          "6b",
          "6c",
          "6d",
          "6e",
          "6f",
          "70",
          "71",
          "72",
          "73",
          "74",
          "75",
          "76",
          "77",
          "78",
          "79",
          "7a",
          "7b",
          "7c",
          "7d",
          "7e",
          "7f",
          "80",
          "81",
          "82",
          "83",
          "84",
          "85",
          "86",
          "87",
          "88",
          "89",
          "8a",
          "8b",
          "8c",
          "8d",
          "8e",
          "8f",
          "90",
          "91",
          "92",
          "93",
          "94",
          "95",
          "96",
          "97",
          "98",
          "99",
          "9a",
          "9b",
          "9c",
          "9d",
          "9e",
          "9f",
          "a0",
          "a1",
          "a2",
          "a3",
          "a4",
          "a5",
          "a6",
          "a7",
          "a8",
          "a9",
          "aa",
          "ab",
          "ac",
          "ad",
          "ae",
          "af",
          "b0",
          "b1",
          "b2",
          "b3",
          "b4",
          "b5",
          "b6",
          "b7",
          "b8",
          "b9",
          "ba",
          "bb",
          "bc",
          "bd",
          "be",
          "bf",
          "c0",
          "c1",
          "c2",
          "c3",
          "c4",
          "c5",
          "c6",
          "c7",
          "c8",
          "c9",
          "ca",
          "cb",
          "cc",
          "cd",
          "ce",
          "cf",
          "d0",
          "d1",
          "d2",
          "d3",
          "d4",
          "d5",
          "d6",
          "d7",
          "d8",
          "d9",
          "da",
          "db",
          "dc",
          "dd",
          "de",
          "df",
          "e0",
          "e1",
          "e2",
          "e3",
          "e4",
          "e5",
          "e6",
          "e7",
          "e8",
          "e9",
          "ea",
          "eb",
          "ec",
          "ed",
          "ee",
          "ef",
          "f0",
          "f1",
          "f2",
          "f3",
          "f4",
          "f5",
          "f6",
          "f7",
          "f8",
          "f9",
          "fa",
          "fb",
          "fc",
          "fd",
          "fe",
          "ff",
        ],
        r = Math.PI / 180,
        a = 180 / Math.PI;
      function s() {
        const t = (4294967295 * Math.random()) | 0,
          e = (4294967295 * Math.random()) | 0,
          n = (4294967295 * Math.random()) | 0,
          r = (4294967295 * Math.random()) | 0;
        return (
          i[255 & t] +
          i[(t >> 8) & 255] +
          i[(t >> 16) & 255] +
          i[(t >> 24) & 255] +
          "-" +
          i[255 & e] +
          i[(e >> 8) & 255] +
          "-" +
          i[((e >> 16) & 15) | 64] +
          i[(e >> 24) & 255] +
          "-" +
          i[(63 & n) | 128] +
          i[(n >> 8) & 255] +
          "-" +
          i[(n >> 16) & 255] +
          i[(n >> 24) & 255] +
          i[255 & r] +
          i[(r >> 8) & 255] +
          i[(r >> 16) & 255] +
          i[(r >> 24) & 255]
        ).toLowerCase();
      }
      function o(t, e, n) {
        return Math.max(e, Math.min(n, t));
      }
      function l(t, e) {
        return ((t % e) + e) % e;
      }
      function c(t, e, n) {
        return (1 - n) * t + n * e;
      }
      function u(t, e) {
        switch (e.constructor) {
          case Float32Array:
            return t;
          case Uint32Array:
            return t / 4294967295;
          case Uint16Array:
            return t / 65535;
          case Uint8Array:
            return t / 255;
          case Int32Array:
            return Math.max(t / 2147483647, -1);
          case Int16Array:
            return Math.max(t / 32767, -1);
          case Int8Array:
            return Math.max(t / 127, -1);
          default:
            throw new Error("Invalid component type.");
        }
      }
      function h(t, e) {
        switch (e.constructor) {
          case Float32Array:
            return t;
          case Uint32Array:
            return Math.round(4294967295 * t);
          case Uint16Array:
            return Math.round(65535 * t);
          case Uint8Array:
            return Math.round(255 * t);
          case Int32Array:
            return Math.round(2147483647 * t);
          case Int16Array:
            return Math.round(32767 * t);
          case Int8Array:
            return Math.round(127 * t);
          default:
            throw new Error("Invalid component type.");
        }
      }
    },
    326: (t, e, n) => {
      n.d(e, { d: () => i });
      class i {
        constructor(t, e, n, r, a, s, o, l, c) {
          (i.prototype.isMatrix3 = !0),
            (this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
            void 0 !== t && this.set(t, e, n, r, a, s, o, l, c);
        }
        set(t, e, n, i, r, a, s, o, l) {
          const c = this.elements;
          return (
            (c[0] = t),
            (c[1] = i),
            (c[2] = s),
            (c[3] = e),
            (c[4] = r),
            (c[5] = o),
            (c[6] = n),
            (c[7] = a),
            (c[8] = l),
            this
          );
        }
        identity() {
          return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
        }
        copy(t) {
          const e = this.elements,
            n = t.elements;
          return (
            (e[0] = n[0]),
            (e[1] = n[1]),
            (e[2] = n[2]),
            (e[3] = n[3]),
            (e[4] = n[4]),
            (e[5] = n[5]),
            (e[6] = n[6]),
            (e[7] = n[7]),
            (e[8] = n[8]),
            this
          );
        }
        extractBasis(t, e, n) {
          return (
            t.setFromMatrix3Column(this, 0),
            e.setFromMatrix3Column(this, 1),
            n.setFromMatrix3Column(this, 2),
            this
          );
        }
        setFromMatrix4(t) {
          const e = t.elements;
          return (
            this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]),
            this
          );
        }
        multiply(t) {
          return this.multiplyMatrices(this, t);
        }
        premultiply(t) {
          return this.multiplyMatrices(t, this);
        }
        multiplyMatrices(t, e) {
          const n = t.elements,
            i = e.elements,
            r = this.elements,
            a = n[0],
            s = n[3],
            o = n[6],
            l = n[1],
            c = n[4],
            u = n[7],
            h = n[2],
            d = n[5],
            p = n[8],
            f = i[0],
            m = i[3],
            g = i[6],
            _ = i[1],
            v = i[4],
            x = i[7],
            y = i[2],
            M = i[5],
            S = i[8];
          return (
            (r[0] = a * f + s * _ + o * y),
            (r[3] = a * m + s * v + o * M),
            (r[6] = a * g + s * x + o * S),
            (r[1] = l * f + c * _ + u * y),
            (r[4] = l * m + c * v + u * M),
            (r[7] = l * g + c * x + u * S),
            (r[2] = h * f + d * _ + p * y),
            (r[5] = h * m + d * v + p * M),
            (r[8] = h * g + d * x + p * S),
            this
          );
        }
        multiplyScalar(t) {
          const e = this.elements;
          return (
            (e[0] *= t),
            (e[3] *= t),
            (e[6] *= t),
            (e[1] *= t),
            (e[4] *= t),
            (e[7] *= t),
            (e[2] *= t),
            (e[5] *= t),
            (e[8] *= t),
            this
          );
        }
        determinant() {
          const t = this.elements,
            e = t[0],
            n = t[1],
            i = t[2],
            r = t[3],
            a = t[4],
            s = t[5],
            o = t[6],
            l = t[7],
            c = t[8];
          return (
            e * a * c -
            e * s * l -
            n * r * c +
            n * s * o +
            i * r * l -
            i * a * o
          );
        }
        invert() {
          const t = this.elements,
            e = t[0],
            n = t[1],
            i = t[2],
            r = t[3],
            a = t[4],
            s = t[5],
            o = t[6],
            l = t[7],
            c = t[8],
            u = c * a - s * l,
            h = s * o - c * r,
            d = l * r - a * o,
            p = e * u + n * h + i * d;
          if (0 === p) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
          const f = 1 / p;
          return (
            (t[0] = u * f),
            (t[1] = (i * l - c * n) * f),
            (t[2] = (s * n - i * a) * f),
            (t[3] = h * f),
            (t[4] = (c * e - i * o) * f),
            (t[5] = (i * r - s * e) * f),
            (t[6] = d * f),
            (t[7] = (n * o - l * e) * f),
            (t[8] = (a * e - n * r) * f),
            this
          );
        }
        transpose() {
          let t;
          const e = this.elements;
          return (
            (t = e[1]),
            (e[1] = e[3]),
            (e[3] = t),
            (t = e[2]),
            (e[2] = e[6]),
            (e[6] = t),
            (t = e[5]),
            (e[5] = e[7]),
            (e[7] = t),
            this
          );
        }
        getNormalMatrix(t) {
          return this.setFromMatrix4(t).invert().transpose();
        }
        transposeIntoArray(t) {
          const e = this.elements;
          return (
            (t[0] = e[0]),
            (t[1] = e[3]),
            (t[2] = e[6]),
            (t[3] = e[1]),
            (t[4] = e[4]),
            (t[5] = e[7]),
            (t[6] = e[2]),
            (t[7] = e[5]),
            (t[8] = e[8]),
            this
          );
        }
        setUvTransform(t, e, n, i, r, a, s) {
          const o = Math.cos(r),
            l = Math.sin(r);
          return (
            this.set(
              n * o,
              n * l,
              -n * (o * a + l * s) + a + t,
              -i * l,
              i * o,
              -i * (-l * a + o * s) + s + e,
              0,
              0,
              1
            ),
            this
          );
        }
        scale(t, e) {
          return this.premultiply(r.makeScale(t, e)), this;
        }
        rotate(t) {
          return this.premultiply(r.makeRotation(-t)), this;
        }
        translate(t, e) {
          return this.premultiply(r.makeTranslation(t, e)), this;
        }
        makeTranslation(t, e) {
          return (
            t.isVector2
              ? this.set(1, 0, t.x, 0, 1, t.y, 0, 0, 1)
              : this.set(1, 0, t, 0, 1, e, 0, 0, 1),
            this
          );
        }
        makeRotation(t) {
          const e = Math.cos(t),
            n = Math.sin(t);
          return this.set(e, -n, 0, n, e, 0, 0, 0, 1), this;
        }
        makeScale(t, e) {
          return this.set(t, 0, 0, 0, e, 0, 0, 0, 1), this;
        }
        equals(t) {
          const e = this.elements,
            n = t.elements;
          for (let t = 0; t < 9; t++) if (e[t] !== n[t]) return !1;
          return !0;
        }
        fromArray(t, e = 0) {
          for (let n = 0; n < 9; n++) this.elements[n] = t[n + e];
          return this;
        }
        toArray(t = [], e = 0) {
          const n = this.elements;
          return (
            (t[e] = n[0]),
            (t[e + 1] = n[1]),
            (t[e + 2] = n[2]),
            (t[e + 3] = n[3]),
            (t[e + 4] = n[4]),
            (t[e + 5] = n[5]),
            (t[e + 6] = n[6]),
            (t[e + 7] = n[7]),
            (t[e + 8] = n[8]),
            t
          );
        }
        clone() {
          return new this.constructor().fromArray(this.elements);
        }
      }
      const r = new i();
    },
    591: (t, e, n) => {
      n.d(e, { k: () => a });
      var i = n(128),
        r = n(499);
      class a {
        constructor(t, e, n, i, r, s, o, l, c, u, h, d, p, f, m, g) {
          (a.prototype.isMatrix4 = !0),
            (this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
            void 0 !== t &&
              this.set(t, e, n, i, r, s, o, l, c, u, h, d, p, f, m, g);
        }
        set(t, e, n, i, r, a, s, o, l, c, u, h, d, p, f, m) {
          const g = this.elements;
          return (
            (g[0] = t),
            (g[4] = e),
            (g[8] = n),
            (g[12] = i),
            (g[1] = r),
            (g[5] = a),
            (g[9] = s),
            (g[13] = o),
            (g[2] = l),
            (g[6] = c),
            (g[10] = u),
            (g[14] = h),
            (g[3] = d),
            (g[7] = p),
            (g[11] = f),
            (g[15] = m),
            this
          );
        }
        identity() {
          return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }
        clone() {
          return new a().fromArray(this.elements);
        }
        copy(t) {
          const e = this.elements,
            n = t.elements;
          return (
            (e[0] = n[0]),
            (e[1] = n[1]),
            (e[2] = n[2]),
            (e[3] = n[3]),
            (e[4] = n[4]),
            (e[5] = n[5]),
            (e[6] = n[6]),
            (e[7] = n[7]),
            (e[8] = n[8]),
            (e[9] = n[9]),
            (e[10] = n[10]),
            (e[11] = n[11]),
            (e[12] = n[12]),
            (e[13] = n[13]),
            (e[14] = n[14]),
            (e[15] = n[15]),
            this
          );
        }
        copyPosition(t) {
          const e = this.elements,
            n = t.elements;
          return (e[12] = n[12]), (e[13] = n[13]), (e[14] = n[14]), this;
        }
        setFromMatrix3(t) {
          const e = t.elements;
          return (
            this.set(
              e[0],
              e[3],
              e[6],
              0,
              e[1],
              e[4],
              e[7],
              0,
              e[2],
              e[5],
              e[8],
              0,
              0,
              0,
              0,
              1
            ),
            this
          );
        }
        extractBasis(t, e, n) {
          return (
            t.setFromMatrixColumn(this, 0),
            e.setFromMatrixColumn(this, 1),
            n.setFromMatrixColumn(this, 2),
            this
          );
        }
        makeBasis(t, e, n) {
          return (
            this.set(
              t.x,
              e.x,
              n.x,
              0,
              t.y,
              e.y,
              n.y,
              0,
              t.z,
              e.z,
              n.z,
              0,
              0,
              0,
              0,
              1
            ),
            this
          );
        }
        extractRotation(t) {
          const e = this.elements,
            n = t.elements,
            i = 1 / s.setFromMatrixColumn(t, 0).length(),
            r = 1 / s.setFromMatrixColumn(t, 1).length(),
            a = 1 / s.setFromMatrixColumn(t, 2).length();
          return (
            (e[0] = n[0] * i),
            (e[1] = n[1] * i),
            (e[2] = n[2] * i),
            (e[3] = 0),
            (e[4] = n[4] * r),
            (e[5] = n[5] * r),
            (e[6] = n[6] * r),
            (e[7] = 0),
            (e[8] = n[8] * a),
            (e[9] = n[9] * a),
            (e[10] = n[10] * a),
            (e[11] = 0),
            (e[12] = 0),
            (e[13] = 0),
            (e[14] = 0),
            (e[15] = 1),
            this
          );
        }
        makeRotationFromEuler(t) {
          const e = this.elements,
            n = t.x,
            i = t.y,
            r = t.z,
            a = Math.cos(n),
            s = Math.sin(n),
            o = Math.cos(i),
            l = Math.sin(i),
            c = Math.cos(r),
            u = Math.sin(r);
          if ("XYZ" === t.order) {
            const t = a * c,
              n = a * u,
              i = s * c,
              r = s * u;
            (e[0] = o * c),
              (e[4] = -o * u),
              (e[8] = l),
              (e[1] = n + i * l),
              (e[5] = t - r * l),
              (e[9] = -s * o),
              (e[2] = r - t * l),
              (e[6] = i + n * l),
              (e[10] = a * o);
          } else if ("YXZ" === t.order) {
            const t = o * c,
              n = o * u,
              i = l * c,
              r = l * u;
            (e[0] = t + r * s),
              (e[4] = i * s - n),
              (e[8] = a * l),
              (e[1] = a * u),
              (e[5] = a * c),
              (e[9] = -s),
              (e[2] = n * s - i),
              (e[6] = r + t * s),
              (e[10] = a * o);
          } else if ("ZXY" === t.order) {
            const t = o * c,
              n = o * u,
              i = l * c,
              r = l * u;
            (e[0] = t - r * s),
              (e[4] = -a * u),
              (e[8] = i + n * s),
              (e[1] = n + i * s),
              (e[5] = a * c),
              (e[9] = r - t * s),
              (e[2] = -a * l),
              (e[6] = s),
              (e[10] = a * o);
          } else if ("ZYX" === t.order) {
            const t = a * c,
              n = a * u,
              i = s * c,
              r = s * u;
            (e[0] = o * c),
              (e[4] = i * l - n),
              (e[8] = t * l + r),
              (e[1] = o * u),
              (e[5] = r * l + t),
              (e[9] = n * l - i),
              (e[2] = -l),
              (e[6] = s * o),
              (e[10] = a * o);
          } else if ("YZX" === t.order) {
            const t = a * o,
              n = a * l,
              i = s * o,
              r = s * l;
            (e[0] = o * c),
              (e[4] = r - t * u),
              (e[8] = i * u + n),
              (e[1] = u),
              (e[5] = a * c),
              (e[9] = -s * c),
              (e[2] = -l * c),
              (e[6] = n * u + i),
              (e[10] = t - r * u);
          } else if ("XZY" === t.order) {
            const t = a * o,
              n = a * l,
              i = s * o,
              r = s * l;
            (e[0] = o * c),
              (e[4] = -u),
              (e[8] = l * c),
              (e[1] = t * u + r),
              (e[5] = a * c),
              (e[9] = n * u - i),
              (e[2] = i * u - n),
              (e[6] = s * c),
              (e[10] = r * u + t);
          }
          return (
            (e[3] = 0),
            (e[7] = 0),
            (e[11] = 0),
            (e[12] = 0),
            (e[13] = 0),
            (e[14] = 0),
            (e[15] = 1),
            this
          );
        }
        makeRotationFromQuaternion(t) {
          return this.compose(l, t, c);
        }
        lookAt(t, e, n) {
          const i = this.elements;
          return (
            d.subVectors(t, e),
            0 === d.lengthSq() && (d.z = 1),
            d.normalize(),
            u.crossVectors(n, d),
            0 === u.lengthSq() &&
              (1 === Math.abs(n.z) ? (d.x += 1e-4) : (d.z += 1e-4),
              d.normalize(),
              u.crossVectors(n, d)),
            u.normalize(),
            h.crossVectors(d, u),
            (i[0] = u.x),
            (i[4] = h.x),
            (i[8] = d.x),
            (i[1] = u.y),
            (i[5] = h.y),
            (i[9] = d.y),
            (i[2] = u.z),
            (i[6] = h.z),
            (i[10] = d.z),
            this
          );
        }
        multiply(t) {
          return this.multiplyMatrices(this, t);
        }
        premultiply(t) {
          return this.multiplyMatrices(t, this);
        }
        multiplyMatrices(t, e) {
          const n = t.elements,
            i = e.elements,
            r = this.elements,
            a = n[0],
            s = n[4],
            o = n[8],
            l = n[12],
            c = n[1],
            u = n[5],
            h = n[9],
            d = n[13],
            p = n[2],
            f = n[6],
            m = n[10],
            g = n[14],
            _ = n[3],
            v = n[7],
            x = n[11],
            y = n[15],
            M = i[0],
            S = i[4],
            E = i[8],
            b = i[12],
            T = i[1],
            w = i[5],
            A = i[9],
            R = i[13],
            C = i[2],
            P = i[6],
            L = i[10],
            U = i[14],
            D = i[3],
            I = i[7],
            N = i[11],
            O = i[15];
          return (
            (r[0] = a * M + s * T + o * C + l * D),
            (r[4] = a * S + s * w + o * P + l * I),
            (r[8] = a * E + s * A + o * L + l * N),
            (r[12] = a * b + s * R + o * U + l * O),
            (r[1] = c * M + u * T + h * C + d * D),
            (r[5] = c * S + u * w + h * P + d * I),
            (r[9] = c * E + u * A + h * L + d * N),
            (r[13] = c * b + u * R + h * U + d * O),
            (r[2] = p * M + f * T + m * C + g * D),
            (r[6] = p * S + f * w + m * P + g * I),
            (r[10] = p * E + f * A + m * L + g * N),
            (r[14] = p * b + f * R + m * U + g * O),
            (r[3] = _ * M + v * T + x * C + y * D),
            (r[7] = _ * S + v * w + x * P + y * I),
            (r[11] = _ * E + v * A + x * L + y * N),
            (r[15] = _ * b + v * R + x * U + y * O),
            this
          );
        }
        multiplyScalar(t) {
          const e = this.elements;
          return (
            (e[0] *= t),
            (e[4] *= t),
            (e[8] *= t),
            (e[12] *= t),
            (e[1] *= t),
            (e[5] *= t),
            (e[9] *= t),
            (e[13] *= t),
            (e[2] *= t),
            (e[6] *= t),
            (e[10] *= t),
            (e[14] *= t),
            (e[3] *= t),
            (e[7] *= t),
            (e[11] *= t),
            (e[15] *= t),
            this
          );
        }
        determinant() {
          const t = this.elements,
            e = t[0],
            n = t[4],
            i = t[8],
            r = t[12],
            a = t[1],
            s = t[5],
            o = t[9],
            l = t[13],
            c = t[2],
            u = t[6],
            h = t[10],
            d = t[14];
          return (
            t[3] *
              (+r * o * u -
                i * l * u -
                r * s * h +
                n * l * h +
                i * s * d -
                n * o * d) +
            t[7] *
              (+e * o * d -
                e * l * h +
                r * a * h -
                i * a * d +
                i * l * c -
                r * o * c) +
            t[11] *
              (+e * l * u -
                e * s * d -
                r * a * u +
                n * a * d +
                r * s * c -
                n * l * c) +
            t[15] *
              (-i * s * c -
                e * o * u +
                e * s * h +
                i * a * u -
                n * a * h +
                n * o * c)
          );
        }
        transpose() {
          const t = this.elements;
          let e;
          return (
            (e = t[1]),
            (t[1] = t[4]),
            (t[4] = e),
            (e = t[2]),
            (t[2] = t[8]),
            (t[8] = e),
            (e = t[6]),
            (t[6] = t[9]),
            (t[9] = e),
            (e = t[3]),
            (t[3] = t[12]),
            (t[12] = e),
            (e = t[7]),
            (t[7] = t[13]),
            (t[13] = e),
            (e = t[11]),
            (t[11] = t[14]),
            (t[14] = e),
            this
          );
        }
        setPosition(t, e, n) {
          const i = this.elements;
          return (
            t.isVector3
              ? ((i[12] = t.x), (i[13] = t.y), (i[14] = t.z))
              : ((i[12] = t), (i[13] = e), (i[14] = n)),
            this
          );
        }
        invert() {
          const t = this.elements,
            e = t[0],
            n = t[1],
            i = t[2],
            r = t[3],
            a = t[4],
            s = t[5],
            o = t[6],
            l = t[7],
            c = t[8],
            u = t[9],
            h = t[10],
            d = t[11],
            p = t[12],
            f = t[13],
            m = t[14],
            g = t[15],
            _ =
              u * m * l -
              f * h * l +
              f * o * d -
              s * m * d -
              u * o * g +
              s * h * g,
            v =
              p * h * l -
              c * m * l -
              p * o * d +
              a * m * d +
              c * o * g -
              a * h * g,
            x =
              c * f * l -
              p * u * l +
              p * s * d -
              a * f * d -
              c * s * g +
              a * u * g,
            y =
              p * u * o -
              c * f * o -
              p * s * h +
              a * f * h +
              c * s * m -
              a * u * m,
            M = e * _ + n * v + i * x + r * y;
          if (0 === M)
            return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          const S = 1 / M;
          return (
            (t[0] = _ * S),
            (t[1] =
              (f * h * r -
                u * m * r -
                f * i * d +
                n * m * d +
                u * i * g -
                n * h * g) *
              S),
            (t[2] =
              (s * m * r -
                f * o * r +
                f * i * l -
                n * m * l -
                s * i * g +
                n * o * g) *
              S),
            (t[3] =
              (u * o * r -
                s * h * r -
                u * i * l +
                n * h * l +
                s * i * d -
                n * o * d) *
              S),
            (t[4] = v * S),
            (t[5] =
              (c * m * r -
                p * h * r +
                p * i * d -
                e * m * d -
                c * i * g +
                e * h * g) *
              S),
            (t[6] =
              (p * o * r -
                a * m * r -
                p * i * l +
                e * m * l +
                a * i * g -
                e * o * g) *
              S),
            (t[7] =
              (a * h * r -
                c * o * r +
                c * i * l -
                e * h * l -
                a * i * d +
                e * o * d) *
              S),
            (t[8] = x * S),
            (t[9] =
              (p * u * r -
                c * f * r -
                p * n * d +
                e * f * d +
                c * n * g -
                e * u * g) *
              S),
            (t[10] =
              (a * f * r -
                p * s * r +
                p * n * l -
                e * f * l -
                a * n * g +
                e * s * g) *
              S),
            (t[11] =
              (c * s * r -
                a * u * r -
                c * n * l +
                e * u * l +
                a * n * d -
                e * s * d) *
              S),
            (t[12] = y * S),
            (t[13] =
              (c * f * i -
                p * u * i +
                p * n * h -
                e * f * h -
                c * n * m +
                e * u * m) *
              S),
            (t[14] =
              (p * s * i -
                a * f * i -
                p * n * o +
                e * f * o +
                a * n * m -
                e * s * m) *
              S),
            (t[15] =
              (a * u * i -
                c * s * i +
                c * n * o -
                e * u * o -
                a * n * h +
                e * s * h) *
              S),
            this
          );
        }
        scale(t) {
          const e = this.elements,
            n = t.x,
            i = t.y,
            r = t.z;
          return (
            (e[0] *= n),
            (e[4] *= i),
            (e[8] *= r),
            (e[1] *= n),
            (e[5] *= i),
            (e[9] *= r),
            (e[2] *= n),
            (e[6] *= i),
            (e[10] *= r),
            (e[3] *= n),
            (e[7] *= i),
            (e[11] *= r),
            this
          );
        }
        getMaxScaleOnAxis() {
          const t = this.elements,
            e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
            n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
            i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
          return Math.sqrt(Math.max(e, n, i));
        }
        makeTranslation(t, e, n) {
          return (
            t.isVector3
              ? this.set(1, 0, 0, t.x, 0, 1, 0, t.y, 0, 0, 1, t.z, 0, 0, 0, 1)
              : this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1),
            this
          );
        }
        makeRotationX(t) {
          const e = Math.cos(t),
            n = Math.sin(t);
          return (
            this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this
          );
        }
        makeRotationY(t) {
          const e = Math.cos(t),
            n = Math.sin(t);
          return (
            this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this
          );
        }
        makeRotationZ(t) {
          const e = Math.cos(t),
            n = Math.sin(t);
          return (
            this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
          );
        }
        makeRotationAxis(t, e) {
          const n = Math.cos(e),
            i = Math.sin(e),
            r = 1 - n,
            a = t.x,
            s = t.y,
            o = t.z,
            l = r * a,
            c = r * s;
          return (
            this.set(
              l * a + n,
              l * s - i * o,
              l * o + i * s,
              0,
              l * s + i * o,
              c * s + n,
              c * o - i * a,
              0,
              l * o - i * s,
              c * o + i * a,
              r * o * o + n,
              0,
              0,
              0,
              0,
              1
            ),
            this
          );
        }
        makeScale(t, e, n) {
          return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
        }
        makeShear(t, e, n, i, r, a) {
          return this.set(1, n, r, 0, t, 1, a, 0, e, i, 1, 0, 0, 0, 0, 1), this;
        }
        compose(t, e, n) {
          const i = this.elements,
            r = e._x,
            a = e._y,
            s = e._z,
            o = e._w,
            l = r + r,
            c = a + a,
            u = s + s,
            h = r * l,
            d = r * c,
            p = r * u,
            f = a * c,
            m = a * u,
            g = s * u,
            _ = o * l,
            v = o * c,
            x = o * u,
            y = n.x,
            M = n.y,
            S = n.z;
          return (
            (i[0] = (1 - (f + g)) * y),
            (i[1] = (d + x) * y),
            (i[2] = (p - v) * y),
            (i[3] = 0),
            (i[4] = (d - x) * M),
            (i[5] = (1 - (h + g)) * M),
            (i[6] = (m + _) * M),
            (i[7] = 0),
            (i[8] = (p + v) * S),
            (i[9] = (m - _) * S),
            (i[10] = (1 - (h + f)) * S),
            (i[11] = 0),
            (i[12] = t.x),
            (i[13] = t.y),
            (i[14] = t.z),
            (i[15] = 1),
            this
          );
        }
        decompose(t, e, n) {
          const i = this.elements;
          let r = s.set(i[0], i[1], i[2]).length();
          const a = s.set(i[4], i[5], i[6]).length(),
            l = s.set(i[8], i[9], i[10]).length();
          this.determinant() < 0 && (r = -r),
            (t.x = i[12]),
            (t.y = i[13]),
            (t.z = i[14]),
            o.copy(this);
          const c = 1 / r,
            u = 1 / a,
            h = 1 / l;
          return (
            (o.elements[0] *= c),
            (o.elements[1] *= c),
            (o.elements[2] *= c),
            (o.elements[4] *= u),
            (o.elements[5] *= u),
            (o.elements[6] *= u),
            (o.elements[8] *= h),
            (o.elements[9] *= h),
            (o.elements[10] *= h),
            e.setFromRotationMatrix(o),
            (n.x = r),
            (n.y = a),
            (n.z = l),
            this
          );
        }
        makePerspective(t, e, n, r, a, s, o = i.TdN) {
          const l = this.elements,
            c = (2 * a) / (e - t),
            u = (2 * a) / (n - r),
            h = (e + t) / (e - t),
            d = (n + r) / (n - r);
          let p, f;
          if (o === i.TdN)
            (p = -(s + a) / (s - a)), (f = (-2 * s * a) / (s - a));
          else {
            if (o !== i.i7u)
              throw new Error(
                "THREE.Matrix4.makePerspective(): Invalid coordinate system: " +
                  o
              );
            (p = -s / (s - a)), (f = (-s * a) / (s - a));
          }
          return (
            (l[0] = c),
            (l[4] = 0),
            (l[8] = h),
            (l[12] = 0),
            (l[1] = 0),
            (l[5] = u),
            (l[9] = d),
            (l[13] = 0),
            (l[2] = 0),
            (l[6] = 0),
            (l[10] = p),
            (l[14] = f),
            (l[3] = 0),
            (l[7] = 0),
            (l[11] = -1),
            (l[15] = 0),
            this
          );
        }
        makeOrthographic(t, e, n, r, a, s, o = i.TdN) {
          const l = this.elements,
            c = 1 / (e - t),
            u = 1 / (n - r),
            h = 1 / (s - a),
            d = (e + t) * c,
            p = (n + r) * u;
          let f, m;
          if (o === i.TdN) (f = (s + a) * h), (m = -2 * h);
          else {
            if (o !== i.i7u)
              throw new Error(
                "THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " +
                  o
              );
            (f = a * h), (m = -1 * h);
          }
          return (
            (l[0] = 2 * c),
            (l[4] = 0),
            (l[8] = 0),
            (l[12] = -d),
            (l[1] = 0),
            (l[5] = 2 * u),
            (l[9] = 0),
            (l[13] = -p),
            (l[2] = 0),
            (l[6] = 0),
            (l[10] = m),
            (l[14] = -f),
            (l[3] = 0),
            (l[7] = 0),
            (l[11] = 0),
            (l[15] = 1),
            this
          );
        }
        equals(t) {
          const e = this.elements,
            n = t.elements;
          for (let t = 0; t < 16; t++) if (e[t] !== n[t]) return !1;
          return !0;
        }
        fromArray(t, e = 0) {
          for (let n = 0; n < 16; n++) this.elements[n] = t[n + e];
          return this;
        }
        toArray(t = [], e = 0) {
          const n = this.elements;
          return (
            (t[e] = n[0]),
            (t[e + 1] = n[1]),
            (t[e + 2] = n[2]),
            (t[e + 3] = n[3]),
            (t[e + 4] = n[4]),
            (t[e + 5] = n[5]),
            (t[e + 6] = n[6]),
            (t[e + 7] = n[7]),
            (t[e + 8] = n[8]),
            (t[e + 9] = n[9]),
            (t[e + 10] = n[10]),
            (t[e + 11] = n[11]),
            (t[e + 12] = n[12]),
            (t[e + 13] = n[13]),
            (t[e + 14] = n[14]),
            (t[e + 15] = n[15]),
            t
          );
        }
      }
      const s = new r.P(),
        o = new a(),
        l = new r.P(0, 0, 0),
        c = new r.P(1, 1, 1),
        u = new r.P(),
        h = new r.P(),
        d = new r.P();
    },
    438: (t, e, n) => {
      n.d(e, { P: () => r });
      var i = n(823);
      class r {
        constructor(t = 0, e = 0, n = 0, i = 1) {
          (this.isQuaternion = !0),
            (this._x = t),
            (this._y = e),
            (this._z = n),
            (this._w = i);
        }
        static slerpFlat(t, e, n, i, r, a, s) {
          let o = n[i + 0],
            l = n[i + 1],
            c = n[i + 2],
            u = n[i + 3];
          const h = r[a + 0],
            d = r[a + 1],
            p = r[a + 2],
            f = r[a + 3];
          if (0 === s)
            return (
              (t[e + 0] = o),
              (t[e + 1] = l),
              (t[e + 2] = c),
              void (t[e + 3] = u)
            );
          if (1 === s)
            return (
              (t[e + 0] = h),
              (t[e + 1] = d),
              (t[e + 2] = p),
              void (t[e + 3] = f)
            );
          if (u !== f || o !== h || l !== d || c !== p) {
            let t = 1 - s;
            const e = o * h + l * d + c * p + u * f,
              n = e >= 0 ? 1 : -1,
              i = 1 - e * e;
            if (i > Number.EPSILON) {
              const r = Math.sqrt(i),
                a = Math.atan2(r, e * n);
              (t = Math.sin(t * a) / r), (s = Math.sin(s * a) / r);
            }
            const r = s * n;
            if (
              ((o = o * t + h * r),
              (l = l * t + d * r),
              (c = c * t + p * r),
              (u = u * t + f * r),
              t === 1 - s)
            ) {
              const t = 1 / Math.sqrt(o * o + l * l + c * c + u * u);
              (o *= t), (l *= t), (c *= t), (u *= t);
            }
          }
          (t[e] = o), (t[e + 1] = l), (t[e + 2] = c), (t[e + 3] = u);
        }
        static multiplyQuaternionsFlat(t, e, n, i, r, a) {
          const s = n[i],
            o = n[i + 1],
            l = n[i + 2],
            c = n[i + 3],
            u = r[a],
            h = r[a + 1],
            d = r[a + 2],
            p = r[a + 3];
          return (
            (t[e] = s * p + c * u + o * d - l * h),
            (t[e + 1] = o * p + c * h + l * u - s * d),
            (t[e + 2] = l * p + c * d + s * h - o * u),
            (t[e + 3] = c * p - s * u - o * h - l * d),
            t
          );
        }
        get x() {
          return this._x;
        }
        set x(t) {
          (this._x = t), this._onChangeCallback();
        }
        get y() {
          return this._y;
        }
        set y(t) {
          (this._y = t), this._onChangeCallback();
        }
        get z() {
          return this._z;
        }
        set z(t) {
          (this._z = t), this._onChangeCallback();
        }
        get w() {
          return this._w;
        }
        set w(t) {
          (this._w = t), this._onChangeCallback();
        }
        set(t, e, n, i) {
          return (
            (this._x = t),
            (this._y = e),
            (this._z = n),
            (this._w = i),
            this._onChangeCallback(),
            this
          );
        }
        clone() {
          return new this.constructor(this._x, this._y, this._z, this._w);
        }
        copy(t) {
          return (
            (this._x = t.x),
            (this._y = t.y),
            (this._z = t.z),
            (this._w = t.w),
            this._onChangeCallback(),
            this
          );
        }
        setFromEuler(t, e = !0) {
          const n = t._x,
            i = t._y,
            r = t._z,
            a = t._order,
            s = Math.cos,
            o = Math.sin,
            l = s(n / 2),
            c = s(i / 2),
            u = s(r / 2),
            h = o(n / 2),
            d = o(i / 2),
            p = o(r / 2);
          switch (a) {
            case "XYZ":
              (this._x = h * c * u + l * d * p),
                (this._y = l * d * u - h * c * p),
                (this._z = l * c * p + h * d * u),
                (this._w = l * c * u - h * d * p);
              break;
            case "YXZ":
              (this._x = h * c * u + l * d * p),
                (this._y = l * d * u - h * c * p),
                (this._z = l * c * p - h * d * u),
                (this._w = l * c * u + h * d * p);
              break;
            case "ZXY":
              (this._x = h * c * u - l * d * p),
                (this._y = l * d * u + h * c * p),
                (this._z = l * c * p + h * d * u),
                (this._w = l * c * u - h * d * p);
              break;
            case "ZYX":
              (this._x = h * c * u - l * d * p),
                (this._y = l * d * u + h * c * p),
                (this._z = l * c * p - h * d * u),
                (this._w = l * c * u + h * d * p);
              break;
            case "YZX":
              (this._x = h * c * u + l * d * p),
                (this._y = l * d * u + h * c * p),
                (this._z = l * c * p - h * d * u),
                (this._w = l * c * u - h * d * p);
              break;
            case "XZY":
              (this._x = h * c * u - l * d * p),
                (this._y = l * d * u - h * c * p),
                (this._z = l * c * p + h * d * u),
                (this._w = l * c * u + h * d * p);
              break;
            default:
              console.warn(
                "THREE.Quaternion: .setFromEuler() encountered an unknown order: " +
                  a
              );
          }
          return !0 === e && this._onChangeCallback(), this;
        }
        setFromAxisAngle(t, e) {
          const n = e / 2,
            i = Math.sin(n);
          return (
            (this._x = t.x * i),
            (this._y = t.y * i),
            (this._z = t.z * i),
            (this._w = Math.cos(n)),
            this._onChangeCallback(),
            this
          );
        }
        setFromRotationMatrix(t) {
          const e = t.elements,
            n = e[0],
            i = e[4],
            r = e[8],
            a = e[1],
            s = e[5],
            o = e[9],
            l = e[2],
            c = e[6],
            u = e[10],
            h = n + s + u;
          if (h > 0) {
            const t = 0.5 / Math.sqrt(h + 1);
            (this._w = 0.25 / t),
              (this._x = (c - o) * t),
              (this._y = (r - l) * t),
              (this._z = (a - i) * t);
          } else if (n > s && n > u) {
            const t = 2 * Math.sqrt(1 + n - s - u);
            (this._w = (c - o) / t),
              (this._x = 0.25 * t),
              (this._y = (i + a) / t),
              (this._z = (r + l) / t);
          } else if (s > u) {
            const t = 2 * Math.sqrt(1 + s - n - u);
            (this._w = (r - l) / t),
              (this._x = (i + a) / t),
              (this._y = 0.25 * t),
              (this._z = (o + c) / t);
          } else {
            const t = 2 * Math.sqrt(1 + u - n - s);
            (this._w = (a - i) / t),
              (this._x = (r + l) / t),
              (this._y = (o + c) / t),
              (this._z = 0.25 * t);
          }
          return this._onChangeCallback(), this;
        }
        setFromUnitVectors(t, e) {
          let n = t.dot(e) + 1;
          return (
            n < Number.EPSILON
              ? ((n = 0),
                Math.abs(t.x) > Math.abs(t.z)
                  ? ((this._x = -t.y),
                    (this._y = t.x),
                    (this._z = 0),
                    (this._w = n))
                  : ((this._x = 0),
                    (this._y = -t.z),
                    (this._z = t.y),
                    (this._w = n)))
              : ((this._x = t.y * e.z - t.z * e.y),
                (this._y = t.z * e.x - t.x * e.z),
                (this._z = t.x * e.y - t.y * e.x),
                (this._w = n)),
            this.normalize()
          );
        }
        angleTo(t) {
          return 2 * Math.acos(Math.abs(i.qE(this.dot(t), -1, 1)));
        }
        rotateTowards(t, e) {
          const n = this.angleTo(t);
          if (0 === n) return this;
          const i = Math.min(1, e / n);
          return this.slerp(t, i), this;
        }
        identity() {
          return this.set(0, 0, 0, 1);
        }
        invert() {
          return this.conjugate();
        }
        conjugate() {
          return (
            (this._x *= -1),
            (this._y *= -1),
            (this._z *= -1),
            this._onChangeCallback(),
            this
          );
        }
        dot(t) {
          return (
            this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
          );
        }
        lengthSq() {
          return (
            this._x * this._x +
            this._y * this._y +
            this._z * this._z +
            this._w * this._w
          );
        }
        length() {
          return Math.sqrt(
            this._x * this._x +
              this._y * this._y +
              this._z * this._z +
              this._w * this._w
          );
        }
        normalize() {
          let t = this.length();
          return (
            0 === t
              ? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1))
              : ((t = 1 / t),
                (this._x = this._x * t),
                (this._y = this._y * t),
                (this._z = this._z * t),
                (this._w = this._w * t)),
            this._onChangeCallback(),
            this
          );
        }
        multiply(t) {
          return this.multiplyQuaternions(this, t);
        }
        premultiply(t) {
          return this.multiplyQuaternions(t, this);
        }
        multiplyQuaternions(t, e) {
          const n = t._x,
            i = t._y,
            r = t._z,
            a = t._w,
            s = e._x,
            o = e._y,
            l = e._z,
            c = e._w;
          return (
            (this._x = n * c + a * s + i * l - r * o),
            (this._y = i * c + a * o + r * s - n * l),
            (this._z = r * c + a * l + n * o - i * s),
            (this._w = a * c - n * s - i * o - r * l),
            this._onChangeCallback(),
            this
          );
        }
        slerp(t, e) {
          if (0 === e) return this;
          if (1 === e) return this.copy(t);
          const n = this._x,
            i = this._y,
            r = this._z,
            a = this._w;
          let s = a * t._w + n * t._x + i * t._y + r * t._z;
          if (
            (s < 0
              ? ((this._w = -t._w),
                (this._x = -t._x),
                (this._y = -t._y),
                (this._z = -t._z),
                (s = -s))
              : this.copy(t),
            s >= 1)
          )
            return (
              (this._w = a), (this._x = n), (this._y = i), (this._z = r), this
            );
          const o = 1 - s * s;
          if (o <= Number.EPSILON) {
            const t = 1 - e;
            return (
              (this._w = t * a + e * this._w),
              (this._x = t * n + e * this._x),
              (this._y = t * i + e * this._y),
              (this._z = t * r + e * this._z),
              this.normalize(),
              this
            );
          }
          const l = Math.sqrt(o),
            c = Math.atan2(l, s),
            u = Math.sin((1 - e) * c) / l,
            h = Math.sin(e * c) / l;
          return (
            (this._w = a * u + this._w * h),
            (this._x = n * u + this._x * h),
            (this._y = i * u + this._y * h),
            (this._z = r * u + this._z * h),
            this._onChangeCallback(),
            this
          );
        }
        slerpQuaternions(t, e, n) {
          return this.copy(t).slerp(e, n);
        }
        random() {
          const t = 2 * Math.PI * Math.random(),
            e = 2 * Math.PI * Math.random(),
            n = Math.random(),
            i = Math.sqrt(1 - n),
            r = Math.sqrt(n);
          return this.set(
            i * Math.sin(t),
            i * Math.cos(t),
            r * Math.sin(e),
            r * Math.cos(e)
          );
        }
        equals(t) {
          return (
            t._x === this._x &&
            t._y === this._y &&
            t._z === this._z &&
            t._w === this._w
          );
        }
        fromArray(t, e = 0) {
          return (
            (this._x = t[e]),
            (this._y = t[e + 1]),
            (this._z = t[e + 2]),
            (this._w = t[e + 3]),
            this._onChangeCallback(),
            this
          );
        }
        toArray(t = [], e = 0) {
          return (
            (t[e] = this._x),
            (t[e + 1] = this._y),
            (t[e + 2] = this._z),
            (t[e + 3] = this._w),
            t
          );
        }
        fromBufferAttribute(t, e) {
          return (
            (this._x = t.getX(e)),
            (this._y = t.getY(e)),
            (this._z = t.getZ(e)),
            (this._w = t.getW(e)),
            this._onChangeCallback(),
            this
          );
        }
        toJSON() {
          return this.toArray();
        }
        _onChange(t) {
          return (this._onChangeCallback = t), this;
        }
        _onChangeCallback() {}
        *[Symbol.iterator]() {
          yield this._x, yield this._y, yield this._z, yield this._w;
        }
      }
    },
    351: (t, e, n) => {
      n.d(e, { i: () => l });
      var i = n(976),
        r = n(499);
      const a = new i.N(),
        s = new r.P(),
        o = new r.P();
      class l {
        constructor(t = new r.P(), e = -1) {
          (this.isSphere = !0), (this.center = t), (this.radius = e);
        }
        set(t, e) {
          return this.center.copy(t), (this.radius = e), this;
        }
        setFromPoints(t, e) {
          const n = this.center;
          void 0 !== e ? n.copy(e) : a.setFromPoints(t).getCenter(n);
          let i = 0;
          for (let e = 0, r = t.length; e < r; e++)
            i = Math.max(i, n.distanceToSquared(t[e]));
          return (this.radius = Math.sqrt(i)), this;
        }
        copy(t) {
          return this.center.copy(t.center), (this.radius = t.radius), this;
        }
        isEmpty() {
          return this.radius < 0;
        }
        makeEmpty() {
          return this.center.set(0, 0, 0), (this.radius = -1), this;
        }
        containsPoint(t) {
          return t.distanceToSquared(this.center) <= this.radius * this.radius;
        }
        distanceToPoint(t) {
          return t.distanceTo(this.center) - this.radius;
        }
        intersectsSphere(t) {
          const e = this.radius + t.radius;
          return t.center.distanceToSquared(this.center) <= e * e;
        }
        intersectsBox(t) {
          return t.intersectsSphere(this);
        }
        intersectsPlane(t) {
          return Math.abs(t.distanceToPoint(this.center)) <= this.radius;
        }
        clampPoint(t, e) {
          const n = this.center.distanceToSquared(t);
          return (
            e.copy(t),
            n > this.radius * this.radius &&
              (e.sub(this.center).normalize(),
              e.multiplyScalar(this.radius).add(this.center)),
            e
          );
        }
        getBoundingBox(t) {
          return this.isEmpty()
            ? (t.makeEmpty(), t)
            : (t.set(this.center, this.center),
              t.expandByScalar(this.radius),
              t);
        }
        applyMatrix4(t) {
          return (
            this.center.applyMatrix4(t),
            (this.radius = this.radius * t.getMaxScaleOnAxis()),
            this
          );
        }
        translate(t) {
          return this.center.add(t), this;
        }
        expandByPoint(t) {
          if (this.isEmpty())
            return this.center.copy(t), (this.radius = 0), this;
          s.subVectors(t, this.center);
          const e = s.lengthSq();
          if (e > this.radius * this.radius) {
            const t = Math.sqrt(e),
              n = 0.5 * (t - this.radius);
            this.center.addScaledVector(s, n / t), (this.radius += n);
          }
          return this;
        }
        union(t) {
          return t.isEmpty()
            ? this
            : this.isEmpty()
            ? (this.copy(t), this)
            : (!0 === this.center.equals(t.center)
                ? (this.radius = Math.max(this.radius, t.radius))
                : (o.subVectors(t.center, this.center).setLength(t.radius),
                  this.expandByPoint(s.copy(t.center).add(o)),
                  this.expandByPoint(s.copy(t.center).sub(o))),
              this);
        }
        equals(t) {
          return t.center.equals(this.center) && t.radius === this.radius;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
    },
    279: (t, e, n) => {
      n.d(e, { I: () => r });
      var i = n(823);
      class r {
        constructor(t = 0, e = 0) {
          (r.prototype.isVector2 = !0), (this.x = t), (this.y = e);
        }
        get width() {
          return this.x;
        }
        set width(t) {
          this.x = t;
        }
        get height() {
          return this.y;
        }
        set height(t) {
          this.y = t;
        }
        set(t, e) {
          return (this.x = t), (this.y = e), this;
        }
        setScalar(t) {
          return (this.x = t), (this.y = t), this;
        }
        setX(t) {
          return (this.x = t), this;
        }
        setY(t) {
          return (this.y = t), this;
        }
        setComponent(t, e) {
          switch (t) {
            case 0:
              this.x = e;
              break;
            case 1:
              this.y = e;
              break;
            default:
              throw new Error("index is out of range: " + t);
          }
          return this;
        }
        getComponent(t) {
          switch (t) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            default:
              throw new Error("index is out of range: " + t);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y);
        }
        copy(t) {
          return (this.x = t.x), (this.y = t.y), this;
        }
        add(t) {
          return (this.x += t.x), (this.y += t.y), this;
        }
        addScalar(t) {
          return (this.x += t), (this.y += t), this;
        }
        addVectors(t, e) {
          return (this.x = t.x + e.x), (this.y = t.y + e.y), this;
        }
        addScaledVector(t, e) {
          return (this.x += t.x * e), (this.y += t.y * e), this;
        }
        sub(t) {
          return (this.x -= t.x), (this.y -= t.y), this;
        }
        subScalar(t) {
          return (this.x -= t), (this.y -= t), this;
        }
        subVectors(t, e) {
          return (this.x = t.x - e.x), (this.y = t.y - e.y), this;
        }
        multiply(t) {
          return (this.x *= t.x), (this.y *= t.y), this;
        }
        multiplyScalar(t) {
          return (this.x *= t), (this.y *= t), this;
        }
        divide(t) {
          return (this.x /= t.x), (this.y /= t.y), this;
        }
        divideScalar(t) {
          return this.multiplyScalar(1 / t);
        }
        applyMatrix3(t) {
          const e = this.x,
            n = this.y,
            i = t.elements;
          return (
            (this.x = i[0] * e + i[3] * n + i[6]),
            (this.y = i[1] * e + i[4] * n + i[7]),
            this
          );
        }
        min(t) {
          return (
            (this.x = Math.min(this.x, t.x)),
            (this.y = Math.min(this.y, t.y)),
            this
          );
        }
        max(t) {
          return (
            (this.x = Math.max(this.x, t.x)),
            (this.y = Math.max(this.y, t.y)),
            this
          );
        }
        clamp(t, e) {
          return (
            (this.x = Math.max(t.x, Math.min(e.x, this.x))),
            (this.y = Math.max(t.y, Math.min(e.y, this.y))),
            this
          );
        }
        clampScalar(t, e) {
          return (
            (this.x = Math.max(t, Math.min(e, this.x))),
            (this.y = Math.max(t, Math.min(e, this.y))),
            this
          );
        }
        clampLength(t, e) {
          const n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(
            Math.max(t, Math.min(e, n))
          );
        }
        floor() {
          return (
            (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this
          );
        }
        ceil() {
          return (
            (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this
          );
        }
        round() {
          return (
            (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this
          );
        }
        roundToZero() {
          return (
            (this.x = Math.trunc(this.x)), (this.y = Math.trunc(this.y)), this
          );
        }
        negate() {
          return (this.x = -this.x), (this.y = -this.y), this;
        }
        dot(t) {
          return this.x * t.x + this.y * t.y;
        }
        cross(t) {
          return this.x * t.y - this.y * t.x;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        angle() {
          return Math.atan2(-this.y, -this.x) + Math.PI;
        }
        angleTo(t) {
          const e = Math.sqrt(this.lengthSq() * t.lengthSq());
          if (0 === e) return Math.PI / 2;
          const n = this.dot(t) / e;
          return Math.acos(i.qE(n, -1, 1));
        }
        distanceTo(t) {
          return Math.sqrt(this.distanceToSquared(t));
        }
        distanceToSquared(t) {
          const e = this.x - t.x,
            n = this.y - t.y;
          return e * e + n * n;
        }
        manhattanDistanceTo(t) {
          return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);
        }
        setLength(t) {
          return this.normalize().multiplyScalar(t);
        }
        lerp(t, e) {
          return (
            (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), this
          );
        }
        lerpVectors(t, e, n) {
          return (
            (this.x = t.x + (e.x - t.x) * n),
            (this.y = t.y + (e.y - t.y) * n),
            this
          );
        }
        equals(t) {
          return t.x === this.x && t.y === this.y;
        }
        fromArray(t, e = 0) {
          return (this.x = t[e]), (this.y = t[e + 1]), this;
        }
        toArray(t = [], e = 0) {
          return (t[e] = this.x), (t[e + 1] = this.y), t;
        }
        fromBufferAttribute(t, e) {
          return (this.x = t.getX(e)), (this.y = t.getY(e)), this;
        }
        rotateAround(t, e) {
          const n = Math.cos(e),
            i = Math.sin(e),
            r = this.x - t.x,
            a = this.y - t.y;
          return (
            (this.x = r * n - a * i + t.x), (this.y = r * i + a * n + t.y), this
          );
        }
        random() {
          return (this.x = Math.random()), (this.y = Math.random()), this;
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y;
        }
      }
    },
    499: (t, e, n) => {
      n.d(e, { P: () => a });
      var i = n(823),
        r = n(438);
      class a {
        constructor(t = 0, e = 0, n = 0) {
          (a.prototype.isVector3 = !0),
            (this.x = t),
            (this.y = e),
            (this.z = n);
        }
        set(t, e, n) {
          return (
            void 0 === n && (n = this.z),
            (this.x = t),
            (this.y = e),
            (this.z = n),
            this
          );
        }
        setScalar(t) {
          return (this.x = t), (this.y = t), (this.z = t), this;
        }
        setX(t) {
          return (this.x = t), this;
        }
        setY(t) {
          return (this.y = t), this;
        }
        setZ(t) {
          return (this.z = t), this;
        }
        setComponent(t, e) {
          switch (t) {
            case 0:
              this.x = e;
              break;
            case 1:
              this.y = e;
              break;
            case 2:
              this.z = e;
              break;
            default:
              throw new Error("index is out of range: " + t);
          }
          return this;
        }
        getComponent(t) {
          switch (t) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            default:
              throw new Error("index is out of range: " + t);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z);
        }
        copy(t) {
          return (this.x = t.x), (this.y = t.y), (this.z = t.z), this;
        }
        add(t) {
          return (this.x += t.x), (this.y += t.y), (this.z += t.z), this;
        }
        addScalar(t) {
          return (this.x += t), (this.y += t), (this.z += t), this;
        }
        addVectors(t, e) {
          return (
            (this.x = t.x + e.x),
            (this.y = t.y + e.y),
            (this.z = t.z + e.z),
            this
          );
        }
        addScaledVector(t, e) {
          return (
            (this.x += t.x * e), (this.y += t.y * e), (this.z += t.z * e), this
          );
        }
        sub(t) {
          return (this.x -= t.x), (this.y -= t.y), (this.z -= t.z), this;
        }
        subScalar(t) {
          return (this.x -= t), (this.y -= t), (this.z -= t), this;
        }
        subVectors(t, e) {
          return (
            (this.x = t.x - e.x),
            (this.y = t.y - e.y),
            (this.z = t.z - e.z),
            this
          );
        }
        multiply(t) {
          return (this.x *= t.x), (this.y *= t.y), (this.z *= t.z), this;
        }
        multiplyScalar(t) {
          return (this.x *= t), (this.y *= t), (this.z *= t), this;
        }
        multiplyVectors(t, e) {
          return (
            (this.x = t.x * e.x),
            (this.y = t.y * e.y),
            (this.z = t.z * e.z),
            this
          );
        }
        applyEuler(t) {
          return this.applyQuaternion(o.setFromEuler(t));
        }
        applyAxisAngle(t, e) {
          return this.applyQuaternion(o.setFromAxisAngle(t, e));
        }
        applyMatrix3(t) {
          const e = this.x,
            n = this.y,
            i = this.z,
            r = t.elements;
          return (
            (this.x = r[0] * e + r[3] * n + r[6] * i),
            (this.y = r[1] * e + r[4] * n + r[7] * i),
            (this.z = r[2] * e + r[5] * n + r[8] * i),
            this
          );
        }
        applyNormalMatrix(t) {
          return this.applyMatrix3(t).normalize();
        }
        applyMatrix4(t) {
          const e = this.x,
            n = this.y,
            i = this.z,
            r = t.elements,
            a = 1 / (r[3] * e + r[7] * n + r[11] * i + r[15]);
          return (
            (this.x = (r[0] * e + r[4] * n + r[8] * i + r[12]) * a),
            (this.y = (r[1] * e + r[5] * n + r[9] * i + r[13]) * a),
            (this.z = (r[2] * e + r[6] * n + r[10] * i + r[14]) * a),
            this
          );
        }
        applyQuaternion(t) {
          const e = this.x,
            n = this.y,
            i = this.z,
            r = t.x,
            a = t.y,
            s = t.z,
            o = t.w,
            l = 2 * (a * i - s * n),
            c = 2 * (s * e - r * i),
            u = 2 * (r * n - a * e);
          return (
            (this.x = e + o * l + a * u - s * c),
            (this.y = n + o * c + s * l - r * u),
            (this.z = i + o * u + r * c - a * l),
            this
          );
        }
        project(t) {
          return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(
            t.projectionMatrix
          );
        }
        unproject(t) {
          return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(
            t.matrixWorld
          );
        }
        transformDirection(t) {
          const e = this.x,
            n = this.y,
            i = this.z,
            r = t.elements;
          return (
            (this.x = r[0] * e + r[4] * n + r[8] * i),
            (this.y = r[1] * e + r[5] * n + r[9] * i),
            (this.z = r[2] * e + r[6] * n + r[10] * i),
            this.normalize()
          );
        }
        divide(t) {
          return (this.x /= t.x), (this.y /= t.y), (this.z /= t.z), this;
        }
        divideScalar(t) {
          return this.multiplyScalar(1 / t);
        }
        min(t) {
          return (
            (this.x = Math.min(this.x, t.x)),
            (this.y = Math.min(this.y, t.y)),
            (this.z = Math.min(this.z, t.z)),
            this
          );
        }
        max(t) {
          return (
            (this.x = Math.max(this.x, t.x)),
            (this.y = Math.max(this.y, t.y)),
            (this.z = Math.max(this.z, t.z)),
            this
          );
        }
        clamp(t, e) {
          return (
            (this.x = Math.max(t.x, Math.min(e.x, this.x))),
            (this.y = Math.max(t.y, Math.min(e.y, this.y))),
            (this.z = Math.max(t.z, Math.min(e.z, this.z))),
            this
          );
        }
        clampScalar(t, e) {
          return (
            (this.x = Math.max(t, Math.min(e, this.x))),
            (this.y = Math.max(t, Math.min(e, this.y))),
            (this.z = Math.max(t, Math.min(e, this.z))),
            this
          );
        }
        clampLength(t, e) {
          const n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(
            Math.max(t, Math.min(e, n))
          );
        }
        floor() {
          return (
            (this.x = Math.floor(this.x)),
            (this.y = Math.floor(this.y)),
            (this.z = Math.floor(this.z)),
            this
          );
        }
        ceil() {
          return (
            (this.x = Math.ceil(this.x)),
            (this.y = Math.ceil(this.y)),
            (this.z = Math.ceil(this.z)),
            this
          );
        }
        round() {
          return (
            (this.x = Math.round(this.x)),
            (this.y = Math.round(this.y)),
            (this.z = Math.round(this.z)),
            this
          );
        }
        roundToZero() {
          return (
            (this.x = Math.trunc(this.x)),
            (this.y = Math.trunc(this.y)),
            (this.z = Math.trunc(this.z)),
            this
          );
        }
        negate() {
          return (
            (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this
          );
        }
        dot(t) {
          return this.x * t.x + this.y * t.y + this.z * t.z;
        }
        lengthSq() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }
        length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }
        manhattanLength() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(t) {
          return this.normalize().multiplyScalar(t);
        }
        lerp(t, e) {
          return (
            (this.x += (t.x - this.x) * e),
            (this.y += (t.y - this.y) * e),
            (this.z += (t.z - this.z) * e),
            this
          );
        }
        lerpVectors(t, e, n) {
          return (
            (this.x = t.x + (e.x - t.x) * n),
            (this.y = t.y + (e.y - t.y) * n),
            (this.z = t.z + (e.z - t.z) * n),
            this
          );
        }
        cross(t) {
          return this.crossVectors(this, t);
        }
        crossVectors(t, e) {
          const n = t.x,
            i = t.y,
            r = t.z,
            a = e.x,
            s = e.y,
            o = e.z;
          return (
            (this.x = i * o - r * s),
            (this.y = r * a - n * o),
            (this.z = n * s - i * a),
            this
          );
        }
        projectOnVector(t) {
          const e = t.lengthSq();
          if (0 === e) return this.set(0, 0, 0);
          const n = t.dot(this) / e;
          return this.copy(t).multiplyScalar(n);
        }
        projectOnPlane(t) {
          return s.copy(this).projectOnVector(t), this.sub(s);
        }
        reflect(t) {
          return this.sub(s.copy(t).multiplyScalar(2 * this.dot(t)));
        }
        angleTo(t) {
          const e = Math.sqrt(this.lengthSq() * t.lengthSq());
          if (0 === e) return Math.PI / 2;
          const n = this.dot(t) / e;
          return Math.acos(i.qE(n, -1, 1));
        }
        distanceTo(t) {
          return Math.sqrt(this.distanceToSquared(t));
        }
        distanceToSquared(t) {
          const e = this.x - t.x,
            n = this.y - t.y,
            i = this.z - t.z;
          return e * e + n * n + i * i;
        }
        manhattanDistanceTo(t) {
          return (
            Math.abs(this.x - t.x) +
            Math.abs(this.y - t.y) +
            Math.abs(this.z - t.z)
          );
        }
        setFromSpherical(t) {
          return this.setFromSphericalCoords(t.radius, t.phi, t.theta);
        }
        setFromSphericalCoords(t, e, n) {
          const i = Math.sin(e) * t;
          return (
            (this.x = i * Math.sin(n)),
            (this.y = Math.cos(e) * t),
            (this.z = i * Math.cos(n)),
            this
          );
        }
        setFromCylindrical(t) {
          return this.setFromCylindricalCoords(t.radius, t.theta, t.y);
        }
        setFromCylindricalCoords(t, e, n) {
          return (
            (this.x = t * Math.sin(e)),
            (this.y = n),
            (this.z = t * Math.cos(e)),
            this
          );
        }
        setFromMatrixPosition(t) {
          const e = t.elements;
          return (this.x = e[12]), (this.y = e[13]), (this.z = e[14]), this;
        }
        setFromMatrixScale(t) {
          const e = this.setFromMatrixColumn(t, 0).length(),
            n = this.setFromMatrixColumn(t, 1).length(),
            i = this.setFromMatrixColumn(t, 2).length();
          return (this.x = e), (this.y = n), (this.z = i), this;
        }
        setFromMatrixColumn(t, e) {
          return this.fromArray(t.elements, 4 * e);
        }
        setFromMatrix3Column(t, e) {
          return this.fromArray(t.elements, 3 * e);
        }
        setFromEuler(t) {
          return (this.x = t._x), (this.y = t._y), (this.z = t._z), this;
        }
        setFromColor(t) {
          return (this.x = t.r), (this.y = t.g), (this.z = t.b), this;
        }
        equals(t) {
          return t.x === this.x && t.y === this.y && t.z === this.z;
        }
        fromArray(t, e = 0) {
          return (
            (this.x = t[e]), (this.y = t[e + 1]), (this.z = t[e + 2]), this
          );
        }
        toArray(t = [], e = 0) {
          return (t[e] = this.x), (t[e + 1] = this.y), (t[e + 2] = this.z), t;
        }
        fromBufferAttribute(t, e) {
          return (
            (this.x = t.getX(e)),
            (this.y = t.getY(e)),
            (this.z = t.getZ(e)),
            this
          );
        }
        random() {
          return (
            (this.x = Math.random()),
            (this.y = Math.random()),
            (this.z = Math.random()),
            this
          );
        }
        randomDirection() {
          const t = Math.random() * Math.PI * 2,
            e = 2 * Math.random() - 1,
            n = Math.sqrt(1 - e * e);
          return (
            (this.x = n * Math.cos(t)),
            (this.y = e),
            (this.z = n * Math.sin(t)),
            this
          );
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y, yield this.z;
        }
      }
      const s = new a(),
        o = new r.P();
    },
    733: (t, e, n) => {
      n.d(e, { I: () => i });
      class i {
        constructor(t = 0, e = 0, n = 0, r = 1) {
          (i.prototype.isVector4 = !0),
            (this.x = t),
            (this.y = e),
            (this.z = n),
            (this.w = r);
        }
        get width() {
          return this.z;
        }
        set width(t) {
          this.z = t;
        }
        get height() {
          return this.w;
        }
        set height(t) {
          this.w = t;
        }
        set(t, e, n, i) {
          return (this.x = t), (this.y = e), (this.z = n), (this.w = i), this;
        }
        setScalar(t) {
          return (this.x = t), (this.y = t), (this.z = t), (this.w = t), this;
        }
        setX(t) {
          return (this.x = t), this;
        }
        setY(t) {
          return (this.y = t), this;
        }
        setZ(t) {
          return (this.z = t), this;
        }
        setW(t) {
          return (this.w = t), this;
        }
        setComponent(t, e) {
          switch (t) {
            case 0:
              this.x = e;
              break;
            case 1:
              this.y = e;
              break;
            case 2:
              this.z = e;
              break;
            case 3:
              this.w = e;
              break;
            default:
              throw new Error("index is out of range: " + t);
          }
          return this;
        }
        getComponent(t) {
          switch (t) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            case 3:
              return this.w;
            default:
              throw new Error("index is out of range: " + t);
          }
        }
        clone() {
          return new this.constructor(this.x, this.y, this.z, this.w);
        }
        copy(t) {
          return (
            (this.x = t.x),
            (this.y = t.y),
            (this.z = t.z),
            (this.w = void 0 !== t.w ? t.w : 1),
            this
          );
        }
        add(t) {
          return (
            (this.x += t.x),
            (this.y += t.y),
            (this.z += t.z),
            (this.w += t.w),
            this
          );
        }
        addScalar(t) {
          return (
            (this.x += t), (this.y += t), (this.z += t), (this.w += t), this
          );
        }
        addVectors(t, e) {
          return (
            (this.x = t.x + e.x),
            (this.y = t.y + e.y),
            (this.z = t.z + e.z),
            (this.w = t.w + e.w),
            this
          );
        }
        addScaledVector(t, e) {
          return (
            (this.x += t.x * e),
            (this.y += t.y * e),
            (this.z += t.z * e),
            (this.w += t.w * e),
            this
          );
        }
        sub(t) {
          return (
            (this.x -= t.x),
            (this.y -= t.y),
            (this.z -= t.z),
            (this.w -= t.w),
            this
          );
        }
        subScalar(t) {
          return (
            (this.x -= t), (this.y -= t), (this.z -= t), (this.w -= t), this
          );
        }
        subVectors(t, e) {
          return (
            (this.x = t.x - e.x),
            (this.y = t.y - e.y),
            (this.z = t.z - e.z),
            (this.w = t.w - e.w),
            this
          );
        }
        multiply(t) {
          return (
            (this.x *= t.x),
            (this.y *= t.y),
            (this.z *= t.z),
            (this.w *= t.w),
            this
          );
        }
        multiplyScalar(t) {
          return (
            (this.x *= t), (this.y *= t), (this.z *= t), (this.w *= t), this
          );
        }
        applyMatrix4(t) {
          const e = this.x,
            n = this.y,
            i = this.z,
            r = this.w,
            a = t.elements;
          return (
            (this.x = a[0] * e + a[4] * n + a[8] * i + a[12] * r),
            (this.y = a[1] * e + a[5] * n + a[9] * i + a[13] * r),
            (this.z = a[2] * e + a[6] * n + a[10] * i + a[14] * r),
            (this.w = a[3] * e + a[7] * n + a[11] * i + a[15] * r),
            this
          );
        }
        divideScalar(t) {
          return this.multiplyScalar(1 / t);
        }
        setAxisAngleFromQuaternion(t) {
          this.w = 2 * Math.acos(t.w);
          const e = Math.sqrt(1 - t.w * t.w);
          return (
            e < 1e-4
              ? ((this.x = 1), (this.y = 0), (this.z = 0))
              : ((this.x = t.x / e), (this.y = t.y / e), (this.z = t.z / e)),
            this
          );
        }
        setAxisAngleFromRotationMatrix(t) {
          let e, n, i, r;
          const a = 0.01,
            s = 0.1,
            o = t.elements,
            l = o[0],
            c = o[4],
            u = o[8],
            h = o[1],
            d = o[5],
            p = o[9],
            f = o[2],
            m = o[6],
            g = o[10];
          if (
            Math.abs(c - h) < a &&
            Math.abs(u - f) < a &&
            Math.abs(p - m) < a
          ) {
            if (
              Math.abs(c + h) < s &&
              Math.abs(u + f) < s &&
              Math.abs(p + m) < s &&
              Math.abs(l + d + g - 3) < s
            )
              return this.set(1, 0, 0, 0), this;
            e = Math.PI;
            const t = (l + 1) / 2,
              o = (d + 1) / 2,
              _ = (g + 1) / 2,
              v = (c + h) / 4,
              x = (u + f) / 4,
              y = (p + m) / 4;
            return (
              t > o && t > _
                ? t < a
                  ? ((n = 0), (i = 0.707106781), (r = 0.707106781))
                  : ((n = Math.sqrt(t)), (i = v / n), (r = x / n))
                : o > _
                ? o < a
                  ? ((n = 0.707106781), (i = 0), (r = 0.707106781))
                  : ((i = Math.sqrt(o)), (n = v / i), (r = y / i))
                : _ < a
                ? ((n = 0.707106781), (i = 0.707106781), (r = 0))
                : ((r = Math.sqrt(_)), (n = x / r), (i = y / r)),
              this.set(n, i, r, e),
              this
            );
          }
          let _ = Math.sqrt(
            (m - p) * (m - p) + (u - f) * (u - f) + (h - c) * (h - c)
          );
          return (
            Math.abs(_) < 0.001 && (_ = 1),
            (this.x = (m - p) / _),
            (this.y = (u - f) / _),
            (this.z = (h - c) / _),
            (this.w = Math.acos((l + d + g - 1) / 2)),
            this
          );
        }
        min(t) {
          return (
            (this.x = Math.min(this.x, t.x)),
            (this.y = Math.min(this.y, t.y)),
            (this.z = Math.min(this.z, t.z)),
            (this.w = Math.min(this.w, t.w)),
            this
          );
        }
        max(t) {
          return (
            (this.x = Math.max(this.x, t.x)),
            (this.y = Math.max(this.y, t.y)),
            (this.z = Math.max(this.z, t.z)),
            (this.w = Math.max(this.w, t.w)),
            this
          );
        }
        clamp(t, e) {
          return (
            (this.x = Math.max(t.x, Math.min(e.x, this.x))),
            (this.y = Math.max(t.y, Math.min(e.y, this.y))),
            (this.z = Math.max(t.z, Math.min(e.z, this.z))),
            (this.w = Math.max(t.w, Math.min(e.w, this.w))),
            this
          );
        }
        clampScalar(t, e) {
          return (
            (this.x = Math.max(t, Math.min(e, this.x))),
            (this.y = Math.max(t, Math.min(e, this.y))),
            (this.z = Math.max(t, Math.min(e, this.z))),
            (this.w = Math.max(t, Math.min(e, this.w))),
            this
          );
        }
        clampLength(t, e) {
          const n = this.length();
          return this.divideScalar(n || 1).multiplyScalar(
            Math.max(t, Math.min(e, n))
          );
        }
        floor() {
          return (
            (this.x = Math.floor(this.x)),
            (this.y = Math.floor(this.y)),
            (this.z = Math.floor(this.z)),
            (this.w = Math.floor(this.w)),
            this
          );
        }
        ceil() {
          return (
            (this.x = Math.ceil(this.x)),
            (this.y = Math.ceil(this.y)),
            (this.z = Math.ceil(this.z)),
            (this.w = Math.ceil(this.w)),
            this
          );
        }
        round() {
          return (
            (this.x = Math.round(this.x)),
            (this.y = Math.round(this.y)),
            (this.z = Math.round(this.z)),
            (this.w = Math.round(this.w)),
            this
          );
        }
        roundToZero() {
          return (
            (this.x = Math.trunc(this.x)),
            (this.y = Math.trunc(this.y)),
            (this.z = Math.trunc(this.z)),
            (this.w = Math.trunc(this.w)),
            this
          );
        }
        negate() {
          return (
            (this.x = -this.x),
            (this.y = -this.y),
            (this.z = -this.z),
            (this.w = -this.w),
            this
          );
        }
        dot(t) {
          return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
        }
        lengthSq() {
          return (
            this.x * this.x +
            this.y * this.y +
            this.z * this.z +
            this.w * this.w
          );
        }
        length() {
          return Math.sqrt(
            this.x * this.x +
              this.y * this.y +
              this.z * this.z +
              this.w * this.w
          );
        }
        manhattanLength() {
          return (
            Math.abs(this.x) +
            Math.abs(this.y) +
            Math.abs(this.z) +
            Math.abs(this.w)
          );
        }
        normalize() {
          return this.divideScalar(this.length() || 1);
        }
        setLength(t) {
          return this.normalize().multiplyScalar(t);
        }
        lerp(t, e) {
          return (
            (this.x += (t.x - this.x) * e),
            (this.y += (t.y - this.y) * e),
            (this.z += (t.z - this.z) * e),
            (this.w += (t.w - this.w) * e),
            this
          );
        }
        lerpVectors(t, e, n) {
          return (
            (this.x = t.x + (e.x - t.x) * n),
            (this.y = t.y + (e.y - t.y) * n),
            (this.z = t.z + (e.z - t.z) * n),
            (this.w = t.w + (e.w - t.w) * n),
            this
          );
        }
        equals(t) {
          return (
            t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
          );
        }
        fromArray(t, e = 0) {
          return (
            (this.x = t[e]),
            (this.y = t[e + 1]),
            (this.z = t[e + 2]),
            (this.w = t[e + 3]),
            this
          );
        }
        toArray(t = [], e = 0) {
          return (
            (t[e] = this.x),
            (t[e + 1] = this.y),
            (t[e + 2] = this.z),
            (t[e + 3] = this.w),
            t
          );
        }
        fromBufferAttribute(t, e) {
          return (
            (this.x = t.getX(e)),
            (this.y = t.getY(e)),
            (this.z = t.getZ(e)),
            (this.w = t.getW(e)),
            this
          );
        }
        random() {
          return (
            (this.x = Math.random()),
            (this.y = Math.random()),
            (this.z = Math.random()),
            (this.w = Math.random()),
            this
          );
        }
        *[Symbol.iterator]() {
          yield this.x, yield this.y, yield this.z, yield this.w;
        }
      }
    },
    822: (t, e, n) => {
      n.d(e, { e: () => j });
      var i = n(499),
        r = n(279),
        a = n(351);
      const s = new i.P(),
        o = new i.P(),
        l = new i.P(),
        c = new i.P(),
        u = new i.P(),
        h = new i.P(),
        d = new i.P();
      class p {
        constructor(t = new i.P(), e = new i.P(0, 0, -1)) {
          (this.origin = t), (this.direction = e);
        }
        set(t, e) {
          return this.origin.copy(t), this.direction.copy(e), this;
        }
        copy(t) {
          return (
            this.origin.copy(t.origin), this.direction.copy(t.direction), this
          );
        }
        at(t, e) {
          return e.copy(this.origin).addScaledVector(this.direction, t);
        }
        lookAt(t) {
          return this.direction.copy(t).sub(this.origin).normalize(), this;
        }
        recast(t) {
          return this.origin.copy(this.at(t, s)), this;
        }
        closestPointToPoint(t, e) {
          e.subVectors(t, this.origin);
          const n = e.dot(this.direction);
          return n < 0
            ? e.copy(this.origin)
            : e.copy(this.origin).addScaledVector(this.direction, n);
        }
        distanceToPoint(t) {
          return Math.sqrt(this.distanceSqToPoint(t));
        }
        distanceSqToPoint(t) {
          const e = s.subVectors(t, this.origin).dot(this.direction);
          return e < 0
            ? this.origin.distanceToSquared(t)
            : (s.copy(this.origin).addScaledVector(this.direction, e),
              s.distanceToSquared(t));
        }
        distanceSqToSegment(t, e, n, i) {
          o.copy(t).add(e).multiplyScalar(0.5),
            l.copy(e).sub(t).normalize(),
            c.copy(this.origin).sub(o);
          const r = 0.5 * t.distanceTo(e),
            a = -this.direction.dot(l),
            s = c.dot(this.direction),
            u = -c.dot(l),
            h = c.lengthSq(),
            d = Math.abs(1 - a * a);
          let p, f, m, g;
          if (d > 0)
            if (((p = a * u - s), (f = a * s - u), (g = r * d), p >= 0))
              if (f >= -g)
                if (f <= g) {
                  const t = 1 / d;
                  (p *= t),
                    (f *= t),
                    (m = p * (p + a * f + 2 * s) + f * (a * p + f + 2 * u) + h);
                } else
                  (f = r),
                    (p = Math.max(0, -(a * f + s))),
                    (m = -p * p + f * (f + 2 * u) + h);
              else
                (f = -r),
                  (p = Math.max(0, -(a * f + s))),
                  (m = -p * p + f * (f + 2 * u) + h);
            else
              f <= -g
                ? ((p = Math.max(0, -(-a * r + s))),
                  (f = p > 0 ? -r : Math.min(Math.max(-r, -u), r)),
                  (m = -p * p + f * (f + 2 * u) + h))
                : f <= g
                ? ((p = 0),
                  (f = Math.min(Math.max(-r, -u), r)),
                  (m = f * (f + 2 * u) + h))
                : ((p = Math.max(0, -(a * r + s))),
                  (f = p > 0 ? r : Math.min(Math.max(-r, -u), r)),
                  (m = -p * p + f * (f + 2 * u) + h));
          else
            (f = a > 0 ? -r : r),
              (p = Math.max(0, -(a * f + s))),
              (m = -p * p + f * (f + 2 * u) + h);
          return (
            n && n.copy(this.origin).addScaledVector(this.direction, p),
            i && i.copy(o).addScaledVector(l, f),
            m
          );
        }
        intersectSphere(t, e) {
          s.subVectors(t.center, this.origin);
          const n = s.dot(this.direction),
            i = s.dot(s) - n * n,
            r = t.radius * t.radius;
          if (i > r) return null;
          const a = Math.sqrt(r - i),
            o = n - a,
            l = n + a;
          return l < 0 ? null : o < 0 ? this.at(l, e) : this.at(o, e);
        }
        intersectsSphere(t) {
          return this.distanceSqToPoint(t.center) <= t.radius * t.radius;
        }
        distanceToPlane(t) {
          const e = t.normal.dot(this.direction);
          if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null;
          const n = -(this.origin.dot(t.normal) + t.constant) / e;
          return n >= 0 ? n : null;
        }
        intersectPlane(t, e) {
          const n = this.distanceToPlane(t);
          return null === n ? null : this.at(n, e);
        }
        intersectsPlane(t) {
          const e = t.distanceToPoint(this.origin);
          return 0 === e || t.normal.dot(this.direction) * e < 0;
        }
        intersectBox(t, e) {
          let n, i, r, a, s, o;
          const l = 1 / this.direction.x,
            c = 1 / this.direction.y,
            u = 1 / this.direction.z,
            h = this.origin;
          return (
            l >= 0
              ? ((n = (t.min.x - h.x) * l), (i = (t.max.x - h.x) * l))
              : ((n = (t.max.x - h.x) * l), (i = (t.min.x - h.x) * l)),
            c >= 0
              ? ((r = (t.min.y - h.y) * c), (a = (t.max.y - h.y) * c))
              : ((r = (t.max.y - h.y) * c), (a = (t.min.y - h.y) * c)),
            n > a || r > i
              ? null
              : ((r > n || isNaN(n)) && (n = r),
                (a < i || isNaN(i)) && (i = a),
                u >= 0
                  ? ((s = (t.min.z - h.z) * u), (o = (t.max.z - h.z) * u))
                  : ((s = (t.max.z - h.z) * u), (o = (t.min.z - h.z) * u)),
                n > o || s > i
                  ? null
                  : ((s > n || n != n) && (n = s),
                    (o < i || i != i) && (i = o),
                    i < 0 ? null : this.at(n >= 0 ? n : i, e)))
          );
        }
        intersectsBox(t) {
          return null !== this.intersectBox(t, s);
        }
        intersectTriangle(t, e, n, i, r) {
          u.subVectors(e, t), h.subVectors(n, t), d.crossVectors(u, h);
          let a,
            s = this.direction.dot(d);
          if (s > 0) {
            if (i) return null;
            a = 1;
          } else {
            if (!(s < 0)) return null;
            (a = -1), (s = -s);
          }
          c.subVectors(this.origin, t);
          const o = a * this.direction.dot(h.crossVectors(c, h));
          if (o < 0) return null;
          const l = a * this.direction.dot(u.cross(c));
          if (l < 0) return null;
          if (o + l > s) return null;
          const p = -a * c.dot(d);
          return p < 0 ? null : this.at(p / s, r);
        }
        applyMatrix4(t) {
          return (
            this.origin.applyMatrix4(t),
            this.direction.transformDirection(t),
            this
          );
        }
        equals(t) {
          return (
            t.origin.equals(this.origin) && t.direction.equals(this.direction)
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      var f = n(591),
        m = n(813);
      const g = new i.P(),
        _ = new i.P(),
        v = new i.P(),
        x = new i.P(),
        y = new i.P(),
        M = new i.P(),
        S = new i.P(),
        E = new i.P(),
        b = new i.P(),
        T = new i.P();
      class w {
        constructor(t = new i.P(), e = new i.P(), n = new i.P()) {
          (this.a = t), (this.b = e), (this.c = n);
        }
        static getNormal(t, e, n, i) {
          i.subVectors(n, e), g.subVectors(t, e), i.cross(g);
          const r = i.lengthSq();
          return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0);
        }
        static getBarycoord(t, e, n, i, r) {
          g.subVectors(i, e), _.subVectors(n, e), v.subVectors(t, e);
          const a = g.dot(g),
            s = g.dot(_),
            o = g.dot(v),
            l = _.dot(_),
            c = _.dot(v),
            u = a * l - s * s;
          if (0 === u) return r.set(0, 0, 0), null;
          const h = 1 / u,
            d = (l * o - s * c) * h,
            p = (a * c - s * o) * h;
          return r.set(1 - d - p, p, d);
        }
        static containsPoint(t, e, n, i) {
          return (
            null !== this.getBarycoord(t, e, n, i, x) &&
            x.x >= 0 &&
            x.y >= 0 &&
            x.x + x.y <= 1
          );
        }
        static getInterpolation(t, e, n, i, r, a, s, o) {
          return null === this.getBarycoord(t, e, n, i, x)
            ? ((o.x = 0),
              (o.y = 0),
              "z" in o && (o.z = 0),
              "w" in o && (o.w = 0),
              null)
            : (o.setScalar(0),
              o.addScaledVector(r, x.x),
              o.addScaledVector(a, x.y),
              o.addScaledVector(s, x.z),
              o);
        }
        static isFrontFacing(t, e, n, i) {
          return g.subVectors(n, e), _.subVectors(t, e), g.cross(_).dot(i) < 0;
        }
        set(t, e, n) {
          return this.a.copy(t), this.b.copy(e), this.c.copy(n), this;
        }
        setFromPointsAndIndices(t, e, n, i) {
          return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[i]), this;
        }
        setFromAttributeAndIndices(t, e, n, i) {
          return (
            this.a.fromBufferAttribute(t, e),
            this.b.fromBufferAttribute(t, n),
            this.c.fromBufferAttribute(t, i),
            this
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(t) {
          return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this;
        }
        getArea() {
          return (
            g.subVectors(this.c, this.b),
            _.subVectors(this.a, this.b),
            0.5 * g.cross(_).length()
          );
        }
        getMidpoint(t) {
          return t
            .addVectors(this.a, this.b)
            .add(this.c)
            .multiplyScalar(1 / 3);
        }
        getNormal(t) {
          return w.getNormal(this.a, this.b, this.c, t);
        }
        getPlane(t) {
          return t.setFromCoplanarPoints(this.a, this.b, this.c);
        }
        getBarycoord(t, e) {
          return w.getBarycoord(t, this.a, this.b, this.c, e);
        }
        getInterpolation(t, e, n, i, r) {
          return w.getInterpolation(t, this.a, this.b, this.c, e, n, i, r);
        }
        containsPoint(t) {
          return w.containsPoint(t, this.a, this.b, this.c);
        }
        isFrontFacing(t) {
          return w.isFrontFacing(this.a, this.b, this.c, t);
        }
        intersectsBox(t) {
          return t.intersectsTriangle(this);
        }
        closestPointToPoint(t, e) {
          const n = this.a,
            i = this.b,
            r = this.c;
          let a, s;
          y.subVectors(i, n), M.subVectors(r, n), E.subVectors(t, n);
          const o = y.dot(E),
            l = M.dot(E);
          if (o <= 0 && l <= 0) return e.copy(n);
          b.subVectors(t, i);
          const c = y.dot(b),
            u = M.dot(b);
          if (c >= 0 && u <= c) return e.copy(i);
          const h = o * u - c * l;
          if (h <= 0 && o >= 0 && c <= 0)
            return (a = o / (o - c)), e.copy(n).addScaledVector(y, a);
          T.subVectors(t, r);
          const d = y.dot(T),
            p = M.dot(T);
          if (p >= 0 && d <= p) return e.copy(r);
          const f = d * l - o * p;
          if (f <= 0 && l >= 0 && p <= 0)
            return (s = l / (l - p)), e.copy(n).addScaledVector(M, s);
          const m = c * p - d * u;
          if (m <= 0 && u - c >= 0 && d - p >= 0)
            return (
              S.subVectors(r, i),
              (s = (u - c) / (u - c + (d - p))),
              e.copy(i).addScaledVector(S, s)
            );
          const g = 1 / (m + f + h);
          return (
            (a = f * g),
            (s = h * g),
            e.copy(n).addScaledVector(y, a).addScaledVector(M, s)
          );
        }
        equals(t) {
          return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c);
        }
      }
      var A = n(128),
        R = n(96),
        C = n(231);
      const P = new f.k(),
        L = new p(),
        U = new a.i(),
        D = new i.P(),
        I = new i.P(),
        N = new i.P(),
        O = new i.P(),
        F = new i.P(),
        B = new i.P(),
        z = new r.I(),
        k = new r.I(),
        H = new r.I(),
        G = new i.P(),
        V = new i.P(),
        W = new i.P(),
        X = new i.P(),
        q = new i.P();
      class j extends m.B {
        constructor(t = new C.L(), e = new R.V()) {
          super(),
            (this.isMesh = !0),
            (this.type = "Mesh"),
            (this.geometry = t),
            (this.material = e),
            this.updateMorphTargets();
        }
        copy(t, e) {
          return (
            super.copy(t, e),
            void 0 !== t.morphTargetInfluences &&
              (this.morphTargetInfluences = t.morphTargetInfluences.slice()),
            void 0 !== t.morphTargetDictionary &&
              (this.morphTargetDictionary = Object.assign(
                {},
                t.morphTargetDictionary
              )),
            (this.material = Array.isArray(t.material)
              ? t.material.slice()
              : t.material),
            (this.geometry = t.geometry),
            this
          );
        }
        updateMorphTargets() {
          const t = this.geometry.morphAttributes,
            e = Object.keys(t);
          if (e.length > 0) {
            const n = t[e[0]];
            if (void 0 !== n) {
              (this.morphTargetInfluences = []),
                (this.morphTargetDictionary = {});
              for (let t = 0, e = n.length; t < e; t++) {
                const e = n[t].name || String(t);
                this.morphTargetInfluences.push(0),
                  (this.morphTargetDictionary[e] = t);
              }
            }
          }
        }
        getVertexPosition(t, e) {
          const n = this.geometry,
            i = n.attributes.position,
            r = n.morphAttributes.position,
            a = n.morphTargetsRelative;
          e.fromBufferAttribute(i, t);
          const s = this.morphTargetInfluences;
          if (r && s) {
            B.set(0, 0, 0);
            for (let n = 0, i = r.length; n < i; n++) {
              const i = s[n],
                o = r[n];
              0 !== i &&
                (F.fromBufferAttribute(o, t),
                a ? B.addScaledVector(F, i) : B.addScaledVector(F.sub(e), i));
            }
            e.add(B);
          }
          return e;
        }
        raycast(t, e) {
          const n = this.geometry,
            i = this.material,
            r = this.matrixWorld;
          if (void 0 !== i) {
            if (
              (null === n.boundingSphere && n.computeBoundingSphere(),
              U.copy(n.boundingSphere),
              U.applyMatrix4(r),
              L.copy(t.ray).recast(t.near),
              !1 === U.containsPoint(L.origin))
            ) {
              if (null === L.intersectSphere(U, D)) return;
              if (L.origin.distanceToSquared(D) > (t.far - t.near) ** 2) return;
            }
            P.copy(r).invert(),
              L.copy(t.ray).applyMatrix4(P),
              (null !== n.boundingBox &&
                !1 === L.intersectsBox(n.boundingBox)) ||
                this._computeIntersections(t, e, L);
          }
        }
        _computeIntersections(t, e, n) {
          let i;
          const r = this.geometry,
            a = this.material,
            s = r.index,
            o = r.attributes.position,
            l = r.attributes.uv,
            c = r.attributes.uv1,
            u = r.attributes.normal,
            h = r.groups,
            d = r.drawRange;
          if (null !== s)
            if (Array.isArray(a))
              for (let r = 0, o = h.length; r < o; r++) {
                const o = h[r],
                  p = a[o.materialIndex];
                for (
                  let r = Math.max(o.start, d.start),
                    a = Math.min(
                      s.count,
                      Math.min(o.start + o.count, d.start + d.count)
                    );
                  r < a;
                  r += 3
                )
                  (i = Y(
                    this,
                    p,
                    t,
                    n,
                    l,
                    c,
                    u,
                    s.getX(r),
                    s.getX(r + 1),
                    s.getX(r + 2)
                  )),
                    i &&
                      ((i.faceIndex = Math.floor(r / 3)),
                      (i.face.materialIndex = o.materialIndex),
                      e.push(i));
              }
            else
              for (
                let r = Math.max(0, d.start),
                  o = Math.min(s.count, d.start + d.count);
                r < o;
                r += 3
              )
                (i = Y(
                  this,
                  a,
                  t,
                  n,
                  l,
                  c,
                  u,
                  s.getX(r),
                  s.getX(r + 1),
                  s.getX(r + 2)
                )),
                  i && ((i.faceIndex = Math.floor(r / 3)), e.push(i));
          else if (void 0 !== o)
            if (Array.isArray(a))
              for (let r = 0, s = h.length; r < s; r++) {
                const s = h[r],
                  p = a[s.materialIndex];
                for (
                  let r = Math.max(s.start, d.start),
                    a = Math.min(
                      o.count,
                      Math.min(s.start + s.count, d.start + d.count)
                    );
                  r < a;
                  r += 3
                )
                  (i = Y(this, p, t, n, l, c, u, r, r + 1, r + 2)),
                    i &&
                      ((i.faceIndex = Math.floor(r / 3)),
                      (i.face.materialIndex = s.materialIndex),
                      e.push(i));
              }
            else
              for (
                let r = Math.max(0, d.start),
                  s = Math.min(o.count, d.start + d.count);
                r < s;
                r += 3
              )
                (i = Y(this, a, t, n, l, c, u, r, r + 1, r + 2)),
                  i && ((i.faceIndex = Math.floor(r / 3)), e.push(i));
        }
      }
      function Y(t, e, n, a, s, o, l, c, u, h) {
        t.getVertexPosition(c, I),
          t.getVertexPosition(u, N),
          t.getVertexPosition(h, O);
        const d = (function (t, e, n, i, r, a, s, o) {
          let l;
          if (
            ((l =
              e.side === A.hsX
                ? i.intersectTriangle(s, a, r, !0, o)
                : i.intersectTriangle(r, a, s, e.side === A.hB5, o)),
            null === l)
          )
            return null;
          q.copy(o), q.applyMatrix4(t.matrixWorld);
          const c = n.ray.origin.distanceTo(q);
          return c < n.near || c > n.far
            ? null
            : { distance: c, point: q.clone(), object: t };
        })(t, e, n, a, I, N, O, X);
        if (d) {
          s &&
            (z.fromBufferAttribute(s, c),
            k.fromBufferAttribute(s, u),
            H.fromBufferAttribute(s, h),
            (d.uv = w.getInterpolation(X, I, N, O, z, k, H, new r.I()))),
            o &&
              (z.fromBufferAttribute(o, c),
              k.fromBufferAttribute(o, u),
              H.fromBufferAttribute(o, h),
              (d.uv1 = w.getInterpolation(X, I, N, O, z, k, H, new r.I()))),
            l &&
              (G.fromBufferAttribute(l, c),
              V.fromBufferAttribute(l, u),
              W.fromBufferAttribute(l, h),
              (d.normal = w.getInterpolation(X, I, N, O, G, V, W, new i.P())),
              d.normal.dot(a.direction) > 0 && d.normal.multiplyScalar(-1));
          const t = { a: c, b: u, c: h, normal: new i.P(), materialIndex: 0 };
          w.getNormal(I, N, O, t.normal), (d.face = t);
        }
        return d;
      }
    },
    471: (t, e, n) => {
      n.d(e, { n: () => c });
      var i = n(168),
        r = n(913),
        a = n(128),
        s = n(733),
        o = n(838);
      class l extends i.Q {
        constructor(t = 1, e = 1, n = {}) {
          super(),
            (this.isRenderTarget = !0),
            (this.width = t),
            (this.height = e),
            (this.depth = 1),
            (this.scissor = new s.I(0, 0, t, e)),
            (this.scissorTest = !1),
            (this.viewport = new s.I(0, 0, t, e));
          const i = { width: t, height: e, depth: 1 };
          n = Object.assign(
            {
              generateMipmaps: !1,
              internalFormat: null,
              minFilter: a.k6q,
              depthBuffer: !0,
              stencilBuffer: !1,
              resolveDepthBuffer: !0,
              resolveStencilBuffer: !0,
              depthTexture: null,
              samples: 0,
              count: 1,
            },
            n
          );
          const o = new r.g(
            i,
            n.mapping,
            n.wrapS,
            n.wrapT,
            n.magFilter,
            n.minFilter,
            n.format,
            n.type,
            n.anisotropy,
            n.colorSpace
          );
          (o.flipY = !1),
            (o.generateMipmaps = n.generateMipmaps),
            (o.internalFormat = n.internalFormat),
            (this.textures = []);
          const l = n.count;
          for (let t = 0; t < l; t++)
            (this.textures[t] = o.clone()),
              (this.textures[t].isRenderTargetTexture = !0);
          (this.depthBuffer = n.depthBuffer),
            (this.stencilBuffer = n.stencilBuffer),
            (this.resolveDepthBuffer = n.resolveDepthBuffer),
            (this.resolveStencilBuffer = n.resolveStencilBuffer),
            (this.depthTexture = n.depthTexture),
            (this.samples = n.samples);
        }
        get texture() {
          return this.textures[0];
        }
        set texture(t) {
          this.textures[0] = t;
        }
        setSize(t, e, n = 1) {
          if (this.width !== t || this.height !== e || this.depth !== n) {
            (this.width = t), (this.height = e), (this.depth = n);
            for (let i = 0, r = this.textures.length; i < r; i++)
              (this.textures[i].image.width = t),
                (this.textures[i].image.height = e),
                (this.textures[i].image.depth = n);
            this.dispose();
          }
          this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e);
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(t) {
          (this.width = t.width),
            (this.height = t.height),
            (this.depth = t.depth),
            this.scissor.copy(t.scissor),
            (this.scissorTest = t.scissorTest),
            this.viewport.copy(t.viewport),
            (this.textures.length = 0);
          for (let e = 0, n = t.textures.length; e < n; e++)
            (this.textures[e] = t.textures[e].clone()),
              (this.textures[e].isRenderTargetTexture = !0);
          const e = Object.assign({}, t.texture.image);
          return (
            (this.texture.source = new o.k(e)),
            (this.depthBuffer = t.depthBuffer),
            (this.stencilBuffer = t.stencilBuffer),
            (this.resolveDepthBuffer = t.resolveDepthBuffer),
            (this.resolveStencilBuffer = t.resolveStencilBuffer),
            null !== t.depthTexture &&
              (this.depthTexture = t.depthTexture.clone()),
            (this.samples = t.samples),
            this
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
      }
      class c extends l {
        constructor(t = 1, e = 1, n = {}) {
          super(t, e, n), (this.isWebGLRenderTarget = !0);
        }
      }
    },
    720: (t, e, n) => {
      n.d(e, { J: () => Un });
      var i = n(128),
        r = n(71),
        a = n(499),
        s = n(351),
        o = n(326);
      const l = new a.P(),
        c = new a.P(),
        u = new o.d();
      class h {
        constructor(t = new a.P(1, 0, 0), e = 0) {
          (this.isPlane = !0), (this.normal = t), (this.constant = e);
        }
        set(t, e) {
          return this.normal.copy(t), (this.constant = e), this;
        }
        setComponents(t, e, n, i) {
          return this.normal.set(t, e, n), (this.constant = i), this;
        }
        setFromNormalAndCoplanarPoint(t, e) {
          return (
            this.normal.copy(t), (this.constant = -e.dot(this.normal)), this
          );
        }
        setFromCoplanarPoints(t, e, n) {
          const i = l.subVectors(n, e).cross(c.subVectors(t, e)).normalize();
          return this.setFromNormalAndCoplanarPoint(i, t), this;
        }
        copy(t) {
          return this.normal.copy(t.normal), (this.constant = t.constant), this;
        }
        normalize() {
          const t = 1 / this.normal.length();
          return this.normal.multiplyScalar(t), (this.constant *= t), this;
        }
        negate() {
          return (this.constant *= -1), this.normal.negate(), this;
        }
        distanceToPoint(t) {
          return this.normal.dot(t) + this.constant;
        }
        distanceToSphere(t) {
          return this.distanceToPoint(t.center) - t.radius;
        }
        projectPoint(t, e) {
          return e
            .copy(t)
            .addScaledVector(this.normal, -this.distanceToPoint(t));
        }
        intersectLine(t, e) {
          const n = t.delta(l),
            i = this.normal.dot(n);
          if (0 === i)
            return 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : null;
          const r = -(t.start.dot(this.normal) + this.constant) / i;
          return r < 0 || r > 1 ? null : e.copy(t.start).addScaledVector(n, r);
        }
        intersectsLine(t) {
          const e = this.distanceToPoint(t.start),
            n = this.distanceToPoint(t.end);
          return (e < 0 && n > 0) || (n < 0 && e > 0);
        }
        intersectsBox(t) {
          return t.intersectsPlane(this);
        }
        intersectsSphere(t) {
          return t.intersectsPlane(this);
        }
        coplanarPoint(t) {
          return t.copy(this.normal).multiplyScalar(-this.constant);
        }
        applyMatrix4(t, e) {
          const n = e || u.getNormalMatrix(t),
            i = this.coplanarPoint(l).applyMatrix4(t),
            r = this.normal.applyMatrix3(n).normalize();
          return (this.constant = -i.dot(r)), this;
        }
        translate(t) {
          return (this.constant -= t.dot(this.normal)), this;
        }
        equals(t) {
          return t.normal.equals(this.normal) && t.constant === this.constant;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      const d = new s.i(),
        p = new a.P();
      class f {
        constructor(
          t = new h(),
          e = new h(),
          n = new h(),
          i = new h(),
          r = new h(),
          a = new h()
        ) {
          this.planes = [t, e, n, i, r, a];
        }
        set(t, e, n, i, r, a) {
          const s = this.planes;
          return (
            s[0].copy(t),
            s[1].copy(e),
            s[2].copy(n),
            s[3].copy(i),
            s[4].copy(r),
            s[5].copy(a),
            this
          );
        }
        copy(t) {
          const e = this.planes;
          for (let n = 0; n < 6; n++) e[n].copy(t.planes[n]);
          return this;
        }
        setFromProjectionMatrix(t, e = i.TdN) {
          const n = this.planes,
            r = t.elements,
            a = r[0],
            s = r[1],
            o = r[2],
            l = r[3],
            c = r[4],
            u = r[5],
            h = r[6],
            d = r[7],
            p = r[8],
            f = r[9],
            m = r[10],
            g = r[11],
            _ = r[12],
            v = r[13],
            x = r[14],
            y = r[15];
          if (
            (n[0].setComponents(l - a, d - c, g - p, y - _).normalize(),
            n[1].setComponents(l + a, d + c, g + p, y + _).normalize(),
            n[2].setComponents(l + s, d + u, g + f, y + v).normalize(),
            n[3].setComponents(l - s, d - u, g - f, y - v).normalize(),
            n[4].setComponents(l - o, d - h, g - m, y - x).normalize(),
            e === i.TdN)
          )
            n[5].setComponents(l + o, d + h, g + m, y + x).normalize();
          else {
            if (e !== i.i7u)
              throw new Error(
                "THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " +
                  e
              );
            n[5].setComponents(o, h, m, x).normalize();
          }
          return this;
        }
        intersectsObject(t) {
          if (void 0 !== t.boundingSphere)
            null === t.boundingSphere && t.computeBoundingSphere(),
              d.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);
          else {
            const e = t.geometry;
            null === e.boundingSphere && e.computeBoundingSphere(),
              d.copy(e.boundingSphere).applyMatrix4(t.matrixWorld);
          }
          return this.intersectsSphere(d);
        }
        intersectsSprite(t) {
          return (
            d.center.set(0, 0, 0),
            (d.radius = 0.7071067811865476),
            d.applyMatrix4(t.matrixWorld),
            this.intersectsSphere(d)
          );
        }
        intersectsSphere(t) {
          const e = this.planes,
            n = t.center,
            i = -t.radius;
          for (let t = 0; t < 6; t++)
            if (e[t].distanceToPoint(n) < i) return !1;
          return !0;
        }
        intersectsBox(t) {
          const e = this.planes;
          for (let n = 0; n < 6; n++) {
            const i = e[n];
            if (
              ((p.x = i.normal.x > 0 ? t.max.x : t.min.x),
              (p.y = i.normal.y > 0 ? t.max.y : t.min.y),
              (p.z = i.normal.z > 0 ? t.max.z : t.min.z),
              i.distanceToPoint(p) < 0)
            )
              return !1;
          }
          return !0;
        }
        containsPoint(t) {
          const e = this.planes;
          for (let n = 0; n < 6; n++)
            if (e[n].distanceToPoint(t) < 0) return !1;
          return !0;
        }
        clone() {
          return new this.constructor().copy(this);
        }
      }
      var m = n(591),
        g = n(733);
      function _() {
        let t = null,
          e = !1,
          n = null,
          i = null;
        function r(e, a) {
          n(e, a), (i = t.requestAnimationFrame(r));
        }
        return {
          start: function () {
            !0 !== e &&
              null !== n &&
              ((i = t.requestAnimationFrame(r)), (e = !0));
          },
          stop: function () {
            t.cancelAnimationFrame(i), (e = !1);
          },
          setAnimationLoop: function (t) {
            n = t;
          },
          setContext: function (e) {
            t = e;
          },
        };
      }
      function v(t) {
        const e = new WeakMap();
        return {
          get: function (t) {
            return t.isInterleavedBufferAttribute && (t = t.data), e.get(t);
          },
          remove: function (n) {
            n.isInterleavedBufferAttribute && (n = n.data);
            const i = e.get(n);
            i && (t.deleteBuffer(i.buffer), e.delete(n));
          },
          update: function (n, i) {
            if (n.isGLBufferAttribute) {
              const t = e.get(n);
              return void (
                (!t || t.version < n.version) &&
                e.set(n, {
                  buffer: n.buffer,
                  type: n.type,
                  bytesPerElement: n.elementSize,
                  version: n.version,
                })
              );
            }
            n.isInterleavedBufferAttribute && (n = n.data);
            const r = e.get(n);
            if (void 0 === r)
              e.set(
                n,
                (function (e, n) {
                  const i = e.array,
                    r = e.usage,
                    a = i.byteLength,
                    s = t.createBuffer();
                  let o;
                  if (
                    (t.bindBuffer(n, s),
                    t.bufferData(n, i, r),
                    e.onUploadCallback(),
                    i instanceof Float32Array)
                  )
                    o = t.FLOAT;
                  else if (i instanceof Uint16Array)
                    o = e.isFloat16BufferAttribute
                      ? t.HALF_FLOAT
                      : t.UNSIGNED_SHORT;
                  else if (i instanceof Int16Array) o = t.SHORT;
                  else if (i instanceof Uint32Array) o = t.UNSIGNED_INT;
                  else if (i instanceof Int32Array) o = t.INT;
                  else if (i instanceof Int8Array) o = t.BYTE;
                  else if (i instanceof Uint8Array) o = t.UNSIGNED_BYTE;
                  else {
                    if (!(i instanceof Uint8ClampedArray))
                      throw new Error(
                        "THREE.WebGLAttributes: Unsupported buffer data format: " +
                          i
                      );
                    o = t.UNSIGNED_BYTE;
                  }
                  return {
                    buffer: s,
                    type: o,
                    bytesPerElement: i.BYTES_PER_ELEMENT,
                    version: e.version,
                    size: a,
                  };
                })(n, i)
              );
            else if (r.version < n.version) {
              if (r.size !== n.array.byteLength)
                throw new Error(
                  "THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported."
                );
              !(function (e, n, i) {
                const r = n.array,
                  a = n._updateRange,
                  s = n.updateRanges;
                if (
                  (t.bindBuffer(i, e),
                  -1 === a.count && 0 === s.length && t.bufferSubData(i, 0, r),
                  0 !== s.length)
                ) {
                  for (let e = 0, n = s.length; e < n; e++) {
                    const n = s[e];
                    t.bufferSubData(
                      i,
                      n.start * r.BYTES_PER_ELEMENT,
                      r,
                      n.start,
                      n.count
                    );
                  }
                  n.clearUpdateRanges();
                }
                -1 !== a.count &&
                  (t.bufferSubData(
                    i,
                    a.offset * r.BYTES_PER_ELEMENT,
                    r,
                    a.offset,
                    a.count
                  ),
                  (a.count = -1)),
                  n.onUploadCallback();
              })(r.buffer, n, i),
                (r.version = n.version);
            }
          },
        };
      }
      var x = n(231),
        y = n(642);
      class M extends x.L {
        constructor(t = 1, e = 1, n = 1, i = 1, r = 1, s = 1) {
          super(),
            (this.type = "BoxGeometry"),
            (this.parameters = {
              width: t,
              height: e,
              depth: n,
              widthSegments: i,
              heightSegments: r,
              depthSegments: s,
            });
          const o = this;
          (i = Math.floor(i)), (r = Math.floor(r)), (s = Math.floor(s));
          const l = [],
            c = [],
            u = [],
            h = [];
          let d = 0,
            p = 0;
          function f(t, e, n, i, r, s, f, m, g, _, v) {
            const x = s / g,
              y = f / _,
              M = s / 2,
              S = f / 2,
              E = m / 2,
              b = g + 1,
              T = _ + 1;
            let w = 0,
              A = 0;
            const R = new a.P();
            for (let a = 0; a < T; a++) {
              const s = a * y - S;
              for (let o = 0; o < b; o++) {
                const l = o * x - M;
                (R[t] = l * i),
                  (R[e] = s * r),
                  (R[n] = E),
                  c.push(R.x, R.y, R.z),
                  (R[t] = 0),
                  (R[e] = 0),
                  (R[n] = m > 0 ? 1 : -1),
                  u.push(R.x, R.y, R.z),
                  h.push(o / g),
                  h.push(1 - a / _),
                  (w += 1);
              }
            }
            for (let t = 0; t < _; t++)
              for (let e = 0; e < g; e++) {
                const n = d + e + b * t,
                  i = d + e + b * (t + 1),
                  r = d + (e + 1) + b * (t + 1),
                  a = d + (e + 1) + b * t;
                l.push(n, i, a), l.push(i, r, a), (A += 6);
              }
            o.addGroup(p, A, v), (p += A), (d += w);
          }
          f("z", "y", "x", -1, -1, n, e, t, s, r, 0),
            f("z", "y", "x", 1, -1, n, e, -t, s, r, 1),
            f("x", "z", "y", 1, 1, t, n, e, i, s, 2),
            f("x", "z", "y", 1, -1, t, n, -e, i, s, 3),
            f("x", "y", "z", 1, -1, t, e, n, i, r, 4),
            f("x", "y", "z", -1, -1, t, e, -n, i, r, 5),
            this.setIndex(l),
            this.setAttribute("position", new y.qt(c, 3)),
            this.setAttribute("normal", new y.qt(u, 3)),
            this.setAttribute("uv", new y.qt(h, 2));
        }
        copy(t) {
          return (
            super.copy(t),
            (this.parameters = Object.assign({}, t.parameters)),
            this
          );
        }
        static fromJSON(t) {
          return new M(
            t.width,
            t.height,
            t.depth,
            t.widthSegments,
            t.heightSegments,
            t.depthSegments
          );
        }
      }
      var S = n(712),
        E = n(369),
        b = n(656),
        T = n(781),
        w = n(822);
      const A = {
        alphahash_fragment:
          "\n#ifdef USE_ALPHAHASH\n\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n\n#endif\n",
        alphahash_pars_fragment:
          "\n#ifdef USE_ALPHAHASH\n\n\t/**\n\t * See: https://casual-effects.com/research/Wyman2017Hashed/index.html\n\t */\n\n\tconst float ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.\n\n\tfloat hash2D( vec2 value ) {\n\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\n\t}\n\n\tfloat hash3D( vec3 value ) {\n\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\n\t}\n\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\n\t\t// Find the discretized derivatives of our coordinates\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\n\t\t// Find two nearest log-discretized noise scales\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\n\t\t// Compute alpha thresholds at our two noise scales\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\n\t\t// Factor to interpolate lerp with\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\n\t\t// Interpolate alpha threshold from noise at two scales\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\n\t\t// Pass into CDF to compute uniformly distrib threshold\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\n\t\t// Find our final, uniformly distributed alpha threshold (ατ)\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\n\t\t// Avoids ατ == 0. Could also do ατ =1-ατ\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\n\t}\n\n#endif\n",
        alphamap_fragment:
          "\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n\n#endif\n",
        alphamap_pars_fragment:
          "\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",
        alphatest_fragment:
          "\n#ifdef USE_ALPHATEST\n\n\t#ifdef ALPHA_TO_COVERAGE\n\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\n\t#else\n\n\tif ( diffuseColor.a < alphaTest ) discard;\n\n\t#endif\n\n#endif\n",
        alphatest_pars_fragment:
          "\n#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif\n",
        aomap_fragment:
          "\n#ifdef USE_AOMAP\n\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\n\t#endif\n\n#endif\n",
        aomap_pars_fragment:
          "\n#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif\n",
        batching_pars_vertex:
          "\n#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\n\t}\n#endif\n\n#ifdef USE_BATCHING_COLOR\n\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\n\t}\n\n#endif\n",
        batching_vertex:
          "\n#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif\n",
        begin_vertex:
          "\nvec3 transformed = vec3( position );\n\n#ifdef USE_ALPHAHASH\n\n\tvPosition = vec3( position );\n\n#endif\n",
        beginnormal_vertex:
          "\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_TANGENT\n\n\tvec3 objectTangent = vec3( tangent.xyz );\n\n#endif\n",
        bsdfs:
          "\n\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\n\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n",
        iridescence_fragment:
          "\n\n#ifdef USE_IRIDESCENCE\n\n\t// XYZ to linear-sRGB color space\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\n\t// Assume air interface for top\n\t// Note: We don't handle the case fresnel0 == 1\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\n\t}\n\n\t// Conversion FO/IOR\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\n\t}\n\n\t// ior is a value between 1.0 and 3.0. 1.0 is air interface\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\n\t}\n\n\t// Fresnel equations for dielectric/dielectric interfaces.\n\t// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n\t// Evaluation XYZ sensitivity curves in Fourier space\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\n\t}\n\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\n\t\tvec3 I;\n\n\t\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\t// Evaluate the cosTheta on the base layer (Snell law)\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\n\t\t// Handle TIR:\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\n\t\t\treturn vec3( 1.0 );\n\n\t\t}\n\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\n\t\t// First interface\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\n\t\t// Second interface\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0\n\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\n\t\t// Phase shift\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\n\t\t// Compound terms\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\n\t\t// Reflectance term for m = 0 (DC term amplitude)\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\n\t\t// Reflectance term for m > 0 (pairs of diracs)\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\n\t\t}\n\n\t\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\t\treturn max( I, vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n",
        bumpmap_pars_fragment:
          "\n#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n\t// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\n\t\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm; // normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n",
        clipping_planes_fragment:
          "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvec4 plane;\n\n\t#ifdef ALPHA_TO_COVERAGE\n\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\t\tfloat unionClipOpacity = 1.0;\n\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\n\t\t#endif\n\n\t\tdiffuseColor.a *= clipOpacity;\n\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\n\t#else\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\t\tbool clipped = true;\n\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\n\t\t\tif ( clipped ) discard;\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",
        clipping_planes_pars_fragment:
          "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n\n#endif\n",
        clipping_planes_pars_vertex:
          "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n#endif\n",
        clipping_planes_vertex:
          "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvClipPosition = - mvPosition.xyz;\n\n#endif\n",
        color_fragment:
          "\n#if defined( USE_COLOR_ALPHA )\n\n\tdiffuseColor *= vColor;\n\n#elif defined( USE_COLOR )\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif\n",
        color_pars_fragment:
          "\n#if defined( USE_COLOR_ALPHA )\n\n\tvarying vec4 vColor;\n\n#elif defined( USE_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",
        color_pars_vertex:
          "\n#if defined( USE_COLOR_ALPHA )\n\n\tvarying vec4 vColor;\n\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",
        color_vertex:
          "\n#if defined( USE_COLOR_ALPHA )\n\n\tvColor = vec4( 1.0 );\n\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\n\tvColor = vec3( 1.0 );\n\n#endif\n\n#ifdef USE_COLOR\n\n\tvColor *= color;\n\n#endif\n\n#ifdef USE_INSTANCING_COLOR\n\n\tvColor.xyz *= instanceColor.xyz;\n\n#endif\n\n#ifdef USE_BATCHING_COLOR\n\n\tvec3 batchingColor = getBatchingColor( batchId );\n\n\tvColor.xyz *= batchingColor.xyz;\n\n#endif\n",
        common:
          "\n#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n\n#ifndef saturate\n// <tonemapping_pars_fragment> may have defined saturate() already\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\n\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\n\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv ) {\n\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\n\treturn fract( sin( sn ) * c );\n\n}\n\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\n#ifdef USE_ALPHAHASH\n\n\tvarying vec3 vPosition;\n\n#endif\n\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t// dir can be either a direction vector or a normal vector\n\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\n}\n\nmat3 transposeMat3( const in mat3 m ) {\n\n\tmat3 tmp;\n\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\n\treturn tmp;\n\n}\n\nfloat luminance( const in vec3 rgb ) {\n\n\t// assumes rgb is in linear color space with sRGB primaries and D65 white point\n\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\n\treturn dot( weights, rgb );\n\n}\n\nbool isPerspectiveMatrix( mat4 m ) {\n\n\treturn m[ 2 ][ 3 ] == - 1.0;\n\n}\n\nvec2 equirectUv( in vec3 dir ) {\n\n\t// dir is assumed to be unit length\n\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\treturn vec2( u, v );\n\n}\n\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n} // validated\n\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\n\t// Original approximation by Christophe Schlick '94\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n\n} // validated\n\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\n\t// Original approximation by Christophe Schlick '94\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n\n} // validated\n",
        cube_uv_reflection_fragment:
          "\n#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\n\t// These shader functions convert between the UV coordinates of a single face of\n\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n\t// sampling a textureCube (not generally normalized ).\n\n\tfloat getFace( vec3 direction ) {\n\n\t\tvec3 absDirection = abs( direction );\n\n\t\tfloat face = - 1.0;\n\n\t\tif ( absDirection.x > absDirection.z ) {\n\n\t\t\tif ( absDirection.x > absDirection.y )\n\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t} else {\n\n\t\t\tif ( absDirection.z > absDirection.y )\n\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t}\n\n\t\treturn face;\n\n\t}\n\n\t// RH coordinate system; PMREM face-indexing convention\n\tvec2 getUV( vec3 direction, float face ) {\n\n\t\tvec2 uv;\n\n\t\tif ( face == 0.0 ) {\n\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x\n\n\t\t} else if ( face == 1.0 ) {\n\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y\n\n\t\t} else if ( face == 2.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z\n\n\t\t} else if ( face == 3.0 ) {\n\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x\n\n\t\t} else if ( face == 4.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y\n\n\t\t} else {\n\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z\n\n\t\t}\n\n\t\treturn 0.5 * ( uv + 1.0 );\n\n\t}\n\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\n\t\tfloat face = getFace( direction );\n\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\n\t\tfloat faceSize = exp2( mipInt );\n\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0; // #25071\n\n\t\tif ( face > 2.0 ) {\n\n\t\t\tuv.y += faceSize;\n\n\t\t\tface -= 3.0;\n\n\t\t}\n\n\t\tuv.x += face * faceSize;\n\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\n\t\t#ifdef texture2DGradEXT\n\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb; // disable anisotropic filtering\n\n\t\t#else\n\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\n\t\t#endif\n\n\t}\n\n\t// These defines must match with PMREMGenerator\n\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\n\tfloat roughnessToMip( float roughness ) {\n\n\t\tfloat mip = 0.0;\n\n\t\tif ( roughness >= cubeUV_r1 ) {\n\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\n\t\t} else {\n\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25\n\t\t}\n\n\t\treturn mip;\n\n\t}\n\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\n\t\tfloat mipF = fract( mip );\n\n\t\tfloat mipInt = floor( mip );\n\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\n\t\tif ( mipF == 0.0 ) {\n\n\t\t\treturn vec4( color0, 1.0 );\n\n\t\t} else {\n\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\n\t\t}\n\n\t}\n\n#endif\n",
        defaultnormal_vertex:
          "\n\nvec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\n\tvec3 transformedTangent = objectTangent;\n\n#endif\n\n#ifdef USE_BATCHING\n\n\t// this is in lieu of a per-instance normal-matrix\n\t// shear transforms in the instance matrix are not supported\n\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\ttransformedTangent = bm * transformedTangent;\n\n\t#endif\n\n#endif\n\n#ifdef USE_INSTANCING\n\n\t// this is in lieu of a per-instance normal-matrix\n\t// shear transforms in the instance matrix are not supported\n\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\ttransformedTangent = im * transformedTangent;\n\n\t#endif\n\n#endif\n\ntransformedNormal = normalMatrix * transformedNormal;\n\n#ifdef FLIP_SIDED\n\n\ttransformedNormal = - transformedNormal;\n\n#endif\n\n#ifdef USE_TANGENT\n\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\n\t#ifdef FLIP_SIDED\n\n\t\ttransformedTangent = - transformedTangent;\n\n\t#endif\n\n#endif\n",
        displacementmap_pars_vertex:
          "\n#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n",
        displacementmap_vertex:
          "\n#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n\n#endif\n",
        emissivemap_fragment:
          "\n#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n#endif\n",
        emissivemap_pars_fragment:
          "\n#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n",
        colorspace_fragment:
          "\ngl_FragColor = linearToOutputTexel( gl_FragColor );\n",
        colorspace_pars_fragment:
          "\n\n// http://www.russellcottrell.com/photo/matrixCalculator.htm\n\n// Linear sRGB => XYZ => Linear Display P3\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\n\n// Linear Display P3 => XYZ => Linear sRGB\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\n\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\n\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\n\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\n\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\n\n// @deprecated, r156\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\n\n// @deprecated, r156\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}\n",
        envmap_fragment:
          "\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvec3 cameraToFrag;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\n\t\t}\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#else\n\n\t\tvec4 envColor = vec4( 0.0 );\n\n\t#endif\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",
        envmap_common_pars_fragment:
          "\n#ifdef USE_ENVMAP\n\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif\n",
        envmap_pars_fragment:
          "\n#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n\n#endif\n",
        envmap_pars_vertex:
          "\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n#endif\n",
        envmap_physical_pars_fragment:
          "\n#ifdef USE_ENVMAP\n\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\n\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n\t#ifdef USE_ANISOTROPY\n\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t\t\t  // https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\n\t\t\t#else\n\n\t\t\t\treturn vec3( 0.0 );\n\n\t\t\t#endif\n\n\t\t}\n\n\t#endif\n\n#endif\n",
        envmap_vertex:
          "\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t#else\n\n\t\tvec3 cameraToVertex;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\t}\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",
        fog_vertex:
          "\n#ifdef USE_FOG\n\n\tvFogDepth = - mvPosition.z;\n\n#endif\n",
        fog_pars_vertex:
          "\n#ifdef USE_FOG\n\n\tvarying float vFogDepth;\n\n#endif\n",
        fog_fragment:
          "\n#ifdef USE_FOG\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n",
        fog_pars_fragment:
          "\n#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\n\t#endif\n\n#endif\n",
        gradientmap_pars_fragment:
          "\n\n#ifdef USE_GRADIENTMAP\n\n\tuniform sampler2D gradientMap;\n\n#endif\n\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\n\t// dotNL will be from -1.0 to 1.0\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\n\t#ifdef USE_GRADIENTMAP\n\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\n\t#else\n\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\n\t#endif\n\n}\n",
        lightmap_pars_fragment:
          "\n#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif\n",
        lights_lambert_fragment:
          "\nLambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;\n",
        lights_lambert_pars_fragment:
          "\nvarying vec3 vViewPosition;\n\nstruct LambertMaterial {\n\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n\n};\n\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert\n",
        lights_pars_begin:
          "\nuniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n\n#if defined( USE_LIGHT_PROBES )\n\n\tuniform vec3 lightProbe[ 9 ];\n\n#endif\n\n// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\n\t// normal is assumed to have unit length\n\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\n\treturn result;\n\n}\n\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\n\treturn irradiance;\n\n}\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n\tvec3 irradiance = ambientLightColor;\n\n\treturn irradiance;\n\n}\n\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\n\tif ( cutoffDistance > 0.0 ) {\n\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t}\n\n\treturn distanceFalloff;\n\n}\n\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n\n}\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\n\t\tlight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\n\t\tlight.direction = normalize( lVector );\n\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\tif ( spotAttenuation > 0.0 ) {\n\n\t\t\tfloat lightDistance = length( lVector );\n\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\n\t\t} else {\n\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\n\t\t}\n\n\t}\n\n#endif\n\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\n\t// BRDF approximation Texture is 64x64\n\tuniform sampler2D ltc_1; // RGBA Float\n\tuniform sampler2D ltc_2; // RGBA Float\n\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n",
        lights_toon_fragment:
          "\nToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\n",
        lights_toon_pars_fragment:
          "\nvarying vec3 vViewPosition;\n\nstruct ToonMaterial {\n\n\tvec3 diffuseColor;\n\n};\n\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n",
        lights_phong_fragment:
          "\nBlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",
        lights_phong_pars_fragment:
          "\nvarying vec3 vViewPosition;\n\nstruct BlinnPhongMaterial {\n\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n\n};\n\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n\n}\n\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n",
        lights_physical_fragment:
          "\nPhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\n\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\n\nmaterial.roughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.\nmaterial.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n\n#ifdef IOR\n\n\tmaterial.ior = ior;\n\n\t#ifdef USE_SPECULAR\n\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\n\t\t#endif\n\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\n\t\t#endif\n\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\n\t#else\n\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\n\t#endif\n\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n\n#else\n\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n\n#endif\n\n#ifdef USE_CLEARCOAT\n\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\n\t#ifdef USE_CLEARCOATMAP\n\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\n\t#endif\n\n\tmaterial.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model\n\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n\n#endif\n\n#ifdef USE_DISPERSION\n\n\tmaterial.dispersion = dispersion;\n\n#endif\n\n#ifdef USE_IRIDESCENCE\n\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\n\t#ifdef USE_IRIDESCENCEMAP\n\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\n\t#endif\n\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\n\t#else\n\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\n\t#endif\n\n#endif\n\n#ifdef USE_SHEEN\n\n\tmaterial.sheenColor = sheenColor;\n\n\t#ifdef USE_SHEEN_COLORMAP\n\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\n\t#endif\n\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\n\t#endif\n\n#endif\n\n#ifdef USE_ANISOTROPY\n\n\t#ifdef USE_ANISOTROPYMAP\n\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\n\t#else\n\n\t\tvec2 anisotropyV = anisotropyVector;\n\n\t#endif\n\n\tmaterial.anisotropy = length( anisotropyV );\n\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\n\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n\n#endif\n",
        lights_physical_pars_fragment:
          '\n\nstruct PhysicalMaterial {\n\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n\n};\n\n// temporary\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\n\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\n#ifdef USE_ANISOTROPY\n\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\n\t\treturn saturate(v);\n\n\t}\n\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\n\t}\n\n#endif\n\n#ifdef USE_CLEARCOAT\n\n\t// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\n\t\tfloat alpha = pow2( roughness ); // UE4\'s roughness\n\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\t\tfloat D = D_GGX( alpha, dotNH );\n\n\t\treturn F * ( V * D );\n\n\t}\n\n#endif\n\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\n\tfloat alpha = pow2( roughness ); // UE4\'s roughness\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\n\t#ifdef USE_IRIDESCENCE\n\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\n\t#endif\n\n\t#ifdef USE_ANISOTROPY\n\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\n\t#else\n\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\t\tfloat D = D_GGX( alpha, dotNH );\n\n\t#endif\n\n\treturn F * ( V * D );\n\n}\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\tfloat dotNV = saturate( dot( N, V ) );\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\treturn uv;\n\n}\n\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tfloat l = length( f );\n\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n\n}\n\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\n\tfloat x = dot( v1, v2 );\n\n\tfloat y = abs( x );\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\n\treturn cross( v1, v2 ) * theta_sintheta;\n\n}\n\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\n\t// construct orthonormal basis around N\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t// compute transform\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\n\t// transform rect\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\n\t// project rect onto sphere\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\n\t// calculate vector form factor\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\n\t// adjust for horizon clipping\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\n/*\n\t// alternate method of adjusting for horizon clipping (see referece)\n\t// refactoring required\n\tfloat len = length( vectorFormFactor );\n\tfloat z = vectorFormFactor.z / len;\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\t// tabulated horizon-clipped sphere, apparently...\n\tvec2 uv = vec2( z * 0.5 + 0.5, len );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\tfloat scale = texture2D( ltc_2, uv ).w;\n\n\tfloat result = len * scale;\n*/\n\n\treturn vec3( result );\n\n}\n\n// End Rect Area Light\n\n#if defined( USE_SHEEN )\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nfloat D_Charlie( float roughness, float dotNH ) {\n\n\tfloat alpha = pow2( roughness );\n\n\t// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n\n}\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\n\t// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n\n}\n\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\n\treturn sheenColor * ( D * V );\n\n}\n\n#endif\n\n// This is a curve-fit approxmation to the "Charlie sheen" BRDF integrated over the hemisphere from \n// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF". The analysis can be found\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\n\tfloat r2 = roughness * roughness;\n\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\n\treturn saturate( DG * RECIPROCAL_PI );\n\n}\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via \'environmentBRDF\' from "Physically Based Shading on Mobile"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tvec4 r = roughness * c0 + c1;\n\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\n\treturn fab;\n\n}\n\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\n\treturn specularColor * fab.x + specularF90 * fab.y;\n\n}\n\n// Fdez-Agüera\'s "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\n\t#ifdef USE_IRIDESCENCE\n\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\n\t#else\n\n\t\tvec3 Fr = specularColor;\n\n\t#endif\n\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21\n\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n\n}\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction\n\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\n\t}\n\n#endif\n\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\n\t#endif\n\n\t#ifdef USE_SHEEN\n\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\n\t#endif\n\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\n\t#endif\n\n\t#ifdef USE_SHEEN\n\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\n\t#endif\n\n\t// Both indirect specular and indirect diffuse light accumulate here\n\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\n\t#ifdef USE_IRIDESCENCE\n\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\n\t#else\n\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\n\t#endif\n\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n',
        lights_fragment_begin:
          "\n/**\n * This is a template that can be used to light a material, it uses pluggable\n * RenderEquations (RE)for specific lighting scenarios.\n *\n * Instructions for use:\n * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\n * - Create a material parameter that is to be passed as the third parameter to your lighting functions.\n *\n * TODO:\n * - Add area light support.\n * - Add sphere light support.\n * - Add diffuse light probe (irradiance cubemap) support.\n */\n\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n\n#ifdef USE_CLEARCOAT\n\n\tgeometryClearcoatNormal = clearcoatNormal;\n\n#endif\n\n#ifdef USE_IRIDESCENCE\n\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\n\tif ( material.iridescenceThickness == 0.0 ) {\n\n\t\tmaterial.iridescence = 0.0;\n\n\t} else {\n\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\n\t}\n\n\tif ( material.iridescence > 0.0 ) {\n\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\n\t\t// Iridescence F0 approximation\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\n\t}\n\n#endif\n\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\n\t\t// spot lights are ordered [shadows with maps, shadows without maps, maps without shadows, none]\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\tRectAreaLight rectAreaLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if defined( RE_IndirectDiffuse )\n\n\tvec3 iblIrradiance = vec3( 0.0 );\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\t#if defined( USE_LIGHT_PROBES )\n\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\n\t#endif\n\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n\n#endif\n",
        lights_fragment_maps:
          "\n#if defined( RE_IndirectDiffuse )\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\n\t\tirradiance += lightMapIrradiance;\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\n\t#ifdef USE_ANISOTROPY\n\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\n\t#else\n\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\n\t#endif\n\n#endif\n",
        lights_fragment_end:
          "\n#if defined( RE_IndirectDiffuse )\n\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\n#endif\n",
        logdepthbuf_fragment:
          "\n#if defined( USE_LOGDEPTHBUF )\n\n\t// Doing a strict comparison with == 1.0 can cause noise artifacts\n\t// on some platforms. See issue #17623.\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n\n#endif\n",
        logdepthbuf_pars_fragment:
          "\n#if defined( USE_LOGDEPTHBUF )\n\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n\n#endif\n",
        logdepthbuf_pars_vertex:
          "\n#ifdef USE_LOGDEPTHBUF\n\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n\n#endif\n",
        logdepthbuf_vertex:
          "\n#ifdef USE_LOGDEPTHBUF\n\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\n#endif\n",
        map_fragment:
          "\n#ifdef USE_MAP\n\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\n\t#ifdef DECODE_VIDEO_TEXTURE\n\n\t\t// use inline sRGB decode until browsers properly support SRGB8_ALPHA8 with video textures (#26516)\n\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\n\tdiffuseColor *= sampledDiffuseColor;\n\n#endif\n",
        map_pars_fragment:
          "\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n",
        map_particle_fragment:
          "\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\t#if defined( USE_POINTS_UV )\n\n\t\tvec2 uv = vUv;\n\n\t#else\n\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\n\t#endif\n\n#endif\n\n#ifdef USE_MAP\n\n\tdiffuseColor *= texture2D( map, uv );\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n\n#endif\n",
        map_particle_pars_fragment:
          "\n#if defined( USE_POINTS_UV )\n\n\tvarying vec2 vUv;\n\n#else\n\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\t\tuniform mat3 uvTransform;\n\n\t#endif\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",
        metalnessmap_fragment:
          "\nfloat metalnessFactor = metalness;\n\n#ifdef USE_METALNESSMAP\n\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tmetalnessFactor *= texelMetalness.b;\n\n#endif\n",
        metalnessmap_pars_fragment:
          "\n#ifdef USE_METALNESSMAP\n\n\tuniform sampler2D metalnessMap;\n\n#endif\n",
        morphinstance_vertex:
          "\n#ifdef USE_INSTANCING_MORPH\n\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\n\t}\n#endif\n",
        morphcolor_vertex:
          "\n#if defined( USE_MORPHCOLORS )\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\tvColor *= morphTargetBaseInfluence;\n\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\t#if defined( USE_COLOR_ALPHA )\n\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\n\t\t#elif defined( USE_COLOR )\n\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\n\t\t#endif\n\n\t}\n\n#endif\n",
        morphnormal_vertex:
          "\n#ifdef USE_MORPHNORMALS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\tobjectNormal *= morphTargetBaseInfluence;\n\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\n\t}\n\n#endif\n",
        morphtarget_pars_vertex:
          "\n#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_INSTANCING_MORPH\n\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\n\t#endif\n\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\n\t}\n\n#endif\n",
        morphtarget_vertex:
          "\n#ifdef USE_MORPHTARGETS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\ttransformed *= morphTargetBaseInfluence;\n\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\n\t}\n\n#endif\n",
        normal_fragment_begin:
          "\nfloat faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n\n#ifdef FLAT_SHADED\n\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#else\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal *= faceDirection;\n\n\t#endif\n\n#endif\n\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\n\t#ifdef USE_TANGENT\n\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\n\t#else\n\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\n\t#endif\n\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\n\t#endif\n\n#endif\n\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\t#ifdef USE_TANGENT\n\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\n\t#else\n\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\n\t#endif\n\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\n\t#endif\n\n#endif\n\n// non perturbed normal for clearcoat among others\n\nvec3 nonPerturbedNormal = normal;\n\n",
        normal_fragment_maps:
          "\n\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n\t#ifdef FLIP_SIDED\n\n\t\tnormal = - normal;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * faceDirection;\n\n\t#endif\n\n\tnormal = normalize( normalMatrix * normal );\n\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\n\tnormal = normalize( tbn * mapN );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n\n#endif\n",
        normal_pars_fragment:
          "\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n",
        normal_pars_vertex:
          "\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n",
        normal_vertex:
          "\n#ifndef FLAT_SHADED // normal is computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n",
        normalmap_pars_fragment:
          "\n#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n#endif\n\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\n\tuniform mat3 normalMatrix;\n\n#endif\n\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\n\t// Normal Mapping Without Precomputed Tangents\n\t// http://www.thetenthplanet.de/archives/1180\n\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\n\t\tvec3 N = surf_norm; // normalized\n\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\n\t\treturn mat3( T * scale, B * scale, N );\n\n\t}\n\n#endif\n",
        clearcoat_normal_fragment_begin:
          "\n#ifdef USE_CLEARCOAT\n\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n\n#endif\n",
        clearcoat_normal_fragment_maps:
          "\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n\n#endif\n",
        clearcoat_pars_fragment:
          "\n\n#ifdef USE_CLEARCOATMAP\n\n\tuniform sampler2D clearcoatMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n\n#endif\n\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tuniform sampler2D clearcoatRoughnessMap;\n\n#endif\n",
        iridescence_pars_fragment:
          "\n\n#ifdef USE_IRIDESCENCEMAP\n\n\tuniform sampler2D iridescenceMap;\n\n#endif\n\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\n\tuniform sampler2D iridescenceThicknessMap;\n\n#endif\n",
        opaque_fragment:
          "\n#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\n\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n",
        packing:
          "\nvec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\n\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\n\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\n\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\n\nconst float ShiftRight8 = 1. / 256.;\n\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\n\treturn r * PackUpscale;\n}\n\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\n\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\n\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\n\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\n\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\n\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\n\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\t// -near maps to 0; -far maps to 1\n\treturn ( viewZ + near ) / ( near - far );\n}\n\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\t// maps orthographic depth in [ 0, 1 ] to viewZ\n\treturn depth * ( near - far ) - near;\n}\n\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\n\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\t// -near maps to 0; -far maps to 1\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\n\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\t// maps perspective depth in [ 0, 1 ] to viewZ\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}\n",
        premultiplied_alpha_fragment:
          "\n#ifdef PREMULTIPLIED_ALPHA\n\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n#endif\n",
        project_vertex:
          "\nvec4 mvPosition = vec4( transformed, 1.0 );\n\n#ifdef USE_BATCHING\n\n\tmvPosition = batchingMatrix * mvPosition;\n\n#endif\n\n#ifdef USE_INSTANCING\n\n\tmvPosition = instanceMatrix * mvPosition;\n\n#endif\n\nmvPosition = modelViewMatrix * mvPosition;\n\ngl_Position = projectionMatrix * mvPosition;\n",
        dithering_fragment:
          "\n#ifdef DITHERING\n\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n\n#endif\n",
        dithering_pars_fragment:
          "\n#ifdef DITHERING\n\n\t// based on https://www.shadertoy.com/view/MslGR8\n\tvec3 dithering( vec3 color ) {\n\t\t//Calculate grid position\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\n\t\t//modify shift according to grid position.\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\n\t\t//shift the color by dither_shift\n\t\treturn color + dither_shift_RGB;\n\t}\n\n#endif\n",
        roughnessmap_fragment:
          "\nfloat roughnessFactor = roughness;\n\n#ifdef USE_ROUGHNESSMAP\n\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\troughnessFactor *= texelRoughness.g;\n\n#endif\n",
        roughnessmap_pars_fragment:
          "\n#ifdef USE_ROUGHNESSMAP\n\n\tuniform sampler2D roughnessMap;\n\n#endif\n",
        shadowmap_pars_fragment:
          "\n#if NUM_SPOT_LIGHT_COORDS > 0\n\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n\n#endif\n\n#if NUM_SPOT_LIGHT_MAPS > 0\n\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): create uniforms for area light shadows\n\n\t#endif\n\t*/\n\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\n\t}\n\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\n\t}\n\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\n\t\tfloat occlusion = 1.0;\n\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\n\t\tfloat hard_shadow = step( compare , distribution.x ); // Hard Shadow\n\n\t\tif (hard_shadow != 1.0 ) {\n\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality\n\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed\n\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\n\t\t}\n\t\treturn occlusion;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\n\t\tif ( frustumTest ) {\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#else // no percentage-closer filtering:\n\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\n\t// 2D texture:\n\t//\n\t// xzXZ\n\t//  y Y\n\t//\n\t// Y - Positive y direction\n\t// y - Negative y direction\n\t// X - Positive x direction\n\t// x - Negative x direction\n\t// Z - Positive z direction\n\t// z - Negative z direction\n\t//\n\t// Source and test bed:\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\t\t// Number of texels to avoid at the edge of each square\n\n\t\tvec3 absV = abs( v );\n\n\t\t// Intersect unit cube\n\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\n\t\t// Apply scale to avoid seams\n\n\t\t// two texels less per square (one texel will do for NEAREST)\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\t\t// Unwrap\n\n\t\t// space: -1 ... 1 range for each square\n\t\t//\n\t\t// #X##\t\tdim    := ( 4 , 2 )\n\t\t//  # #\t\tcenter := ( 1 , 1 )\n\n\t\tvec2 planar = v.xy;\n\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\tif ( absV.z >= almostOne ) {\n\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t}\n\n\t\t// Transform to UV space\n\n\t\t// scale := 0.5 / dim\n\t\t// translate := ( center + 0.5 ) / dim\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t}\n\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t\t// the vector from the light to the world-space position of the fragment.\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\n\t\t\t// dp = normalized distance from light to fragment position\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\n\t\t\tdp += shadowBias;\n\n\t\t\t// bd3D = base direction 3D\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t\t#else // no percentage-closer filtering\n\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\n\t\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n#endif\n",
        shadowmap_pars_vertex:
          "\n\n#if NUM_SPOT_LIGHT_COORDS > 0\n\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): uniforms for area light shadows\n\n\t#endif\n\t*/\n\n#endif\n",
        shadowmap_vertex:
          "\n\n#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\n\t// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n\n#endif\n\n#if defined( USE_SHADOWMAP )\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update vAreaShadowCoord with area light info\n\n\t#endif\n\t*/\n\n#endif\n\n// spot lights can be evaluated without active shadow mapping (when SpotLight.map is used)\n\n#if NUM_SPOT_LIGHT_COORDS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n\n",
        shadowmask_pars_fragment:
          "\nfloat getShadowMask() {\n\n\tfloat shadow = 1.0;\n\n\t#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\tDirectionalLightShadow directionalLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\tSpotLightShadow spotLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\tPointLightShadow pointLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update shadow for Area light\n\n\t#endif\n\t*/\n\n\t#endif\n\n\treturn shadow;\n\n}\n",
        skinbase_vertex:
          "\n#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif\n",
        skinning_pars_vertex:
          "\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\tuniform highp sampler2D boneTexture;\n\n\tmat4 getBoneMatrix( const in float i ) {\n\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\n\t\treturn mat4( v1, v2, v3, v4 );\n\n\t}\n\n#endif\n",
        skinning_vertex:
          "\n#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n\n#endif\n",
        skinnormal_vertex:
          "\n#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n\t#ifdef USE_TANGENT\n\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#endif\n\n#endif\n",
        specularmap_fragment:
          "\nfloat specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif\n",
        specularmap_pars_fragment:
          "\n#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif\n",
        tonemapping_fragment:
          "\n#if defined( TONE_MAPPING )\n\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n\n#endif\n",
        tonemapping_pars_fragment:
          "\n#ifndef saturate\n// <common> may have defined saturate() already\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n\nuniform float toneMappingExposure;\n\n// exposure only\nvec3 LinearToneMapping( vec3 color ) {\n\n\treturn saturate( toneMappingExposure * color );\n\n}\n\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\nvec3 ReinhardToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n\n}\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n\n}\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nvec3 RRTAndODTFit( vec3 v ) {\n\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n\n}\n\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\n\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\n\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\n\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\n\tcolor *= toneMappingExposure / 0.6;\n\n\tcolor = ACESInputMat * color;\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat * color;\n\n\t// Clamp to [0, 1]\n\treturn saturate( color );\n\n}\n\n// Matrices for rec 2020 <> rec 709 color space conversion\n// matrix provided in row-major order so it has been transposed\n// https://www.itu.int/pub/R-REP-BT.2407-2017\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\n\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\n\n// https://iolite-engine.com/blog_posts/minimal_agx_implementation\n// Mean error^2: 3.6705141e-06\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n\n}\n\n// AgX Tone Mapping implementation based on Filament, which in turn is based\n// on Blender's implementation using rec 2020 primaries\n// https://github.com/google/filament/pull/7236\n// Inputs and outputs are encoded as Linear-sRGB.\n\nvec3 AgXToneMapping( vec3 color ) {\n\n\t// AgX constants\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\n\t// explicit AgXOutsetMatrix generated from Filaments AgXOutsetMatrixInv\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\n\t// LOG2_MIN      = -10.0\n\t// LOG2_MAX      =  +6.5\n\t// MIDDLE_GRAY   =  0.18\n\tconst float AgxMinEv = - 12.47393;  // log2( pow( 2, LOG2_MIN ) * MIDDLE_GRAY )\n\tconst float AgxMaxEv = 4.026069;    // log2( pow( 2, LOG2_MAX ) * MIDDLE_GRAY )\n\n\tcolor *= toneMappingExposure;\n\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\n\tcolor = AgXInsetMatrix * color;\n\n\t// Log2 encoding\n\tcolor = max( color, 1e-10 ); // avoid 0 or negative numbers for log2\n\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\n\tcolor = clamp( color, 0.0, 1.0 );\n\n\t// Apply sigmoid\n\tcolor = agxDefaultContrastApprox( color );\n\n\t// Apply AgX look\n\t// v = agxLook(v, look);\n\n\tcolor = AgXOutsetMatrix * color;\n\n\t// Linearize\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\n\t// Gamut mapping. Simple clamp for now.\n\tcolor = clamp( color, 0.0, 1.0 );\n\n\treturn color;\n\n}\n\n// https://modelviewer.dev/examples/tone-mapping\n\nvec3 NeutralToneMapping( vec3 color ) {\n\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\n\tcolor *= toneMappingExposure;\n\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\n\tcolor -= offset;\n\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\n\tif ( peak < StartCompression ) return color;\n\n\tfloat d = 1. - StartCompression;\n\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\n\tcolor *= newPeak / peak;\n\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\n\treturn mix( color, vec3( newPeak ), g );\n\n}\n\nvec3 CustomToneMapping( vec3 color ) { return color; }\n",
        transmission_fragment:
          "\n#ifdef USE_TRANSMISSION\n\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\n\t#ifdef USE_TRANSMISSIONMAP\n\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\n\t#endif\n\n\t#ifdef USE_THICKNESSMAP\n\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\n\t#endif\n\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n\n#endif\n",
        transmission_pars_fragment:
          "\n#ifdef USE_TRANSMISSION\n\n\t// Transmission code is based on glTF-Sampler-Viewer\n\t// https://github.com/KhronosGroup/glTF-Sample-Viewer\n\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\n\t#ifdef USE_TRANSMISSIONMAP\n\n\t\tuniform sampler2D transmissionMap;\n\n\t#endif\n\n\t#ifdef USE_THICKNESSMAP\n\n\t\tuniform sampler2D thicknessMap;\n\n\t#endif\n\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\n\tvarying vec3 vWorldPosition;\n\n\t// Mipped Bicubic Texture Filtering by N8\n\t// https://www.shadertoy.com/view/Dl2SDW\n\n\tfloat w0( float a ) {\n\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\n\t}\n\n\tfloat w1( float a ) {\n\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\n\t}\n\n\tfloat w2( float a ){\n\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\n\t}\n\n\tfloat w3( float a ) {\n\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\n\t}\n\n\t// g0 and g1 are the two amplitude functions\n\tfloat g0( float a ) {\n\n\t\treturn w0( a ) + w1( a );\n\n\t}\n\n\tfloat g1( float a ) {\n\n\t\treturn w2( a ) + w3( a );\n\n\t}\n\n\t// h0 and h1 are the two offset functions\n\tfloat h0( float a ) {\n\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\n\t}\n\n\tfloat h1( float a ) {\n\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\n\t}\n\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\n\t\tuv = uv * texelSize.zw + 0.5;\n\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\n\t}\n\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\n\t}\n\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\n\t\t// Direction of refracted light.\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\n\t\t// Compute rotation-independant scaling of the model matrix.\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\n\t\t// The thickness is specified in local space.\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\n\t}\n\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\n\t\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\n\t}\n\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\n\t}\n\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\n\t\tif ( isinf( attenuationDistance ) ) {\n\n\t\t\t// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\n\t\t\treturn vec3( 1.0 );\n\n\t\t} else {\n\n\t\t\t// Compute light attenuation using Beer's law.\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\n\t\t\treturn transmittance;\n\n\t\t}\n\n\t}\n\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\n\t\t#ifdef USE_DISPERSION\n\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\n\t\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\n\t\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\n\t\t\t}\n\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t\n\t\t#endif\n\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\n\t\t// Get the specular component.\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\n\t\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job \n\t\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\n\t}\n#endif\n",
        uv_pars_fragment:
          "\n#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\n\tvarying vec2 vUv;\n\n#endif\n#ifdef USE_MAP\n\n\tvarying vec2 vMapUv;\n\n#endif\n#ifdef USE_ALPHAMAP\n\n\tvarying vec2 vAlphaMapUv;\n\n#endif\n#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vLightMapUv;\n\n#endif\n#ifdef USE_AOMAP\n\n\tvarying vec2 vAoMapUv;\n\n#endif\n#ifdef USE_BUMPMAP\n\n\tvarying vec2 vBumpMapUv;\n\n#endif\n#ifdef USE_NORMALMAP\n\n\tvarying vec2 vNormalMapUv;\n\n#endif\n#ifdef USE_EMISSIVEMAP\n\n\tvarying vec2 vEmissiveMapUv;\n\n#endif\n#ifdef USE_METALNESSMAP\n\n\tvarying vec2 vMetalnessMapUv;\n\n#endif\n#ifdef USE_ROUGHNESSMAP\n\n\tvarying vec2 vRoughnessMapUv;\n\n#endif\n#ifdef USE_ANISOTROPYMAP\n\n\tvarying vec2 vAnisotropyMapUv;\n\n#endif\n#ifdef USE_CLEARCOATMAP\n\n\tvarying vec2 vClearcoatMapUv;\n\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tvarying vec2 vClearcoatNormalMapUv;\n\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tvarying vec2 vClearcoatRoughnessMapUv;\n\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\n\tvarying vec2 vIridescenceMapUv;\n\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\n\tvarying vec2 vIridescenceThicknessMapUv;\n\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\n\tvarying vec2 vSheenColorMapUv;\n\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\n\tvarying vec2 vSheenRoughnessMapUv;\n\n#endif\n#ifdef USE_SPECULARMAP\n\n\tvarying vec2 vSpecularMapUv;\n\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\n\tvarying vec2 vSpecularColorMapUv;\n\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\n\tvarying vec2 vSpecularIntensityMapUv;\n\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n\n#endif\n#ifdef USE_THICKNESSMAP\n\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n\n#endif\n",
        uv_pars_vertex:
          "\n#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\n\tvarying vec2 vUv;\n\n#endif\n#ifdef USE_MAP\n\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n\n#endif\n#ifdef USE_ALPHAMAP\n\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n\n#endif\n#ifdef USE_LIGHTMAP\n\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n\n#endif\n#ifdef USE_AOMAP\n\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n\n#endif\n#ifdef USE_BUMPMAP\n\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n\n#endif\n#ifdef USE_NORMALMAP\n\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n\n#endif\n#ifdef USE_EMISSIVEMAP\n\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n\n#endif\n#ifdef USE_METALNESSMAP\n\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n\n#endif\n#ifdef USE_ROUGHNESSMAP\n\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n\n#endif\n#ifdef USE_ANISOTROPYMAP\n\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n\n#endif\n#ifdef USE_CLEARCOATMAP\n\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n\n#endif\n#ifdef USE_SPECULARMAP\n\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n\n#endif\n#ifdef USE_THICKNESSMAP\n\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n\n#endif\n",
        uv_vertex:
          "\n#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\n\tvUv = vec3( uv, 1 ).xy;\n\n#endif\n#ifdef USE_MAP\n\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_ALPHAMAP\n\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_LIGHTMAP\n\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_AOMAP\n\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_BUMPMAP\n\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_NORMALMAP\n\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_EMISSIVEMAP\n\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_METALNESSMAP\n\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_ROUGHNESSMAP\n\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_ANISOTROPYMAP\n\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_CLEARCOATMAP\n\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_SPECULARMAP\n\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n\n#endif\n#ifdef USE_THICKNESSMAP\n\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n\n#endif\n",
        worldpos_vertex:
          "\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\n\t#ifdef USE_BATCHING\n\n\t\tworldPosition = batchingMatrix * worldPosition;\n\n\t#endif\n\n\t#ifdef USE_INSTANCING\n\n\t\tworldPosition = instanceMatrix * worldPosition;\n\n\t#endif\n\n\tworldPosition = modelMatrix * worldPosition;\n\n#endif\n",
        background_vert:
          "\nvarying vec2 vUv;\nuniform mat3 uvTransform;\n\nvoid main() {\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n\n}\n",
        background_frag:
          "\nuniform sampler2D t2D;\nuniform float backgroundIntensity;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvec4 texColor = texture2D( t2D, vUv );\n\n\t#ifdef DECODE_VIDEO_TEXTURE\n\n\t\t// use inline sRGB decode until browsers properly support SRGB8_APLHA8 with video textures\n\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\n\t#endif\n\n\ttexColor.rgb *= backgroundIntensity;\n\n\tgl_FragColor = texColor;\n\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\n}\n",
        backgroundCube_vert:
          "\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",
        backgroundCube_frag:
          "\n\n#ifdef ENVMAP_TYPE_CUBE\n\n\tuniform samplerCube envMap;\n\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\tuniform sampler2D envMap;\n\n#endif\n\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\n\nvarying vec3 vWorldDirection;\n\n#include <cube_uv_reflection_fragment>\n\nvoid main() {\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\n\t#else\n\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t#endif\n\n\ttexColor.rgb *= backgroundIntensity;\n\n\tgl_FragColor = texColor;\n\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\n}\n",
        cube_vert:
          "\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",
        cube_frag:
          "\nuniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\n\nvarying vec3 vWorldDirection;\n\nvoid main() {\n\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\n}\n",
        depth_vert:
          "\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\n\t#include <morphinstance_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
        depth_frag:
          "\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
        distanceRGBA_vert:
          "\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\n\t#include <morphinstance_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",
        distanceRGBA_frag:
          "\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
        equirect_vert:
          "\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n}\n",
        equirect_frag:
          "\nuniform sampler2D tEquirect;\n\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvec3 direction = normalize( vWorldDirection );\n\n\tvec2 sampleUV = equirectUv( direction );\n\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\n}\n",
        linedashed_vert:
          "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",
        linedashed_frag:
          "\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",
        meshbasic_vert:
          "\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
        meshbasic_frag:
          "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
        meshlambert_vert:
          "\n#define LAMBERT\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
        meshlambert_frag:
          "\n#define LAMBERT\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
        meshmatcap_vert:
          "\n#define MATCAP\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n}\n",
        meshmatcap_frag:
          "\n#define MATCAP\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t#ifdef USE_MATCAP\n\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\n\t#else\n\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 ); // default if matcap is missing\n\n\t#endif\n\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
        meshnormal_vert:
          "\n#define NORMAL\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\n\tvViewPosition = - mvPosition.xyz;\n\n#endif\n\n}\n",
        meshnormal_frag:
          "\n#define NORMAL\n\nuniform float opacity;\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\n\t#ifdef OPAQUE\n\n\t\tgl_FragColor.a = 1.0;\n\n\t#endif\n\n}\n",
        meshphong_vert:
          "\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
        meshphong_frag:
          "\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
        meshphysical_vert:
          "\n#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifdef USE_TRANSMISSION\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n#ifdef USE_TRANSMISSION\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif\n}\n",
        meshphysical_frag:
          "\n#define STANDARD\n\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef IOR\n\tuniform float ior;\n#endif\n\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\n\t#include <transmission_fragment>\n\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\n\t#ifdef USE_SHEEN\n\n\t\t// Sheen energy compensation approximation calculation can be found at the end of\n\t\t// https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\n\t#endif\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
        meshtoon_vert:
          "\n#define TOON\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
        meshtoon_frag:
          "\n#define TOON\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
        points_vert:
          "\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n#ifdef USE_POINTS_UV\n\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n\n#endif\n\nvoid main() {\n\n\t#ifdef USE_POINTS_UV\n\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\t#endif\n\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\n\tgl_PointSize = size;\n\n\t#ifdef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\n\t#endif\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n\n}\n",
        points_frag:
          "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",
        shadow_vert:
          "\n#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\n\nvoid main() {\n\n\t#include <batching_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
        shadow_frag:
          "\nuniform vec3 color;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n\nvoid main() {\n\n\t#include <logdepthbuf_fragment>\n\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\n}\n",
        sprite_vert:
          "\nuniform float rotation;\nuniform vec2 center;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\n\tmvPosition.xy += rotatedPosition;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",
        sprite_frag:
          "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\n}\n",
      };
      var R = n(685),
        C = n(279);
      const P = {
          common: {
            diffuse: { value: new r.Q(16777215) },
            opacity: { value: 1 },
            map: { value: null },
            mapTransform: { value: new o.d() },
            alphaMap: { value: null },
            alphaMapTransform: { value: new o.d() },
            alphaTest: { value: 0 },
          },
          specularmap: {
            specularMap: { value: null },
            specularMapTransform: { value: new o.d() },
          },
          envmap: {
            envMap: { value: null },
            envMapRotation: { value: new o.d() },
            flipEnvMap: { value: -1 },
            reflectivity: { value: 1 },
            ior: { value: 1.5 },
            refractionRatio: { value: 0.98 },
          },
          aomap: {
            aoMap: { value: null },
            aoMapIntensity: { value: 1 },
            aoMapTransform: { value: new o.d() },
          },
          lightmap: {
            lightMap: { value: null },
            lightMapIntensity: { value: 1 },
            lightMapTransform: { value: new o.d() },
          },
          bumpmap: {
            bumpMap: { value: null },
            bumpMapTransform: { value: new o.d() },
            bumpScale: { value: 1 },
          },
          normalmap: {
            normalMap: { value: null },
            normalMapTransform: { value: new o.d() },
            normalScale: { value: new C.I(1, 1) },
          },
          displacementmap: {
            displacementMap: { value: null },
            displacementMapTransform: { value: new o.d() },
            displacementScale: { value: 1 },
            displacementBias: { value: 0 },
          },
          emissivemap: {
            emissiveMap: { value: null },
            emissiveMapTransform: { value: new o.d() },
          },
          metalnessmap: {
            metalnessMap: { value: null },
            metalnessMapTransform: { value: new o.d() },
          },
          roughnessmap: {
            roughnessMap: { value: null },
            roughnessMapTransform: { value: new o.d() },
          },
          gradientmap: { gradientMap: { value: null } },
          fog: {
            fogDensity: { value: 25e-5 },
            fogNear: { value: 1 },
            fogFar: { value: 2e3 },
            fogColor: { value: new r.Q(16777215) },
          },
          lights: {
            ambientLightColor: { value: [] },
            lightProbe: { value: [] },
            directionalLights: {
              value: [],
              properties: { direction: {}, color: {} },
            },
            directionalLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
              },
            },
            directionalShadowMap: { value: [] },
            directionalShadowMatrix: { value: [] },
            spotLights: {
              value: [],
              properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {},
              },
            },
            spotLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
              },
            },
            spotLightMap: { value: [] },
            spotShadowMap: { value: [] },
            spotLightMatrix: { value: [] },
            pointLights: {
              value: [],
              properties: {
                color: {},
                position: {},
                decay: {},
                distance: {},
              },
            },
            pointLightShadows: {
              value: [],
              properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {},
              },
            },
            pointShadowMap: { value: [] },
            pointShadowMatrix: { value: [] },
            hemisphereLights: {
              value: [],
              properties: { direction: {}, skyColor: {}, groundColor: {} },
            },
            rectAreaLights: {
              value: [],
              properties: { color: {}, position: {}, width: {}, height: {} },
            },
            ltc_1: { value: null },
            ltc_2: { value: null },
          },
          points: {
            diffuse: { value: new r.Q(16777215) },
            opacity: { value: 1 },
            size: { value: 1 },
            scale: { value: 1 },
            map: { value: null },
            alphaMap: { value: null },
            alphaMapTransform: { value: new o.d() },
            alphaTest: { value: 0 },
            uvTransform: { value: new o.d() },
          },
          sprite: {
            diffuse: { value: new r.Q(16777215) },
            opacity: { value: 1 },
            center: { value: new C.I(0.5, 0.5) },
            rotation: { value: 0 },
            map: { value: null },
            mapTransform: { value: new o.d() },
            alphaMap: { value: null },
            alphaMapTransform: { value: new o.d() },
            alphaTest: { value: 0 },
          },
        },
        L = {
          basic: {
            uniforms: (0, R.Ii)([
              P.common,
              P.specularmap,
              P.envmap,
              P.aomap,
              P.lightmap,
              P.fog,
            ]),
            vertexShader: A.meshbasic_vert,
            fragmentShader: A.meshbasic_frag,
          },
          lambert: {
            uniforms: (0, R.Ii)([
              P.common,
              P.specularmap,
              P.envmap,
              P.aomap,
              P.lightmap,
              P.emissivemap,
              P.bumpmap,
              P.normalmap,
              P.displacementmap,
              P.fog,
              P.lights,
              { emissive: { value: new r.Q(0) } },
            ]),
            vertexShader: A.meshlambert_vert,
            fragmentShader: A.meshlambert_frag,
          },
          phong: {
            uniforms: (0, R.Ii)([
              P.common,
              P.specularmap,
              P.envmap,
              P.aomap,
              P.lightmap,
              P.emissivemap,
              P.bumpmap,
              P.normalmap,
              P.displacementmap,
              P.fog,
              P.lights,
              {
                emissive: { value: new r.Q(0) },
                specular: { value: new r.Q(1118481) },
                shininess: { value: 30 },
              },
            ]),
            vertexShader: A.meshphong_vert,
            fragmentShader: A.meshphong_frag,
          },
          standard: {
            uniforms: (0, R.Ii)([
              P.common,
              P.envmap,
              P.aomap,
              P.lightmap,
              P.emissivemap,
              P.bumpmap,
              P.normalmap,
              P.displacementmap,
              P.roughnessmap,
              P.metalnessmap,
              P.fog,
              P.lights,
              {
                emissive: { value: new r.Q(0) },
                roughness: { value: 1 },
                metalness: { value: 0 },
                envMapIntensity: { value: 1 },
              },
            ]),
            vertexShader: A.meshphysical_vert,
            fragmentShader: A.meshphysical_frag,
          },
          toon: {
            uniforms: (0, R.Ii)([
              P.common,
              P.aomap,
              P.lightmap,
              P.emissivemap,
              P.bumpmap,
              P.normalmap,
              P.displacementmap,
              P.gradientmap,
              P.fog,
              P.lights,
              { emissive: { value: new r.Q(0) } },
            ]),
            vertexShader: A.meshtoon_vert,
            fragmentShader: A.meshtoon_frag,
          },
          matcap: {
            uniforms: (0, R.Ii)([
              P.common,
              P.bumpmap,
              P.normalmap,
              P.displacementmap,
              P.fog,
              { matcap: { value: null } },
            ]),
            vertexShader: A.meshmatcap_vert,
            fragmentShader: A.meshmatcap_frag,
          },
          points: {
            uniforms: (0, R.Ii)([P.points, P.fog]),
            vertexShader: A.points_vert,
            fragmentShader: A.points_frag,
          },
          dashed: {
            uniforms: (0, R.Ii)([
              P.common,
              P.fog,
              {
                scale: { value: 1 },
                dashSize: { value: 1 },
                totalSize: { value: 2 },
              },
            ]),
            vertexShader: A.linedashed_vert,
            fragmentShader: A.linedashed_frag,
          },
          depth: {
            uniforms: (0, R.Ii)([P.common, P.displacementmap]),
            vertexShader: A.depth_vert,
            fragmentShader: A.depth_frag,
          },
          normal: {
            uniforms: (0, R.Ii)([
              P.common,
              P.bumpmap,
              P.normalmap,
              P.displacementmap,
              { opacity: { value: 1 } },
            ]),
            vertexShader: A.meshnormal_vert,
            fragmentShader: A.meshnormal_frag,
          },
          sprite: {
            uniforms: (0, R.Ii)([P.sprite, P.fog]),
            vertexShader: A.sprite_vert,
            fragmentShader: A.sprite_frag,
          },
          background: {
            uniforms: {
              uvTransform: { value: new o.d() },
              t2D: { value: null },
              backgroundIntensity: { value: 1 },
            },
            vertexShader: A.background_vert,
            fragmentShader: A.background_frag,
          },
          backgroundCube: {
            uniforms: {
              envMap: { value: null },
              flipEnvMap: { value: -1 },
              backgroundBlurriness: { value: 0 },
              backgroundIntensity: { value: 1 },
              backgroundRotation: { value: new o.d() },
            },
            vertexShader: A.backgroundCube_vert,
            fragmentShader: A.backgroundCube_frag,
          },
          cube: {
            uniforms: {
              tCube: { value: null },
              tFlip: { value: -1 },
              opacity: { value: 1 },
            },
            vertexShader: A.cube_vert,
            fragmentShader: A.cube_frag,
          },
          equirect: {
            uniforms: { tEquirect: { value: null } },
            vertexShader: A.equirect_vert,
            fragmentShader: A.equirect_frag,
          },
          distanceRGBA: {
            uniforms: (0, R.Ii)([
              P.common,
              P.displacementmap,
              {
                referencePosition: { value: new a.P() },
                nearDistance: { value: 1 },
                farDistance: { value: 1e3 },
              },
            ]),
            vertexShader: A.distanceRGBA_vert,
            fragmentShader: A.distanceRGBA_frag,
          },
          shadow: {
            uniforms: (0, R.Ii)([
              P.lights,
              P.fog,
              { color: { value: new r.Q(0) }, opacity: { value: 1 } },
            ]),
            vertexShader: A.shadow_vert,
            fragmentShader: A.shadow_frag,
          },
        };
      L.physical = {
        uniforms: (0, R.Ii)([
          L.standard.uniforms,
          {
            clearcoat: { value: 0 },
            clearcoatMap: { value: null },
            clearcoatMapTransform: { value: new o.d() },
            clearcoatNormalMap: { value: null },
            clearcoatNormalMapTransform: { value: new o.d() },
            clearcoatNormalScale: { value: new C.I(1, 1) },
            clearcoatRoughness: { value: 0 },
            clearcoatRoughnessMap: { value: null },
            clearcoatRoughnessMapTransform: { value: new o.d() },
            dispersion: { value: 0 },
            iridescence: { value: 0 },
            iridescenceMap: { value: null },
            iridescenceMapTransform: { value: new o.d() },
            iridescenceIOR: { value: 1.3 },
            iridescenceThicknessMinimum: { value: 100 },
            iridescenceThicknessMaximum: { value: 400 },
            iridescenceThicknessMap: { value: null },
            iridescenceThicknessMapTransform: { value: new o.d() },
            sheen: { value: 0 },
            sheenColor: { value: new r.Q(0) },
            sheenColorMap: { value: null },
            sheenColorMapTransform: { value: new o.d() },
            sheenRoughness: { value: 1 },
            sheenRoughnessMap: { value: null },
            sheenRoughnessMapTransform: { value: new o.d() },
            transmission: { value: 0 },
            transmissionMap: { value: null },
            transmissionMapTransform: { value: new o.d() },
            transmissionSamplerSize: { value: new C.I() },
            transmissionSamplerMap: { value: null },
            thickness: { value: 0 },
            thicknessMap: { value: null },
            thicknessMapTransform: { value: new o.d() },
            attenuationDistance: { value: 0 },
            attenuationColor: { value: new r.Q(0) },
            specularColor: { value: new r.Q(1, 1, 1) },
            specularColorMap: { value: null },
            specularColorMapTransform: { value: new o.d() },
            specularIntensity: { value: 1 },
            specularIntensityMap: { value: null },
            specularIntensityMapTransform: { value: new o.d() },
            anisotropyVector: { value: new C.I() },
            anisotropyMap: { value: null },
            anisotropyMapTransform: { value: new o.d() },
          },
        ]),
        vertexShader: A.meshphysical_vert,
        fragmentShader: A.meshphysical_frag,
      };
      const U = { r: 0, b: 0, g: 0 },
        D = new T.O(),
        I = new m.k();
      function N(t, e, n, a, s, o, l) {
        const c = new r.Q(0);
        let u,
          h,
          d = !0 === o ? 0 : 1,
          p = null,
          f = 0,
          m = null;
        function g(t) {
          let i = !0 === t.isScene ? t.background : null;
          return (
            i &&
              i.isTexture &&
              (i = (t.backgroundBlurriness > 0 ? n : e).get(i)),
            i
          );
        }
        function _(e, n) {
          e.getRGB(U, (0, R._U)(t)),
            a.buffers.color.setClear(U.r, U.g, U.b, n, l);
        }
        return {
          getClearColor: function () {
            return c;
          },
          setClearColor: function (t, e = 1) {
            c.set(t), (d = e), _(c, d);
          },
          getClearAlpha: function () {
            return d;
          },
          setClearAlpha: function (t) {
            (d = t), _(c, d);
          },
          render: function (e) {
            let n = !1;
            const i = g(e);
            null === i ? _(c, d) : i && i.isColor && (_(i, 1), (n = !0));
            const r = t.xr.getEnvironmentBlendMode();
            "additive" === r
              ? a.buffers.color.setClear(0, 0, 0, 1, l)
              : "alpha-blend" === r && a.buffers.color.setClear(0, 0, 0, 0, l),
              (t.autoClear || n) &&
                (a.buffers.depth.setTest(!0),
                a.buffers.depth.setMask(!0),
                a.buffers.color.setMask(!0),
                t.clear(
                  t.autoClearColor,
                  t.autoClearDepth,
                  t.autoClearStencil
                ));
          },
          addToRenderList: function (e, n) {
            const r = g(n);
            r && (r.isCubeTexture || r.mapping === i.Om)
              ? (void 0 === h &&
                  ((h = new w.e(
                    new M(1, 1, 1),
                    new E.B({
                      name: "BackgroundCubeMaterial",
                      uniforms: (0, R.lx)(L.backgroundCube.uniforms),
                      vertexShader: L.backgroundCube.vertexShader,
                      fragmentShader: L.backgroundCube.fragmentShader,
                      side: i.hsX,
                      depthTest: !1,
                      depthWrite: !1,
                      fog: !1,
                    })
                  )),
                  h.geometry.deleteAttribute("normal"),
                  h.geometry.deleteAttribute("uv"),
                  (h.onBeforeRender = function (t, e, n) {
                    this.matrixWorld.copyPosition(n.matrixWorld);
                  }),
                  Object.defineProperty(h.material, "envMap", {
                    get: function () {
                      return this.uniforms.envMap.value;
                    },
                  }),
                  s.update(h)),
                D.copy(n.backgroundRotation),
                (D.x *= -1),
                (D.y *= -1),
                (D.z *= -1),
                r.isCubeTexture &&
                  !1 === r.isRenderTargetTexture &&
                  ((D.y *= -1), (D.z *= -1)),
                (h.material.uniforms.envMap.value = r),
                (h.material.uniforms.flipEnvMap.value =
                  r.isCubeTexture && !1 === r.isRenderTargetTexture ? -1 : 1),
                (h.material.uniforms.backgroundBlurriness.value =
                  n.backgroundBlurriness),
                (h.material.uniforms.backgroundIntensity.value =
                  n.backgroundIntensity),
                h.material.uniforms.backgroundRotation.value.setFromMatrix4(
                  I.makeRotationFromEuler(D)
                ),
                (h.material.toneMapped =
                  b.pp.getTransfer(r.colorSpace) !== i.KLL),
                (p === r && f === r.version && m === t.toneMapping) ||
                  ((h.material.needsUpdate = !0),
                  (p = r),
                  (f = r.version),
                  (m = t.toneMapping)),
                h.layers.enableAll(),
                e.unshift(h, h.geometry, h.material, 0, 0, null))
              : r &&
                r.isTexture &&
                (void 0 === u &&
                  ((u = new w.e(
                    new S.b(2, 2),
                    new E.B({
                      name: "BackgroundMaterial",
                      uniforms: (0, R.lx)(L.background.uniforms),
                      vertexShader: L.background.vertexShader,
                      fragmentShader: L.background.fragmentShader,
                      side: i.hB5,
                      depthTest: !1,
                      depthWrite: !1,
                      fog: !1,
                    })
                  )),
                  u.geometry.deleteAttribute("normal"),
                  Object.defineProperty(u.material, "map", {
                    get: function () {
                      return this.uniforms.t2D.value;
                    },
                  }),
                  s.update(u)),
                (u.material.uniforms.t2D.value = r),
                (u.material.uniforms.backgroundIntensity.value =
                  n.backgroundIntensity),
                (u.material.toneMapped =
                  b.pp.getTransfer(r.colorSpace) !== i.KLL),
                !0 === r.matrixAutoUpdate && r.updateMatrix(),
                u.material.uniforms.uvTransform.value.copy(r.matrix),
                (p === r && f === r.version && m === t.toneMapping) ||
                  ((u.material.needsUpdate = !0),
                  (p = r),
                  (f = r.version),
                  (m = t.toneMapping)),
                u.layers.enableAll(),
                e.unshift(u, u.geometry, u.material, 0, 0, null));
          },
        };
      }
      function O(t, e) {
        const n = t.getParameter(t.MAX_VERTEX_ATTRIBS),
          r = {},
          a = u(null);
        let s = a,
          o = !1;
        function l(e) {
          return t.bindVertexArray(e);
        }
        function c(e) {
          return t.deleteVertexArray(e);
        }
        function u(t) {
          const e = [],
            i = [],
            r = [];
          for (let t = 0; t < n; t++) (e[t] = 0), (i[t] = 0), (r[t] = 0);
          return {
            geometry: null,
            program: null,
            wireframe: !1,
            newAttributes: e,
            enabledAttributes: i,
            attributeDivisors: r,
            object: t,
            attributes: {},
            index: null,
          };
        }
        function h() {
          const t = s.newAttributes;
          for (let e = 0, n = t.length; e < n; e++) t[e] = 0;
        }
        function d(t) {
          p(t, 0);
        }
        function p(e, n) {
          const i = s.newAttributes,
            r = s.enabledAttributes,
            a = s.attributeDivisors;
          (i[e] = 1),
            0 === r[e] && (t.enableVertexAttribArray(e), (r[e] = 1)),
            a[e] !== n && (t.vertexAttribDivisor(e, n), (a[e] = n));
        }
        function f() {
          const e = s.newAttributes,
            n = s.enabledAttributes;
          for (let i = 0, r = n.length; i < r; i++)
            n[i] !== e[i] && (t.disableVertexAttribArray(i), (n[i] = 0));
        }
        function m(e, n, i, r, a, s, o) {
          !0 === o
            ? t.vertexAttribIPointer(e, n, i, a, s)
            : t.vertexAttribPointer(e, n, i, r, a, s);
        }
        function g() {
          _(), (o = !0), s !== a && ((s = a), l(s.object));
        }
        function _() {
          (a.geometry = null), (a.program = null), (a.wireframe = !1);
        }
        return {
          setup: function (n, a, c, g, _) {
            let v = !1;
            const x = (function (e, n, i) {
              const a = !0 === i.wireframe;
              let s = r[e.id];
              void 0 === s && ((s = {}), (r[e.id] = s));
              let o = s[n.id];
              void 0 === o && ((o = {}), (s[n.id] = o));
              let l = o[a];
              return (
                void 0 === l && ((l = u(t.createVertexArray())), (o[a] = l)), l
              );
            })(g, c, a);
            s !== x && ((s = x), l(s.object)),
              (v = (function (t, e, n, i) {
                const r = s.attributes,
                  a = e.attributes;
                let o = 0;
                const l = n.getAttributes();
                for (const e in l)
                  if (l[e].location >= 0) {
                    const n = r[e];
                    let i = a[e];
                    if (
                      (void 0 === i &&
                        ("instanceMatrix" === e &&
                          t.instanceMatrix &&
                          (i = t.instanceMatrix),
                        "instanceColor" === e &&
                          t.instanceColor &&
                          (i = t.instanceColor)),
                      void 0 === n)
                    )
                      return !0;
                    if (n.attribute !== i) return !0;
                    if (i && n.data !== i.data) return !0;
                    o++;
                  }
                return s.attributesNum !== o || s.index !== i;
              })(n, g, c, _)),
              v &&
                (function (t, e, n, i) {
                  const r = {},
                    a = e.attributes;
                  let o = 0;
                  const l = n.getAttributes();
                  for (const e in l)
                    if (l[e].location >= 0) {
                      let n = a[e];
                      void 0 === n &&
                        ("instanceMatrix" === e &&
                          t.instanceMatrix &&
                          (n = t.instanceMatrix),
                        "instanceColor" === e &&
                          t.instanceColor &&
                          (n = t.instanceColor));
                      const i = {};
                      (i.attribute = n),
                        n && n.data && (i.data = n.data),
                        (r[e] = i),
                        o++;
                    }
                  (s.attributes = r), (s.attributesNum = o), (s.index = i);
                })(n, g, c, _),
              null !== _ && e.update(_, t.ELEMENT_ARRAY_BUFFER),
              (v || o) &&
                ((o = !1),
                (function (n, r, a, s) {
                  h();
                  const o = s.attributes,
                    l = a.getAttributes(),
                    c = r.defaultAttributeValues;
                  for (const r in l) {
                    const a = l[r];
                    if (a.location >= 0) {
                      let l = o[r];
                      if (
                        (void 0 === l &&
                          ("instanceMatrix" === r &&
                            n.instanceMatrix &&
                            (l = n.instanceMatrix),
                          "instanceColor" === r &&
                            n.instanceColor &&
                            (l = n.instanceColor)),
                        void 0 !== l)
                      ) {
                        const r = l.normalized,
                          o = l.itemSize,
                          c = e.get(l);
                        if (void 0 === c) continue;
                        const u = c.buffer,
                          h = c.type,
                          f = c.bytesPerElement,
                          g =
                            h === t.INT ||
                            h === t.UNSIGNED_INT ||
                            l.gpuType === i.Yuy;
                        if (l.isInterleavedBufferAttribute) {
                          const e = l.data,
                            i = e.stride,
                            c = l.offset;
                          if (e.isInstancedInterleavedBuffer) {
                            for (let t = 0; t < a.locationSize; t++)
                              p(a.location + t, e.meshPerAttribute);
                            !0 !== n.isInstancedMesh &&
                              void 0 === s._maxInstanceCount &&
                              (s._maxInstanceCount =
                                e.meshPerAttribute * e.count);
                          } else
                            for (let t = 0; t < a.locationSize; t++)
                              d(a.location + t);
                          t.bindBuffer(t.ARRAY_BUFFER, u);
                          for (let t = 0; t < a.locationSize; t++)
                            m(
                              a.location + t,
                              o / a.locationSize,
                              h,
                              r,
                              i * f,
                              (c + (o / a.locationSize) * t) * f,
                              g
                            );
                        } else {
                          if (l.isInstancedBufferAttribute) {
                            for (let t = 0; t < a.locationSize; t++)
                              p(a.location + t, l.meshPerAttribute);
                            !0 !== n.isInstancedMesh &&
                              void 0 === s._maxInstanceCount &&
                              (s._maxInstanceCount =
                                l.meshPerAttribute * l.count);
                          } else
                            for (let t = 0; t < a.locationSize; t++)
                              d(a.location + t);
                          t.bindBuffer(t.ARRAY_BUFFER, u);
                          for (let t = 0; t < a.locationSize; t++)
                            m(
                              a.location + t,
                              o / a.locationSize,
                              h,
                              r,
                              o * f,
                              (o / a.locationSize) * t * f,
                              g
                            );
                        }
                      } else if (void 0 !== c) {
                        const e = c[r];
                        if (void 0 !== e)
                          switch (e.length) {
                            case 2:
                              t.vertexAttrib2fv(a.location, e);
                              break;
                            case 3:
                              t.vertexAttrib3fv(a.location, e);
                              break;
                            case 4:
                              t.vertexAttrib4fv(a.location, e);
                              break;
                            default:
                              t.vertexAttrib1fv(a.location, e);
                          }
                      }
                    }
                  }
                  f();
                })(n, a, c, g),
                null !== _ &&
                  t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, e.get(_).buffer));
          },
          reset: g,
          resetDefaultState: _,
          dispose: function () {
            g();
            for (const t in r) {
              const e = r[t];
              for (const t in e) {
                const n = e[t];
                for (const t in n) c(n[t].object), delete n[t];
                delete e[t];
              }
              delete r[t];
            }
          },
          releaseStatesOfGeometry: function (t) {
            if (void 0 === r[t.id]) return;
            const e = r[t.id];
            for (const t in e) {
              const n = e[t];
              for (const t in n) c(n[t].object), delete n[t];
              delete e[t];
            }
            delete r[t.id];
          },
          releaseStatesOfProgram: function (t) {
            for (const e in r) {
              const n = r[e];
              if (void 0 === n[t.id]) continue;
              const i = n[t.id];
              for (const t in i) c(i[t].object), delete i[t];
              delete n[t.id];
            }
          },
          initAttributes: h,
          enableAttribute: d,
          disableUnusedAttributes: f,
        };
      }
      function F(t, e, n) {
        let i;
        function r(e, r, a) {
          0 !== a && (t.drawArraysInstanced(i, e, r, a), n.update(r, i, a));
        }
        (this.setMode = function (t) {
          i = t;
        }),
          (this.render = function (e, r) {
            t.drawArrays(i, e, r), n.update(r, i, 1);
          }),
          (this.renderInstances = r),
          (this.renderMultiDraw = function (t, r, a) {
            if (0 === a) return;
            const s = e.get("WEBGL_multi_draw");
            if (null === s) for (let e = 0; e < a; e++) this.render(t[e], r[e]);
            else {
              s.multiDrawArraysWEBGL(i, t, 0, r, 0, a);
              let e = 0;
              for (let t = 0; t < a; t++) e += r[t];
              n.update(e, i, 1);
            }
          }),
          (this.renderMultiDrawInstances = function (t, a, s, o) {
            if (0 === s) return;
            const l = e.get("WEBGL_multi_draw");
            if (null === l)
              for (let e = 0; e < t.length; e++) r(t[e], a[e], o[e]);
            else {
              l.multiDrawArraysInstancedWEBGL(i, t, 0, a, 0, o, 0, s);
              let e = 0;
              for (let t = 0; t < s; t++) e += a[t];
              for (let t = 0; t < o.length; t++) n.update(e, i, o[t]);
            }
          });
      }
      function B(t, e, n, r) {
        let a;
        function s(e) {
          if ("highp" === e) {
            if (
              t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT)
                .precision > 0 &&
              t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT)
                .precision > 0
            )
              return "highp";
            e = "mediump";
          }
          return "mediump" === e &&
            t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.MEDIUM_FLOAT)
              .precision > 0 &&
            t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.MEDIUM_FLOAT)
              .precision > 0
            ? "mediump"
            : "lowp";
        }
        let o = void 0 !== n.precision ? n.precision : "highp";
        const l = s(o);
        l !== o &&
          (console.warn(
            "THREE.WebGLRenderer:",
            o,
            "not supported, using",
            l,
            "instead."
          ),
          (o = l));
        const c = !0 === n.logarithmicDepthBuffer,
          u = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),
          h = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        return {
          isWebGL2: !0,
          getMaxAnisotropy: function () {
            if (void 0 !== a) return a;
            if (!0 === e.has("EXT_texture_filter_anisotropic")) {
              const n = e.get("EXT_texture_filter_anisotropic");
              a = t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
            } else a = 0;
            return a;
          },
          getMaxPrecision: s,
          textureFormatReadable: function (e) {
            return (
              e === i.GWd ||
              r.convert(e) ===
                t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT)
            );
          },
          textureTypeReadable: function (n) {
            const a =
              n === i.ix0 &&
              (e.has("EXT_color_buffer_half_float") ||
                e.has("EXT_color_buffer_float"));
            return !(
              n !== i.OUM &&
              r.convert(n) !==
                t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE) &&
              n !== i.RQf &&
              !a
            );
          },
          precision: o,
          logarithmicDepthBuffer: c,
          maxTextures: u,
          maxVertexTextures: h,
          maxTextureSize: t.getParameter(t.MAX_TEXTURE_SIZE),
          maxCubemapSize: t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),
          maxAttributes: t.getParameter(t.MAX_VERTEX_ATTRIBS),
          maxVertexUniforms: t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),
          maxVaryings: t.getParameter(t.MAX_VARYING_VECTORS),
          maxFragmentUniforms: t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),
          vertexTextures: h > 0,
          maxSamples: t.getParameter(t.MAX_SAMPLES),
        };
      }
      function z(t) {
        const e = this;
        let n = null,
          i = 0,
          r = !1,
          a = !1;
        const s = new h(),
          l = new o.d(),
          c = { value: null, needsUpdate: !1 };
        function u(t, n, i, r) {
          const a = null !== t ? t.length : 0;
          let o = null;
          if (0 !== a) {
            if (((o = c.value), !0 !== r || null === o)) {
              const e = i + 4 * a,
                r = n.matrixWorldInverse;
              l.getNormalMatrix(r),
                (null === o || o.length < e) && (o = new Float32Array(e));
              for (let e = 0, n = i; e !== a; ++e, n += 4)
                s.copy(t[e]).applyMatrix4(r, l),
                  s.normal.toArray(o, n),
                  (o[n + 3] = s.constant);
            }
            (c.value = o), (c.needsUpdate = !0);
          }
          return (e.numPlanes = a), (e.numIntersection = 0), o;
        }
        (this.uniform = c),
          (this.numPlanes = 0),
          (this.numIntersection = 0),
          (this.init = function (t, e) {
            const n = 0 !== t.length || e || 0 !== i || r;
            return (r = e), (i = t.length), n;
          }),
          (this.beginShadows = function () {
            (a = !0), u(null);
          }),
          (this.endShadows = function () {
            a = !1;
          }),
          (this.setGlobalState = function (t, e) {
            n = u(t, e, 0);
          }),
          (this.setState = function (s, o, l) {
            const h = s.clippingPlanes,
              d = s.clipIntersection,
              p = s.clipShadows,
              f = t.get(s);
            if (!r || null === h || 0 === h.length || (a && !p))
              a
                ? u(null)
                : (c.value !== n && ((c.value = n), (c.needsUpdate = i > 0)),
                  (e.numPlanes = i),
                  (e.numIntersection = 0));
            else {
              const t = a ? 0 : i,
                e = 4 * t;
              let r = f.clippingState || null;
              (c.value = r), (r = u(h, o, e, l));
              for (let t = 0; t !== e; ++t) r[t] = n[t];
              (f.clippingState = r),
                (this.numIntersection = d ? this.numPlanes : 0),
                (this.numPlanes += t);
            }
          });
      }
      var k = n(471),
        H = n(813),
        G = n(587),
        V = n(823);
      const W = new a.P(),
        X = new C.I(),
        q = new C.I();
      class j extends G.i {
        constructor(t = 50, e = 1, n = 0.1, i = 2e3) {
          super(),
            (this.isPerspectiveCamera = !0),
            (this.type = "PerspectiveCamera"),
            (this.fov = t),
            (this.zoom = 1),
            (this.near = n),
            (this.far = i),
            (this.focus = 10),
            (this.aspect = e),
            (this.view = null),
            (this.filmGauge = 35),
            (this.filmOffset = 0),
            this.updateProjectionMatrix();
        }
        copy(t, e) {
          return (
            super.copy(t, e),
            (this.fov = t.fov),
            (this.zoom = t.zoom),
            (this.near = t.near),
            (this.far = t.far),
            (this.focus = t.focus),
            (this.aspect = t.aspect),
            (this.view = null === t.view ? null : Object.assign({}, t.view)),
            (this.filmGauge = t.filmGauge),
            (this.filmOffset = t.filmOffset),
            this
          );
        }
        setFocalLength(t) {
          const e = (0.5 * this.getFilmHeight()) / t;
          (this.fov = 2 * V.a5 * Math.atan(e)), this.updateProjectionMatrix();
        }
        getFocalLength() {
          const t = Math.tan(0.5 * V.up * this.fov);
          return (0.5 * this.getFilmHeight()) / t;
        }
        getEffectiveFOV() {
          return (
            2 * V.a5 * Math.atan(Math.tan(0.5 * V.up * this.fov) / this.zoom)
          );
        }
        getFilmWidth() {
          return this.filmGauge * Math.min(this.aspect, 1);
        }
        getFilmHeight() {
          return this.filmGauge / Math.max(this.aspect, 1);
        }
        getViewBounds(t, e, n) {
          W.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse),
            e.set(W.x, W.y).multiplyScalar(-t / W.z),
            W.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse),
            n.set(W.x, W.y).multiplyScalar(-t / W.z);
        }
        getViewSize(t, e) {
          return this.getViewBounds(t, X, q), e.subVectors(q, X);
        }
        setViewOffset(t, e, n, i, r, a) {
          (this.aspect = t / e),
            null === this.view &&
              (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1,
              }),
            (this.view.enabled = !0),
            (this.view.fullWidth = t),
            (this.view.fullHeight = e),
            (this.view.offsetX = n),
            (this.view.offsetY = i),
            (this.view.width = r),
            (this.view.height = a),
            this.updateProjectionMatrix();
        }
        clearViewOffset() {
          null !== this.view && (this.view.enabled = !1),
            this.updateProjectionMatrix();
        }
        updateProjectionMatrix() {
          const t = this.near;
          let e = (t * Math.tan(0.5 * V.up * this.fov)) / this.zoom,
            n = 2 * e,
            i = this.aspect * n,
            r = -0.5 * i;
          const a = this.view;
          if (null !== this.view && this.view.enabled) {
            const t = a.fullWidth,
              s = a.fullHeight;
            (r += (a.offsetX * i) / t),
              (e -= (a.offsetY * n) / s),
              (i *= a.width / t),
              (n *= a.height / s);
          }
          const s = this.filmOffset;
          0 !== s && (r += (t * s) / this.getFilmWidth()),
            this.projectionMatrix.makePerspective(
              r,
              r + i,
              e,
              e - n,
              t,
              this.far,
              this.coordinateSystem
            ),
            this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        }
        toJSON(t) {
          const e = super.toJSON(t);
          return (
            (e.object.fov = this.fov),
            (e.object.zoom = this.zoom),
            (e.object.near = this.near),
            (e.object.far = this.far),
            (e.object.focus = this.focus),
            (e.object.aspect = this.aspect),
            null !== this.view &&
              (e.object.view = Object.assign({}, this.view)),
            (e.object.filmGauge = this.filmGauge),
            (e.object.filmOffset = this.filmOffset),
            e
          );
        }
      }
      const Y = -90;
      class K extends H.B {
        constructor(t, e, n) {
          super(),
            (this.type = "CubeCamera"),
            (this.renderTarget = n),
            (this.coordinateSystem = null),
            (this.activeMipmapLevel = 0);
          const i = new j(Y, 1, t, e);
          (i.layers = this.layers), this.add(i);
          const r = new j(Y, 1, t, e);
          (r.layers = this.layers), this.add(r);
          const a = new j(Y, 1, t, e);
          (a.layers = this.layers), this.add(a);
          const s = new j(Y, 1, t, e);
          (s.layers = this.layers), this.add(s);
          const o = new j(Y, 1, t, e);
          (o.layers = this.layers), this.add(o);
          const l = new j(Y, 1, t, e);
          (l.layers = this.layers), this.add(l);
        }
        updateCoordinateSystem() {
          const t = this.coordinateSystem,
            e = this.children.concat(),
            [n, r, a, s, o, l] = e;
          for (const t of e) this.remove(t);
          if (t === i.TdN)
            n.up.set(0, 1, 0),
              n.lookAt(1, 0, 0),
              r.up.set(0, 1, 0),
              r.lookAt(-1, 0, 0),
              a.up.set(0, 0, -1),
              a.lookAt(0, 1, 0),
              s.up.set(0, 0, 1),
              s.lookAt(0, -1, 0),
              o.up.set(0, 1, 0),
              o.lookAt(0, 0, 1),
              l.up.set(0, 1, 0),
              l.lookAt(0, 0, -1);
          else {
            if (t !== i.i7u)
              throw new Error(
                "THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " +
                  t
              );
            n.up.set(0, -1, 0),
              n.lookAt(-1, 0, 0),
              r.up.set(0, -1, 0),
              r.lookAt(1, 0, 0),
              a.up.set(0, 0, 1),
              a.lookAt(0, 1, 0),
              s.up.set(0, 0, -1),
              s.lookAt(0, -1, 0),
              o.up.set(0, -1, 0),
              o.lookAt(0, 0, 1),
              l.up.set(0, -1, 0),
              l.lookAt(0, 0, -1);
          }
          for (const t of e) this.add(t), t.updateMatrixWorld();
        }
        update(t, e) {
          null === this.parent && this.updateMatrixWorld();
          const { renderTarget: n, activeMipmapLevel: i } = this;
          this.coordinateSystem !== t.coordinateSystem &&
            ((this.coordinateSystem = t.coordinateSystem),
            this.updateCoordinateSystem());
          const [r, a, s, o, l, c] = this.children,
            u = t.getRenderTarget(),
            h = t.getActiveCubeFace(),
            d = t.getActiveMipmapLevel(),
            p = t.xr.enabled;
          t.xr.enabled = !1;
          const f = n.texture.generateMipmaps;
          (n.texture.generateMipmaps = !1),
            t.setRenderTarget(n, 0, i),
            t.render(e, r),
            t.setRenderTarget(n, 1, i),
            t.render(e, a),
            t.setRenderTarget(n, 2, i),
            t.render(e, s),
            t.setRenderTarget(n, 3, i),
            t.render(e, o),
            t.setRenderTarget(n, 4, i),
            t.render(e, l),
            (n.texture.generateMipmaps = f),
            t.setRenderTarget(n, 5, i),
            t.render(e, c),
            t.setRenderTarget(u, h, d),
            (t.xr.enabled = p),
            (n.texture.needsPMREMUpdate = !0);
        }
      }
      var Z = n(913);
      class $ extends Z.g {
        constructor(t, e, n, r, a, s, o, l, c, u) {
          super(
            (t = void 0 !== t ? t : []),
            (e = void 0 !== e ? e : i.hy7),
            n,
            r,
            a,
            s,
            o,
            l,
            c,
            u
          ),
            (this.isCubeTexture = !0),
            (this.flipY = !1);
        }
        get images() {
          return this.image;
        }
        set images(t) {
          this.image = t;
        }
      }
      class Q extends k.n {
        constructor(t = 1, e = {}) {
          super(t, t, e), (this.isWebGLCubeRenderTarget = !0);
          const n = { width: t, height: t, depth: 1 },
            r = [n, n, n, n, n, n];
          (this.texture = new $(
            r,
            e.mapping,
            e.wrapS,
            e.wrapT,
            e.magFilter,
            e.minFilter,
            e.format,
            e.type,
            e.anisotropy,
            e.colorSpace
          )),
            (this.texture.isRenderTargetTexture = !0),
            (this.texture.generateMipmaps =
              void 0 !== e.generateMipmaps && e.generateMipmaps),
            (this.texture.minFilter =
              void 0 !== e.minFilter ? e.minFilter : i.k6q);
        }
        fromEquirectangularTexture(t, e) {
          (this.texture.type = e.type),
            (this.texture.colorSpace = e.colorSpace),
            (this.texture.generateMipmaps = e.generateMipmaps),
            (this.texture.minFilter = e.minFilter),
            (this.texture.magFilter = e.magFilter);
          const n = { tEquirect: { value: null } },
            r =
              "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
            a =
              "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",
            s = new M(5, 5, 5),
            o = new E.B({
              name: "CubemapFromEquirect",
              uniforms: (0, R.lx)(n),
              vertexShader: r,
              fragmentShader: a,
              side: i.hsX,
              blending: i.XIg,
            });
          o.uniforms.tEquirect.value = e;
          const l = new w.e(s, o),
            c = e.minFilter;
          return (
            e.minFilter === i.$_I && (e.minFilter = i.k6q),
            new K(1, 10, this).update(t, l),
            (e.minFilter = c),
            l.geometry.dispose(),
            l.material.dispose(),
            this
          );
        }
        clear(t, e, n, i) {
          const r = t.getRenderTarget();
          for (let r = 0; r < 6; r++)
            t.setRenderTarget(this, r), t.clear(e, n, i);
          t.setRenderTarget(r);
        }
      }
      function J(t) {
        let e = new WeakMap();
        function n(t, e) {
          return (
            e === i.wfO
              ? (t.mapping = i.hy7)
              : e === i.uV5 && (t.mapping = i.xFO),
            t
          );
        }
        function r(t) {
          const n = t.target;
          n.removeEventListener("dispose", r);
          const i = e.get(n);
          void 0 !== i && (e.delete(n), i.dispose());
        }
        return {
          get: function (a) {
            if (a && a.isTexture) {
              const s = a.mapping;
              if (s === i.wfO || s === i.uV5) {
                if (e.has(a)) return n(e.get(a).texture, a.mapping);
                {
                  const i = a.image;
                  if (i && i.height > 0) {
                    const s = new Q(i.height);
                    return (
                      s.fromEquirectangularTexture(t, a),
                      e.set(a, s),
                      a.addEventListener("dispose", r),
                      n(s.texture, a.mapping)
                    );
                  }
                  return null;
                }
              }
            }
            return a;
          },
          dispose: function () {
            e = new WeakMap();
          },
        };
      }
      var tt = n(189),
        et = n(96);
      const nt = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
        it = new tt.q(),
        rt = new r.Q();
      let at = null,
        st = 0,
        ot = 0,
        lt = !1;
      const ct = (1 + Math.sqrt(5)) / 2,
        ut = 1 / ct,
        ht = [
          new a.P(-ct, ut, 0),
          new a.P(ct, ut, 0),
          new a.P(-ut, 0, ct),
          new a.P(ut, 0, ct),
          new a.P(0, ct, -ut),
          new a.P(0, ct, ut),
          new a.P(-1, 1, -1),
          new a.P(1, 1, -1),
          new a.P(-1, 1, 1),
          new a.P(1, 1, 1),
        ];
      class dt {
        constructor(t) {
          (this._renderer = t),
            (this._pingPongRenderTarget = null),
            (this._lodMax = 0),
            (this._cubeSize = 0),
            (this._lodPlanes = []),
            (this._sizeLods = []),
            (this._sigmas = []),
            (this._blurMaterial = null),
            (this._cubemapMaterial = null),
            (this._equirectMaterial = null),
            this._compileMaterial(this._blurMaterial);
        }
        fromScene(t, e = 0, n = 0.1, i = 100) {
          (at = this._renderer.getRenderTarget()),
            (st = this._renderer.getActiveCubeFace()),
            (ot = this._renderer.getActiveMipmapLevel()),
            (lt = this._renderer.xr.enabled),
            (this._renderer.xr.enabled = !1),
            this._setSize(256);
          const r = this._allocateTargets();
          return (
            (r.depthBuffer = !0),
            this._sceneToCubeUV(t, n, i, r),
            e > 0 && this._blur(r, 0, 0, e),
            this._applyPMREM(r),
            this._cleanup(r),
            r
          );
        }
        fromEquirectangular(t, e = null) {
          return this._fromTexture(t, e);
        }
        fromCubemap(t, e = null) {
          return this._fromTexture(t, e);
        }
        compileCubemapShader() {
          null === this._cubemapMaterial &&
            ((this._cubemapMaterial = gt()),
            this._compileMaterial(this._cubemapMaterial));
        }
        compileEquirectangularShader() {
          null === this._equirectMaterial &&
            ((this._equirectMaterial = mt()),
            this._compileMaterial(this._equirectMaterial));
        }
        dispose() {
          this._dispose(),
            null !== this._cubemapMaterial && this._cubemapMaterial.dispose(),
            null !== this._equirectMaterial && this._equirectMaterial.dispose();
        }
        _setSize(t) {
          (this._lodMax = Math.floor(Math.log2(t))),
            (this._cubeSize = Math.pow(2, this._lodMax));
        }
        _dispose() {
          null !== this._blurMaterial && this._blurMaterial.dispose(),
            null !== this._pingPongRenderTarget &&
              this._pingPongRenderTarget.dispose();
          for (let t = 0; t < this._lodPlanes.length; t++)
            this._lodPlanes[t].dispose();
        }
        _cleanup(t) {
          this._renderer.setRenderTarget(at, st, ot),
            (this._renderer.xr.enabled = lt),
            (t.scissorTest = !1),
            ft(t, 0, 0, t.width, t.height);
        }
        _fromTexture(t, e) {
          t.mapping === i.hy7 || t.mapping === i.xFO
            ? this._setSize(
                0 === t.image.length
                  ? 16
                  : t.image[0].width || t.image[0].image.width
              )
            : this._setSize(t.image.width / 4),
            (at = this._renderer.getRenderTarget()),
            (st = this._renderer.getActiveCubeFace()),
            (ot = this._renderer.getActiveMipmapLevel()),
            (lt = this._renderer.xr.enabled),
            (this._renderer.xr.enabled = !1);
          const n = e || this._allocateTargets();
          return (
            this._textureToCubeUV(t, n),
            this._applyPMREM(n),
            this._cleanup(n),
            n
          );
        }
        _allocateTargets() {
          const t = 3 * Math.max(this._cubeSize, 112),
            e = 4 * this._cubeSize,
            n = {
              magFilter: i.k6q,
              minFilter: i.k6q,
              generateMipmaps: !1,
              type: i.ix0,
              format: i.GWd,
              colorSpace: i.Zr2,
              depthBuffer: !1,
            },
            r = pt(t, e, n);
          if (
            null === this._pingPongRenderTarget ||
            this._pingPongRenderTarget.width !== t ||
            this._pingPongRenderTarget.height !== e
          ) {
            null !== this._pingPongRenderTarget && this._dispose(),
              (this._pingPongRenderTarget = pt(t, e, n));
            const { _lodMax: r } = this;
            ({
              sizeLods: this._sizeLods,
              lodPlanes: this._lodPlanes,
              sigmas: this._sigmas,
            } = (function (t) {
              const e = [],
                n = [],
                i = [];
              let r = t;
              const a = t - 4 + 1 + nt.length;
              for (let s = 0; s < a; s++) {
                const a = Math.pow(2, r);
                n.push(a);
                let o = 1 / a;
                s > t - 4 ? (o = nt[s - t + 4 - 1]) : 0 === s && (o = 0),
                  i.push(o);
                const l = 1 / (a - 2),
                  c = -l,
                  u = 1 + l,
                  h = [c, c, u, c, u, u, c, c, u, u, c, u],
                  d = 6,
                  p = 6,
                  f = 3,
                  m = 2,
                  g = 1,
                  _ = new Float32Array(f * p * d),
                  v = new Float32Array(m * p * d),
                  M = new Float32Array(g * p * d);
                for (let t = 0; t < d; t++) {
                  const e = ((t % 3) * 2) / 3 - 1,
                    n = t > 2 ? 0 : -1,
                    i = [
                      e,
                      n,
                      0,
                      e + 2 / 3,
                      n,
                      0,
                      e + 2 / 3,
                      n + 1,
                      0,
                      e,
                      n,
                      0,
                      e + 2 / 3,
                      n + 1,
                      0,
                      e,
                      n + 1,
                      0,
                    ];
                  _.set(i, f * p * t), v.set(h, m * p * t);
                  const r = [t, t, t, t, t, t];
                  M.set(r, g * p * t);
                }
                const S = new x.L();
                S.setAttribute("position", new y.TH(_, f)),
                  S.setAttribute("uv", new y.TH(v, m)),
                  S.setAttribute("faceIndex", new y.TH(M, g)),
                  e.push(S),
                  r > 4 && r--;
              }
              return { lodPlanes: e, sizeLods: n, sigmas: i };
            })(r)),
              (this._blurMaterial = (function (t, e, n) {
                const r = new Float32Array(20),
                  s = new a.P(0, 1, 0);
                return new E.B({
                  name: "SphericalGaussianBlur",
                  defines: {
                    n: 20,
                    CUBEUV_TEXEL_WIDTH: 1 / e,
                    CUBEUV_TEXEL_HEIGHT: 1 / n,
                    CUBEUV_MAX_MIP: `${t}.0`,
                  },
                  uniforms: {
                    envMap: { value: null },
                    samples: { value: 1 },
                    weights: { value: r },
                    latitudinal: { value: !1 },
                    dTheta: { value: 0 },
                    mipInt: { value: 0 },
                    poleAxis: { value: s },
                  },
                  vertexShader:
                    "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",
                  fragmentShader:
                    "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",
                  blending: i.XIg,
                  depthTest: !1,
                  depthWrite: !1,
                });
              })(r, t, e));
          }
          return r;
        }
        _compileMaterial(t) {
          const e = new w.e(this._lodPlanes[0], t);
          this._renderer.compile(e, it);
        }
        _sceneToCubeUV(t, e, n, r) {
          const a = new j(90, 1, e, n),
            s = [1, -1, 1, 1, 1, 1],
            o = [1, 1, 1, -1, -1, -1],
            l = this._renderer,
            c = l.autoClear,
            u = l.toneMapping;
          l.getClearColor(rt), (l.toneMapping = i.y_p), (l.autoClear = !1);
          const h = new et.V({
              name: "PMREM.Background",
              side: i.hsX,
              depthWrite: !1,
              depthTest: !1,
            }),
            d = new w.e(new M(), h);
          let p = !1;
          const f = t.background;
          f
            ? f.isColor && (h.color.copy(f), (t.background = null), (p = !0))
            : (h.color.copy(rt), (p = !0));
          for (let e = 0; e < 6; e++) {
            const n = e % 3;
            0 === n
              ? (a.up.set(0, s[e], 0), a.lookAt(o[e], 0, 0))
              : 1 === n
              ? (a.up.set(0, 0, s[e]), a.lookAt(0, o[e], 0))
              : (a.up.set(0, s[e], 0), a.lookAt(0, 0, o[e]));
            const i = this._cubeSize;
            ft(r, n * i, e > 2 ? i : 0, i, i),
              l.setRenderTarget(r),
              p && l.render(d, a),
              l.render(t, a);
          }
          d.geometry.dispose(),
            d.material.dispose(),
            (l.toneMapping = u),
            (l.autoClear = c),
            (t.background = f);
        }
        _textureToCubeUV(t, e) {
          const n = this._renderer,
            r = t.mapping === i.hy7 || t.mapping === i.xFO;
          r
            ? (null === this._cubemapMaterial && (this._cubemapMaterial = gt()),
              (this._cubemapMaterial.uniforms.flipEnvMap.value =
                !1 === t.isRenderTargetTexture ? -1 : 1))
            : null === this._equirectMaterial &&
              (this._equirectMaterial = mt());
          const a = r ? this._cubemapMaterial : this._equirectMaterial,
            s = new w.e(this._lodPlanes[0], a);
          a.uniforms.envMap.value = t;
          const o = this._cubeSize;
          ft(e, 0, 0, 3 * o, 2 * o), n.setRenderTarget(e), n.render(s, it);
        }
        _applyPMREM(t) {
          const e = this._renderer,
            n = e.autoClear;
          e.autoClear = !1;
          const i = this._lodPlanes.length;
          for (let e = 1; e < i; e++) {
            const n = Math.sqrt(
                this._sigmas[e] * this._sigmas[e] -
                  this._sigmas[e - 1] * this._sigmas[e - 1]
              ),
              r = ht[(i - e - 1) % ht.length];
            this._blur(t, e - 1, e, n, r);
          }
          e.autoClear = n;
        }
        _blur(t, e, n, i, r) {
          const a = this._pingPongRenderTarget;
          this._halfBlur(t, a, e, n, i, "latitudinal", r),
            this._halfBlur(a, t, n, n, i, "longitudinal", r);
        }
        _halfBlur(t, e, n, i, r, a, s) {
          const o = this._renderer,
            l = this._blurMaterial;
          "latitudinal" !== a &&
            "longitudinal" !== a &&
            console.error(
              "blur direction must be either latitudinal or longitudinal!"
            );
          const c = new w.e(this._lodPlanes[i], l),
            u = l.uniforms,
            h = this._sizeLods[n] - 1,
            d = isFinite(r) ? Math.PI / (2 * h) : (2 * Math.PI) / 39,
            p = r / d,
            f = isFinite(r) ? 1 + Math.floor(3 * p) : 20;
          f > 20 &&
            console.warn(
              `sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`
            );
          const m = [];
          let g = 0;
          for (let t = 0; t < 20; ++t) {
            const e = t / p,
              n = Math.exp((-e * e) / 2);
            m.push(n), 0 === t ? (g += n) : t < f && (g += 2 * n);
          }
          for (let t = 0; t < m.length; t++) m[t] = m[t] / g;
          (u.envMap.value = t.texture),
            (u.samples.value = f),
            (u.weights.value = m),
            (u.latitudinal.value = "latitudinal" === a),
            s && (u.poleAxis.value = s);
          const { _lodMax: _ } = this;
          (u.dTheta.value = d), (u.mipInt.value = _ - n);
          const v = this._sizeLods[i];
          ft(
            e,
            3 * v * (i > _ - 4 ? i - _ + 4 : 0),
            4 * (this._cubeSize - v),
            3 * v,
            2 * v
          ),
            o.setRenderTarget(e),
            o.render(c, it);
        }
      }
      function pt(t, e, n) {
        const r = new k.n(t, e, n);
        return (
          (r.texture.mapping = i.Om),
          (r.texture.name = "PMREM.cubeUv"),
          (r.scissorTest = !0),
          r
        );
      }
      function ft(t, e, n, i, r) {
        t.viewport.set(e, n, i, r), t.scissor.set(e, n, i, r);
      }
      function mt() {
        return new E.B({
          name: "EquirectangularToCubeUV",
          uniforms: { envMap: { value: null } },
          vertexShader:
            "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",
          fragmentShader:
            "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",
          blending: i.XIg,
          depthTest: !1,
          depthWrite: !1,
        });
      }
      function gt() {
        return new E.B({
          name: "CubemapToCubeUV",
          uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 } },
          vertexShader:
            "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",
          fragmentShader:
            "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",
          blending: i.XIg,
          depthTest: !1,
          depthWrite: !1,
        });
      }
      function _t(t) {
        let e = new WeakMap(),
          n = null;
        function r(t) {
          const n = t.target;
          n.removeEventListener("dispose", r);
          const i = e.get(n);
          void 0 !== i && (e.delete(n), i.dispose());
        }
        return {
          get: function (a) {
            if (a && a.isTexture) {
              const s = a.mapping,
                o = s === i.wfO || s === i.uV5,
                l = s === i.hy7 || s === i.xFO;
              if (o || l) {
                let i = e.get(a);
                const s = void 0 !== i ? i.texture.pmremVersion : 0;
                if (a.isRenderTargetTexture && a.pmremVersion !== s)
                  return (
                    null === n && (n = new dt(t)),
                    (i = o ? n.fromEquirectangular(a, i) : n.fromCubemap(a, i)),
                    (i.texture.pmremVersion = a.pmremVersion),
                    e.set(a, i),
                    i.texture
                  );
                if (void 0 !== i) return i.texture;
                {
                  const s = a.image;
                  return (o && s && s.height > 0) ||
                    (l &&
                      s &&
                      (function (t) {
                        let e = 0;
                        for (let n = 0; n < 6; n++) void 0 !== t[n] && e++;
                        return 6 === e;
                      })(s))
                    ? (null === n && (n = new dt(t)),
                      (i = o ? n.fromEquirectangular(a) : n.fromCubemap(a)),
                      (i.texture.pmremVersion = a.pmremVersion),
                      e.set(a, i),
                      a.addEventListener("dispose", r),
                      i.texture)
                    : null;
                }
              }
            }
            return a;
          },
          dispose: function () {
            (e = new WeakMap()), null !== n && (n.dispose(), (n = null));
          },
        };
      }
      var vt = n(108);
      function xt(t) {
        const e = {};
        function n(n) {
          if (void 0 !== e[n]) return e[n];
          let i;
          switch (n) {
            case "WEBGL_depth_texture":
              i =
                t.getExtension("WEBGL_depth_texture") ||
                t.getExtension("MOZ_WEBGL_depth_texture") ||
                t.getExtension("WEBKIT_WEBGL_depth_texture");
              break;
            case "EXT_texture_filter_anisotropic":
              i =
                t.getExtension("EXT_texture_filter_anisotropic") ||
                t.getExtension("MOZ_EXT_texture_filter_anisotropic") ||
                t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
              break;
            case "WEBGL_compressed_texture_s3tc":
              i =
                t.getExtension("WEBGL_compressed_texture_s3tc") ||
                t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") ||
                t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
              break;
            case "WEBGL_compressed_texture_pvrtc":
              i =
                t.getExtension("WEBGL_compressed_texture_pvrtc") ||
                t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
              break;
            default:
              i = t.getExtension(n);
          }
          return (e[n] = i), i;
        }
        return {
          has: function (t) {
            return null !== n(t);
          },
          init: function () {
            n("EXT_color_buffer_float"),
              n("WEBGL_clip_cull_distance"),
              n("OES_texture_float_linear"),
              n("EXT_color_buffer_half_float"),
              n("WEBGL_multisampled_render_to_texture"),
              n("WEBGL_render_shared_exponent");
          },
          get: function (t) {
            const e = n(t);
            return (
              null === e &&
                (0, vt.mc)(
                  "THREE.WebGLRenderer: " + t + " extension not supported."
                ),
              e
            );
          },
        };
      }
      function yt(t, e, n, i) {
        const r = {},
          a = new WeakMap();
        function s(t) {
          const o = t.target;
          null !== o.index && e.remove(o.index);
          for (const t in o.attributes) e.remove(o.attributes[t]);
          for (const t in o.morphAttributes) {
            const n = o.morphAttributes[t];
            for (let t = 0, i = n.length; t < i; t++) e.remove(n[t]);
          }
          o.removeEventListener("dispose", s), delete r[o.id];
          const l = a.get(o);
          l && (e.remove(l), a.delete(o)),
            i.releaseStatesOfGeometry(o),
            !0 === o.isInstancedBufferGeometry && delete o._maxInstanceCount,
            n.memory.geometries--;
        }
        function o(t) {
          const n = [],
            i = t.index,
            r = t.attributes.position;
          let s = 0;
          if (null !== i) {
            const t = i.array;
            s = i.version;
            for (let e = 0, i = t.length; e < i; e += 3) {
              const i = t[e + 0],
                r = t[e + 1],
                a = t[e + 2];
              n.push(i, r, r, a, a, i);
            }
          } else {
            if (void 0 === r) return;
            {
              const t = r.array;
              s = r.version;
              for (let e = 0, i = t.length / 3 - 1; e < i; e += 3) {
                const t = e + 0,
                  i = e + 1,
                  r = e + 2;
                n.push(t, i, i, r, r, t);
              }
            }
          }
          const o = new ((0, vt.AQ)(n) ? y.MW : y.A$)(n, 1);
          o.version = s;
          const l = a.get(t);
          l && e.remove(l), a.set(t, o);
        }
        return {
          get: function (t, e) {
            return (
              !0 === r[e.id] ||
                (e.addEventListener("dispose", s),
                (r[e.id] = !0),
                n.memory.geometries++),
              e
            );
          },
          update: function (n) {
            const i = n.attributes;
            for (const n in i) e.update(i[n], t.ARRAY_BUFFER);
            const r = n.morphAttributes;
            for (const n in r) {
              const i = r[n];
              for (let n = 0, r = i.length; n < r; n++)
                e.update(i[n], t.ARRAY_BUFFER);
            }
          },
          getWireframeAttribute: function (t) {
            const e = a.get(t);
            if (e) {
              const n = t.index;
              null !== n && e.version < n.version && o(t);
            } else o(t);
            return a.get(t);
          },
        };
      }
      function Mt(t, e, n) {
        let i, r, a;
        function s(e, s, o) {
          0 !== o &&
            (t.drawElementsInstanced(i, s, r, e * a, o), n.update(s, i, o));
        }
        (this.setMode = function (t) {
          i = t;
        }),
          (this.setIndex = function (t) {
            (r = t.type), (a = t.bytesPerElement);
          }),
          (this.render = function (e, s) {
            t.drawElements(i, s, r, e * a), n.update(s, i, 1);
          }),
          (this.renderInstances = s),
          (this.renderMultiDraw = function (t, s, o) {
            if (0 === o) return;
            const l = e.get("WEBGL_multi_draw");
            if (null === l)
              for (let e = 0; e < o; e++) this.render(t[e] / a, s[e]);
            else {
              l.multiDrawElementsWEBGL(i, s, 0, r, t, 0, o);
              let e = 0;
              for (let t = 0; t < o; t++) e += s[t];
              n.update(e, i, 1);
            }
          }),
          (this.renderMultiDrawInstances = function (t, o, l, c) {
            if (0 === l) return;
            const u = e.get("WEBGL_multi_draw");
            if (null === u)
              for (let e = 0; e < t.length; e++) s(t[e] / a, o[e], c[e]);
            else {
              u.multiDrawElementsInstancedWEBGL(i, o, 0, r, t, 0, c, 0, l);
              let e = 0;
              for (let t = 0; t < l; t++) e += o[t];
              for (let t = 0; t < c.length; t++) n.update(e, i, c[t]);
            }
          });
      }
      function St(t) {
        const e = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
        return {
          memory: { geometries: 0, textures: 0 },
          render: e,
          programs: null,
          autoReset: !0,
          reset: function () {
            (e.calls = 0), (e.triangles = 0), (e.points = 0), (e.lines = 0);
          },
          update: function (n, i, r) {
            switch ((e.calls++, i)) {
              case t.TRIANGLES:
                e.triangles += r * (n / 3);
                break;
              case t.LINES:
                e.lines += r * (n / 2);
                break;
              case t.LINE_STRIP:
                e.lines += r * (n - 1);
                break;
              case t.LINE_LOOP:
                e.lines += r * n;
                break;
              case t.POINTS:
                e.points += r * n;
                break;
              default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", i);
            }
          },
        };
      }
      class Et extends Z.g {
        constructor(t = null, e = 1, n = 1, r = 1) {
          super(null),
            (this.isDataArrayTexture = !0),
            (this.image = { data: t, width: e, height: n, depth: r }),
            (this.magFilter = i.hxR),
            (this.minFilter = i.hxR),
            (this.wrapR = i.ghU),
            (this.generateMipmaps = !1),
            (this.flipY = !1),
            (this.unpackAlignment = 1),
            (this.layerUpdates = new Set());
        }
        addLayerUpdate(t) {
          this.layerUpdates.add(t);
        }
        clearLayerUpdates() {
          this.layerUpdates.clear();
        }
      }
      function bt(t, e, n) {
        const r = new WeakMap(),
          a = new g.I();
        return {
          update: function (s, o, l) {
            const c = s.morphTargetInfluences,
              u =
                o.morphAttributes.position ||
                o.morphAttributes.normal ||
                o.morphAttributes.color,
              h = void 0 !== u ? u.length : 0;
            let d = r.get(o);
            if (void 0 === d || d.count !== h) {
              void 0 !== d && d.texture.dispose();
              const p = void 0 !== o.morphAttributes.position,
                f = void 0 !== o.morphAttributes.normal,
                m = void 0 !== o.morphAttributes.color,
                g = o.morphAttributes.position || [],
                _ = o.morphAttributes.normal || [],
                v = o.morphAttributes.color || [];
              let x = 0;
              !0 === p && (x = 1), !0 === f && (x = 2), !0 === m && (x = 3);
              let y = o.attributes.position.count * x,
                M = 1;
              y > e.maxTextureSize &&
                ((M = Math.ceil(y / e.maxTextureSize)), (y = e.maxTextureSize));
              const S = new Float32Array(y * M * 4 * h),
                E = new Et(S, y, M, h);
              (E.type = i.RQf), (E.needsUpdate = !0);
              const b = 4 * x;
              for (let w = 0; w < h; w++) {
                const A = g[w],
                  R = _[w],
                  P = v[w],
                  L = y * M * 4 * w;
                for (let U = 0; U < A.count; U++) {
                  const D = U * b;
                  !0 === p &&
                    (a.fromBufferAttribute(A, U),
                    (S[L + D + 0] = a.x),
                    (S[L + D + 1] = a.y),
                    (S[L + D + 2] = a.z),
                    (S[L + D + 3] = 0)),
                    !0 === f &&
                      (a.fromBufferAttribute(R, U),
                      (S[L + D + 4] = a.x),
                      (S[L + D + 5] = a.y),
                      (S[L + D + 6] = a.z),
                      (S[L + D + 7] = 0)),
                    !0 === m &&
                      (a.fromBufferAttribute(P, U),
                      (S[L + D + 8] = a.x),
                      (S[L + D + 9] = a.y),
                      (S[L + D + 10] = a.z),
                      (S[L + D + 11] = 4 === P.itemSize ? a.w : 1));
                }
              }
              function T() {
                E.dispose(), r.delete(o), o.removeEventListener("dispose", T);
              }
              (d = { count: h, texture: E, size: new C.I(y, M) }),
                r.set(o, d),
                o.addEventListener("dispose", T);
            }
            if (!0 === s.isInstancedMesh && null !== s.morphTexture)
              l.getUniforms().setValue(t, "morphTexture", s.morphTexture, n);
            else {
              let I = 0;
              for (let O = 0; O < c.length; O++) I += c[O];
              const N = o.morphTargetsRelative ? 1 : 1 - I;
              l.getUniforms().setValue(t, "morphTargetBaseInfluence", N),
                l.getUniforms().setValue(t, "morphTargetInfluences", c);
            }
            l.getUniforms().setValue(t, "morphTargetsTexture", d.texture, n),
              l.getUniforms().setValue(t, "morphTargetsTextureSize", d.size);
          },
        };
      }
      function Tt(t, e, n, i) {
        let r = new WeakMap();
        function a(t) {
          const e = t.target;
          e.removeEventListener("dispose", a),
            n.remove(e.instanceMatrix),
            null !== e.instanceColor && n.remove(e.instanceColor);
        }
        return {
          update: function (s) {
            const o = i.render.frame,
              l = s.geometry,
              c = e.get(s, l);
            if (
              (r.get(c) !== o && (e.update(c), r.set(c, o)),
              s.isInstancedMesh &&
                (!1 === s.hasEventListener("dispose", a) &&
                  s.addEventListener("dispose", a),
                r.get(s) !== o &&
                  (n.update(s.instanceMatrix, t.ARRAY_BUFFER),
                  null !== s.instanceColor &&
                    n.update(s.instanceColor, t.ARRAY_BUFFER),
                  r.set(s, o))),
              s.isSkinnedMesh)
            ) {
              const t = s.skeleton;
              r.get(t) !== o && (t.update(), r.set(t, o));
            }
            return c;
          },
          dispose: function () {
            r = new WeakMap();
          },
        };
      }
      var wt = n(415);
      class At extends Z.g {
        constructor(t = null, e = 1, n = 1, r = 1) {
          super(null),
            (this.isData3DTexture = !0),
            (this.image = { data: t, width: e, height: n, depth: r }),
            (this.magFilter = i.hxR),
            (this.minFilter = i.hxR),
            (this.wrapR = i.ghU),
            (this.generateMipmaps = !1),
            (this.flipY = !1),
            (this.unpackAlignment = 1);
        }
      }
      class Rt extends Z.g {
        constructor(t, e, n, r, a, s, o, l, c, u = i.zdS) {
          if (u !== i.zdS && u !== i.dcC)
            throw new Error(
              "DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat"
            );
          void 0 === n && u === i.zdS && (n = i.bkx),
            void 0 === n && u === i.dcC && (n = i.V3x),
            super(null, r, a, s, o, l, u, n, c),
            (this.isDepthTexture = !0),
            (this.image = { width: t, height: e }),
            (this.magFilter = void 0 !== o ? o : i.hxR),
            (this.minFilter = void 0 !== l ? l : i.hxR),
            (this.flipY = !1),
            (this.generateMipmaps = !1),
            (this.compareFunction = null);
        }
        copy(t) {
          return (
            super.copy(t), (this.compareFunction = t.compareFunction), this
          );
        }
        toJSON(t) {
          const e = super.toJSON(t);
          return (
            null !== this.compareFunction &&
              (e.compareFunction = this.compareFunction),
            e
          );
        }
      }
      const Ct = new Z.g(),
        Pt = new Rt(1, 1);
      Pt.compareFunction = i.TiK;
      const Lt = new Et(),
        Ut = new At(),
        Dt = new $(),
        It = [],
        Nt = [],
        Ot = new Float32Array(16),
        Ft = new Float32Array(9),
        Bt = new Float32Array(4);
      function zt(t, e, n) {
        const i = t[0];
        if (i <= 0 || i > 0) return t;
        const r = e * n;
        let a = It[r];
        if (
          (void 0 === a && ((a = new Float32Array(r)), (It[r] = a)), 0 !== e)
        ) {
          i.toArray(a, 0);
          for (let i = 1, r = 0; i !== e; ++i) (r += n), t[i].toArray(a, r);
        }
        return a;
      }
      function kt(t, e) {
        if (t.length !== e.length) return !1;
        for (let n = 0, i = t.length; n < i; n++) if (t[n] !== e[n]) return !1;
        return !0;
      }
      function Ht(t, e) {
        for (let n = 0, i = e.length; n < i; n++) t[n] = e[n];
      }
      function Gt(t, e) {
        let n = Nt[e];
        void 0 === n && ((n = new Int32Array(e)), (Nt[e] = n));
        for (let i = 0; i !== e; ++i) n[i] = t.allocateTextureUnit();
        return n;
      }
      function Vt(t, e) {
        const n = this.cache;
        n[0] !== e && (t.uniform1f(this.addr, e), (n[0] = e));
      }
      function Wt(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y) ||
            (t.uniform2f(this.addr, e.x, e.y), (n[0] = e.x), (n[1] = e.y));
        else {
          if (kt(n, e)) return;
          t.uniform2fv(this.addr, e), Ht(n, e);
        }
      }
      function Xt(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y && n[2] === e.z) ||
            (t.uniform3f(this.addr, e.x, e.y, e.z),
            (n[0] = e.x),
            (n[1] = e.y),
            (n[2] = e.z));
        else if (void 0 !== e.r)
          (n[0] === e.r && n[1] === e.g && n[2] === e.b) ||
            (t.uniform3f(this.addr, e.r, e.g, e.b),
            (n[0] = e.r),
            (n[1] = e.g),
            (n[2] = e.b));
        else {
          if (kt(n, e)) return;
          t.uniform3fv(this.addr, e), Ht(n, e);
        }
      }
      function qt(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w) ||
            (t.uniform4f(this.addr, e.x, e.y, e.z, e.w),
            (n[0] = e.x),
            (n[1] = e.y),
            (n[2] = e.z),
            (n[3] = e.w));
        else {
          if (kt(n, e)) return;
          t.uniform4fv(this.addr, e), Ht(n, e);
        }
      }
      function jt(t, e) {
        const n = this.cache,
          i = e.elements;
        if (void 0 === i) {
          if (kt(n, e)) return;
          t.uniformMatrix2fv(this.addr, !1, e), Ht(n, e);
        } else {
          if (kt(n, i)) return;
          Bt.set(i), t.uniformMatrix2fv(this.addr, !1, Bt), Ht(n, i);
        }
      }
      function Yt(t, e) {
        const n = this.cache,
          i = e.elements;
        if (void 0 === i) {
          if (kt(n, e)) return;
          t.uniformMatrix3fv(this.addr, !1, e), Ht(n, e);
        } else {
          if (kt(n, i)) return;
          Ft.set(i), t.uniformMatrix3fv(this.addr, !1, Ft), Ht(n, i);
        }
      }
      function Kt(t, e) {
        const n = this.cache,
          i = e.elements;
        if (void 0 === i) {
          if (kt(n, e)) return;
          t.uniformMatrix4fv(this.addr, !1, e), Ht(n, e);
        } else {
          if (kt(n, i)) return;
          Ot.set(i), t.uniformMatrix4fv(this.addr, !1, Ot), Ht(n, i);
        }
      }
      function Zt(t, e) {
        const n = this.cache;
        n[0] !== e && (t.uniform1i(this.addr, e), (n[0] = e));
      }
      function $t(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y) ||
            (t.uniform2i(this.addr, e.x, e.y), (n[0] = e.x), (n[1] = e.y));
        else {
          if (kt(n, e)) return;
          t.uniform2iv(this.addr, e), Ht(n, e);
        }
      }
      function Qt(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y && n[2] === e.z) ||
            (t.uniform3i(this.addr, e.x, e.y, e.z),
            (n[0] = e.x),
            (n[1] = e.y),
            (n[2] = e.z));
        else {
          if (kt(n, e)) return;
          t.uniform3iv(this.addr, e), Ht(n, e);
        }
      }
      function Jt(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w) ||
            (t.uniform4i(this.addr, e.x, e.y, e.z, e.w),
            (n[0] = e.x),
            (n[1] = e.y),
            (n[2] = e.z),
            (n[3] = e.w));
        else {
          if (kt(n, e)) return;
          t.uniform4iv(this.addr, e), Ht(n, e);
        }
      }
      function te(t, e) {
        const n = this.cache;
        n[0] !== e && (t.uniform1ui(this.addr, e), (n[0] = e));
      }
      function ee(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y) ||
            (t.uniform2ui(this.addr, e.x, e.y), (n[0] = e.x), (n[1] = e.y));
        else {
          if (kt(n, e)) return;
          t.uniform2uiv(this.addr, e), Ht(n, e);
        }
      }
      function ne(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y && n[2] === e.z) ||
            (t.uniform3ui(this.addr, e.x, e.y, e.z),
            (n[0] = e.x),
            (n[1] = e.y),
            (n[2] = e.z));
        else {
          if (kt(n, e)) return;
          t.uniform3uiv(this.addr, e), Ht(n, e);
        }
      }
      function ie(t, e) {
        const n = this.cache;
        if (void 0 !== e.x)
          (n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w) ||
            (t.uniform4ui(this.addr, e.x, e.y, e.z, e.w),
            (n[0] = e.x),
            (n[1] = e.y),
            (n[2] = e.z),
            (n[3] = e.w));
        else {
          if (kt(n, e)) return;
          t.uniform4uiv(this.addr, e), Ht(n, e);
        }
      }
      function re(t, e, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r));
        const a = this.type === t.SAMPLER_2D_SHADOW ? Pt : Ct;
        n.setTexture2D(e || a, r);
      }
      function ae(t, e, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)),
          n.setTexture3D(e || Ut, r);
      }
      function se(t, e, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)),
          n.setTextureCube(e || Dt, r);
      }
      function oe(t, e, n) {
        const i = this.cache,
          r = n.allocateTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)),
          n.setTexture2DArray(e || Lt, r);
      }
      function le(t, e) {
        t.uniform1fv(this.addr, e);
      }
      function ce(t, e) {
        const n = zt(e, this.size, 2);
        t.uniform2fv(this.addr, n);
      }
      function ue(t, e) {
        const n = zt(e, this.size, 3);
        t.uniform3fv(this.addr, n);
      }
      function he(t, e) {
        const n = zt(e, this.size, 4);
        t.uniform4fv(this.addr, n);
      }
      function de(t, e) {
        const n = zt(e, this.size, 4);
        t.uniformMatrix2fv(this.addr, !1, n);
      }
      function pe(t, e) {
        const n = zt(e, this.size, 9);
        t.uniformMatrix3fv(this.addr, !1, n);
      }
      function fe(t, e) {
        const n = zt(e, this.size, 16);
        t.uniformMatrix4fv(this.addr, !1, n);
      }
      function me(t, e) {
        t.uniform1iv(this.addr, e);
      }
      function ge(t, e) {
        t.uniform2iv(this.addr, e);
      }
      function _e(t, e) {
        t.uniform3iv(this.addr, e);
      }
      function ve(t, e) {
        t.uniform4iv(this.addr, e);
      }
      function xe(t, e) {
        t.uniform1uiv(this.addr, e);
      }
      function ye(t, e) {
        t.uniform2uiv(this.addr, e);
      }
      function Me(t, e) {
        t.uniform3uiv(this.addr, e);
      }
      function Se(t, e) {
        t.uniform4uiv(this.addr, e);
      }
      function Ee(t, e, n) {
        const i = this.cache,
          r = e.length,
          a = Gt(n, r);
        kt(i, a) || (t.uniform1iv(this.addr, a), Ht(i, a));
        for (let t = 0; t !== r; ++t) n.setTexture2D(e[t] || Ct, a[t]);
      }
      function be(t, e, n) {
        const i = this.cache,
          r = e.length,
          a = Gt(n, r);
        kt(i, a) || (t.uniform1iv(this.addr, a), Ht(i, a));
        for (let t = 0; t !== r; ++t) n.setTexture3D(e[t] || Ut, a[t]);
      }
      function Te(t, e, n) {
        const i = this.cache,
          r = e.length,
          a = Gt(n, r);
        kt(i, a) || (t.uniform1iv(this.addr, a), Ht(i, a));
        for (let t = 0; t !== r; ++t) n.setTextureCube(e[t] || Dt, a[t]);
      }
      function we(t, e, n) {
        const i = this.cache,
          r = e.length,
          a = Gt(n, r);
        kt(i, a) || (t.uniform1iv(this.addr, a), Ht(i, a));
        for (let t = 0; t !== r; ++t) n.setTexture2DArray(e[t] || Lt, a[t]);
      }
      class Ae {
        constructor(t, e, n) {
          (this.id = t),
            (this.addr = n),
            (this.cache = []),
            (this.type = e.type),
            (this.setValue = (function (t) {
              switch (t) {
                case 5126:
                  return Vt;
                case 35664:
                  return Wt;
                case 35665:
                  return Xt;
                case 35666:
                  return qt;
                case 35674:
                  return jt;
                case 35675:
                  return Yt;
                case 35676:
                  return Kt;
                case 5124:
                case 35670:
                  return Zt;
                case 35667:
                case 35671:
                  return $t;
                case 35668:
                case 35672:
                  return Qt;
                case 35669:
                case 35673:
                  return Jt;
                case 5125:
                  return te;
                case 36294:
                  return ee;
                case 36295:
                  return ne;
                case 36296:
                  return ie;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                  return re;
                case 35679:
                case 36299:
                case 36307:
                  return ae;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                  return se;
                case 36289:
                case 36303:
                case 36311:
                case 36292:
                  return oe;
              }
            })(e.type));
        }
      }
      class Re {
        constructor(t, e, n) {
          (this.id = t),
            (this.addr = n),
            (this.cache = []),
            (this.type = e.type),
            (this.size = e.size),
            (this.setValue = (function (t) {
              switch (t) {
                case 5126:
                  return le;
                case 35664:
                  return ce;
                case 35665:
                  return ue;
                case 35666:
                  return he;
                case 35674:
                  return de;
                case 35675:
                  return pe;
                case 35676:
                  return fe;
                case 5124:
                case 35670:
                  return me;
                case 35667:
                case 35671:
                  return ge;
                case 35668:
                case 35672:
                  return _e;
                case 35669:
                case 35673:
                  return ve;
                case 5125:
                  return xe;
                case 36294:
                  return ye;
                case 36295:
                  return Me;
                case 36296:
                  return Se;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                  return Ee;
                case 35679:
                case 36299:
                case 36307:
                  return be;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                  return Te;
                case 36289:
                case 36303:
                case 36311:
                case 36292:
                  return we;
              }
            })(e.type));
        }
      }
      class Ce {
        constructor(t) {
          (this.id = t), (this.seq = []), (this.map = {});
        }
        setValue(t, e, n) {
          const i = this.seq;
          for (let r = 0, a = i.length; r !== a; ++r) {
            const a = i[r];
            a.setValue(t, e[a.id], n);
          }
        }
      }
      const Pe = /(\w+)(\])?(\[|\.)?/g;
      function Le(t, e) {
        t.seq.push(e), (t.map[e.id] = e);
      }
      function Ue(t, e, n) {
        const i = t.name,
          r = i.length;
        for (Pe.lastIndex = 0; ; ) {
          const a = Pe.exec(i),
            s = Pe.lastIndex;
          let o = a[1];
          const l = "]" === a[2],
            c = a[3];
          if ((l && (o |= 0), void 0 === c || ("[" === c && s + 2 === r))) {
            Le(n, void 0 === c ? new Ae(o, t, e) : new Re(o, t, e));
            break;
          }
          {
            let t = n.map[o];
            void 0 === t && ((t = new Ce(o)), Le(n, t)), (n = t);
          }
        }
      }
      class De {
        constructor(t, e) {
          (this.seq = []), (this.map = {});
          const n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS);
          for (let i = 0; i < n; ++i) {
            const n = t.getActiveUniform(e, i);
            Ue(n, t.getUniformLocation(e, n.name), this);
          }
        }
        setValue(t, e, n, i) {
          const r = this.map[e];
          void 0 !== r && r.setValue(t, n, i);
        }
        setOptional(t, e, n) {
          const i = e[n];
          void 0 !== i && this.setValue(t, n, i);
        }
        static upload(t, e, n, i) {
          for (let r = 0, a = e.length; r !== a; ++r) {
            const a = e[r],
              s = n[a.id];
            !1 !== s.needsUpdate && a.setValue(t, s.value, i);
          }
        }
        static seqWithValue(t, e) {
          const n = [];
          for (let i = 0, r = t.length; i !== r; ++i) {
            const r = t[i];
            r.id in e && n.push(r);
          }
          return n;
        }
      }
      function Ie(t, e, n) {
        const i = t.createShader(e);
        return t.shaderSource(i, n), t.compileShader(i), i;
      }
      const Ne = 37297;
      let Oe = 0;
      function Fe(t, e, n) {
        const i = t.getShaderParameter(e, t.COMPILE_STATUS),
          r = t.getShaderInfoLog(e).trim();
        if (i && "" === r) return "";
        const a = /ERROR: 0:(\d+)/.exec(r);
        if (a) {
          const i = parseInt(a[1]);
          return (
            n.toUpperCase() +
            "\n\n" +
            r +
            "\n\n" +
            (function (t, e) {
              const n = t.split("\n"),
                i = [],
                r = Math.max(e - 6, 0),
                a = Math.min(e + 6, n.length);
              for (let t = r; t < a; t++) {
                const r = t + 1;
                i.push(`${r === e ? ">" : " "} ${r}: ${n[t]}`);
              }
              return i.join("\n");
            })(t.getShaderSource(e), i)
          );
        }
        return r;
      }
      function Be(t, e) {
        const n = (function (t) {
          const e = b.pp.getPrimaries(b.pp.workingColorSpace),
            n = b.pp.getPrimaries(t);
          let r;
          switch (
            (e === n
              ? (r = "")
              : e === i.wqq && n === i.z5
              ? (r = "LinearDisplayP3ToLinearSRGB")
              : e === i.z5 &&
                n === i.wqq &&
                (r = "LinearSRGBToLinearDisplayP3"),
            t)
          ) {
            case i.Zr2:
            case i.qIQ:
              return [r, "LinearTransferOETF"];
            case i.er$:
            case i.V5c:
              return [r, "sRGBTransferOETF"];
            default:
              return (
                console.warn("THREE.WebGLProgram: Unsupported color space:", t),
                [r, "LinearTransferOETF"]
              );
          }
        })(e);
        return `vec4 ${t}( vec4 value ) { return ${n[0]}( ${n[1]}( value ) ); }`;
      }
      function ze(t, e) {
        let n;
        switch (e) {
          case i.kyO:
            n = "Linear";
            break;
          case i.Mjd:
            n = "Reinhard";
            break;
          case i.nNL:
            n = "OptimizedCineon";
            break;
          case i.FV:
            n = "ACESFilmic";
            break;
          case i.LAk:
            n = "AgX";
            break;
          case i.aJ8:
            n = "Neutral";
            break;
          case i.g7M:
            n = "Custom";
            break;
          default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e),
              (n = "Linear");
        }
        return (
          "vec3 " +
          t +
          "( vec3 color ) { return " +
          n +
          "ToneMapping( color ); }"
        );
      }
      function ke(t) {
        return "" !== t;
      }
      function He(t, e) {
        const n =
          e.numSpotLightShadows +
          e.numSpotLightMaps -
          e.numSpotLightShadowsWithMaps;
        return t
          .replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
          .replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
          .replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps)
          .replace(/NUM_SPOT_LIGHT_COORDS/g, n)
          .replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
          .replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
          .replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
          .replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows)
          .replace(
            /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,
            e.numSpotLightShadowsWithMaps
          )
          .replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows)
          .replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
      }
      function Ge(t, e) {
        return t
          .replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes)
          .replace(
            /UNION_CLIPPING_PLANES/g,
            e.numClippingPlanes - e.numClipIntersection
          );
      }
      const Ve = /^[ \t]*#include +<([\w\d./]+)>/gm;
      function We(t) {
        return t.replace(Ve, qe);
      }
      const Xe = new Map();
      function qe(t, e) {
        let n = A[e];
        if (void 0 === n) {
          const t = Xe.get(e);
          if (void 0 === t)
            throw new Error("Can not resolve #include <" + e + ">");
          (n = A[t]),
            console.warn(
              'THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',
              e,
              t
            );
        }
        return We(n);
      }
      const je =
        /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
      function Ye(t) {
        return t.replace(je, Ke);
      }
      function Ke(t, e, n, i) {
        let r = "";
        for (let t = parseInt(e); t < parseInt(n); t++)
          r += i
            .replace(/\[\s*i\s*\]/g, "[ " + t + " ]")
            .replace(/UNROLLED_LOOP_INDEX/g, t);
        return r;
      }
      function Ze(t) {
        let e = `precision ${t.precision} float;\n\tprecision ${t.precision} int;\n\tprecision ${t.precision} sampler2D;\n\tprecision ${t.precision} samplerCube;\n\tprecision ${t.precision} sampler3D;\n\tprecision ${t.precision} sampler2DArray;\n\tprecision ${t.precision} sampler2DShadow;\n\tprecision ${t.precision} samplerCubeShadow;\n\tprecision ${t.precision} sampler2DArrayShadow;\n\tprecision ${t.precision} isampler2D;\n\tprecision ${t.precision} isampler3D;\n\tprecision ${t.precision} isamplerCube;\n\tprecision ${t.precision} isampler2DArray;\n\tprecision ${t.precision} usampler2D;\n\tprecision ${t.precision} usampler3D;\n\tprecision ${t.precision} usamplerCube;\n\tprecision ${t.precision} usampler2DArray;\n\t`;
        return (
          "highp" === t.precision
            ? (e += "\n#define HIGH_PRECISION")
            : "mediump" === t.precision
            ? (e += "\n#define MEDIUM_PRECISION")
            : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"),
          e
        );
      }
      function $e(t, e, n, r) {
        const a = t.getContext(),
          s = n.defines;
        let o = n.vertexShader,
          l = n.fragmentShader;
        const c = (function (t) {
            let e = "SHADOWMAP_TYPE_BASIC";
            return (
              t.shadowMapType === i.QP0
                ? (e = "SHADOWMAP_TYPE_PCF")
                : t.shadowMapType === i.Wk7
                ? (e = "SHADOWMAP_TYPE_PCF_SOFT")
                : t.shadowMapType === i.RyA && (e = "SHADOWMAP_TYPE_VSM"),
              e
            );
          })(n),
          u = (function (t) {
            let e = "ENVMAP_TYPE_CUBE";
            if (t.envMap)
              switch (t.envMapMode) {
                case i.hy7:
                case i.xFO:
                  e = "ENVMAP_TYPE_CUBE";
                  break;
                case i.Om:
                  e = "ENVMAP_TYPE_CUBE_UV";
              }
            return e;
          })(n),
          h = (function (t) {
            let e = "ENVMAP_MODE_REFLECTION";
            return (
              t.envMap &&
                t.envMapMode === i.xFO &&
                (e = "ENVMAP_MODE_REFRACTION"),
              e
            );
          })(n),
          d = (function (t) {
            let e = "ENVMAP_BLENDING_NONE";
            if (t.envMap)
              switch (t.combine) {
                case i.caT:
                  e = "ENVMAP_BLENDING_MULTIPLY";
                  break;
                case i.KRh:
                  e = "ENVMAP_BLENDING_MIX";
                  break;
                case i.XrR:
                  e = "ENVMAP_BLENDING_ADD";
              }
            return e;
          })(n),
          p = (function (t) {
            const e = t.envMapCubeUVHeight;
            if (null === e) return null;
            const n = Math.log2(e) - 2,
              i = 1 / e;
            return {
              texelWidth: 1 / (3 * Math.max(Math.pow(2, n), 112)),
              texelHeight: i,
              maxMip: n,
            };
          })(n),
          f = (function (t) {
            return [
              t.extensionClipCullDistance
                ? "#extension GL_ANGLE_clip_cull_distance : require"
                : "",
              t.extensionMultiDraw
                ? "#extension GL_ANGLE_multi_draw : require"
                : "",
            ]
              .filter(ke)
              .join("\n");
          })(n),
          m = (function (t) {
            const e = [];
            for (const n in t) {
              const i = t[n];
              !1 !== i && e.push("#define " + n + " " + i);
            }
            return e.join("\n");
          })(s),
          g = a.createProgram();
        let _,
          v,
          x = n.glslVersion ? "#version " + n.glslVersion + "\n" : "";
        n.isRawShaderMaterial
          ? ((_ = [
              "#define SHADER_TYPE " + n.shaderType,
              "#define SHADER_NAME " + n.shaderName,
              m,
            ]
              .filter(ke)
              .join("\n")),
            _.length > 0 && (_ += "\n"),
            (v = [
              "#define SHADER_TYPE " + n.shaderType,
              "#define SHADER_NAME " + n.shaderName,
              m,
            ]
              .filter(ke)
              .join("\n")),
            v.length > 0 && (v += "\n"))
          : ((_ = [
              Ze(n),
              "#define SHADER_TYPE " + n.shaderType,
              "#define SHADER_NAME " + n.shaderName,
              m,
              n.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
              n.batching ? "#define USE_BATCHING" : "",
              n.batchingColor ? "#define USE_BATCHING_COLOR" : "",
              n.instancing ? "#define USE_INSTANCING" : "",
              n.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
              n.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
              n.useFog && n.fog ? "#define USE_FOG" : "",
              n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
              n.map ? "#define USE_MAP" : "",
              n.envMap ? "#define USE_ENVMAP" : "",
              n.envMap ? "#define " + h : "",
              n.lightMap ? "#define USE_LIGHTMAP" : "",
              n.aoMap ? "#define USE_AOMAP" : "",
              n.bumpMap ? "#define USE_BUMPMAP" : "",
              n.normalMap ? "#define USE_NORMALMAP" : "",
              n.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
              n.normalMapTangentSpace
                ? "#define USE_NORMALMAP_TANGENTSPACE"
                : "",
              n.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
              n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
              n.anisotropy ? "#define USE_ANISOTROPY" : "",
              n.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
              n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
              n.clearcoatRoughnessMap
                ? "#define USE_CLEARCOAT_ROUGHNESSMAP"
                : "",
              n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
              n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
              n.iridescenceThicknessMap
                ? "#define USE_IRIDESCENCE_THICKNESSMAP"
                : "",
              n.specularMap ? "#define USE_SPECULARMAP" : "",
              n.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
              n.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
              n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
              n.metalnessMap ? "#define USE_METALNESSMAP" : "",
              n.alphaMap ? "#define USE_ALPHAMAP" : "",
              n.alphaHash ? "#define USE_ALPHAHASH" : "",
              n.transmission ? "#define USE_TRANSMISSION" : "",
              n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
              n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
              n.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
              n.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
              n.mapUv ? "#define MAP_UV " + n.mapUv : "",
              n.alphaMapUv ? "#define ALPHAMAP_UV " + n.alphaMapUv : "",
              n.lightMapUv ? "#define LIGHTMAP_UV " + n.lightMapUv : "",
              n.aoMapUv ? "#define AOMAP_UV " + n.aoMapUv : "",
              n.emissiveMapUv
                ? "#define EMISSIVEMAP_UV " + n.emissiveMapUv
                : "",
              n.bumpMapUv ? "#define BUMPMAP_UV " + n.bumpMapUv : "",
              n.normalMapUv ? "#define NORMALMAP_UV " + n.normalMapUv : "",
              n.displacementMapUv
                ? "#define DISPLACEMENTMAP_UV " + n.displacementMapUv
                : "",
              n.metalnessMapUv
                ? "#define METALNESSMAP_UV " + n.metalnessMapUv
                : "",
              n.roughnessMapUv
                ? "#define ROUGHNESSMAP_UV " + n.roughnessMapUv
                : "",
              n.anisotropyMapUv
                ? "#define ANISOTROPYMAP_UV " + n.anisotropyMapUv
                : "",
              n.clearcoatMapUv
                ? "#define CLEARCOATMAP_UV " + n.clearcoatMapUv
                : "",
              n.clearcoatNormalMapUv
                ? "#define CLEARCOAT_NORMALMAP_UV " + n.clearcoatNormalMapUv
                : "",
              n.clearcoatRoughnessMapUv
                ? "#define CLEARCOAT_ROUGHNESSMAP_UV " +
                  n.clearcoatRoughnessMapUv
                : "",
              n.iridescenceMapUv
                ? "#define IRIDESCENCEMAP_UV " + n.iridescenceMapUv
                : "",
              n.iridescenceThicknessMapUv
                ? "#define IRIDESCENCE_THICKNESSMAP_UV " +
                  n.iridescenceThicknessMapUv
                : "",
              n.sheenColorMapUv
                ? "#define SHEEN_COLORMAP_UV " + n.sheenColorMapUv
                : "",
              n.sheenRoughnessMapUv
                ? "#define SHEEN_ROUGHNESSMAP_UV " + n.sheenRoughnessMapUv
                : "",
              n.specularMapUv
                ? "#define SPECULARMAP_UV " + n.specularMapUv
                : "",
              n.specularColorMapUv
                ? "#define SPECULAR_COLORMAP_UV " + n.specularColorMapUv
                : "",
              n.specularIntensityMapUv
                ? "#define SPECULAR_INTENSITYMAP_UV " + n.specularIntensityMapUv
                : "",
              n.transmissionMapUv
                ? "#define TRANSMISSIONMAP_UV " + n.transmissionMapUv
                : "",
              n.thicknessMapUv
                ? "#define THICKNESSMAP_UV " + n.thicknessMapUv
                : "",
              n.vertexTangents && !1 === n.flatShading
                ? "#define USE_TANGENT"
                : "",
              n.vertexColors ? "#define USE_COLOR" : "",
              n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
              n.vertexUv1s ? "#define USE_UV1" : "",
              n.vertexUv2s ? "#define USE_UV2" : "",
              n.vertexUv3s ? "#define USE_UV3" : "",
              n.pointsUvs ? "#define USE_POINTS_UV" : "",
              n.flatShading ? "#define FLAT_SHADED" : "",
              n.skinning ? "#define USE_SKINNING" : "",
              n.morphTargets ? "#define USE_MORPHTARGETS" : "",
              n.morphNormals && !1 === n.flatShading
                ? "#define USE_MORPHNORMALS"
                : "",
              n.morphColors ? "#define USE_MORPHCOLORS" : "",
              n.morphTargetsCount > 0
                ? "#define MORPHTARGETS_TEXTURE_STRIDE " + n.morphTextureStride
                : "",
              n.morphTargetsCount > 0
                ? "#define MORPHTARGETS_COUNT " + n.morphTargetsCount
                : "",
              n.doubleSided ? "#define DOUBLE_SIDED" : "",
              n.flipSided ? "#define FLIP_SIDED" : "",
              n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
              n.shadowMapEnabled ? "#define " + c : "",
              n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
              n.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
              n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
              "uniform mat4 modelMatrix;",
              "uniform mat4 modelViewMatrix;",
              "uniform mat4 projectionMatrix;",
              "uniform mat4 viewMatrix;",
              "uniform mat3 normalMatrix;",
              "uniform vec3 cameraPosition;",
              "uniform bool isOrthographic;",
              "#ifdef USE_INSTANCING",
              "\tattribute mat4 instanceMatrix;",
              "#endif",
              "#ifdef USE_INSTANCING_COLOR",
              "\tattribute vec3 instanceColor;",
              "#endif",
              "#ifdef USE_INSTANCING_MORPH",
              "\tuniform sampler2D morphTexture;",
              "#endif",
              "attribute vec3 position;",
              "attribute vec3 normal;",
              "attribute vec2 uv;",
              "#ifdef USE_UV1",
              "\tattribute vec2 uv1;",
              "#endif",
              "#ifdef USE_UV2",
              "\tattribute vec2 uv2;",
              "#endif",
              "#ifdef USE_UV3",
              "\tattribute vec2 uv3;",
              "#endif",
              "#ifdef USE_TANGENT",
              "\tattribute vec4 tangent;",
              "#endif",
              "#if defined( USE_COLOR_ALPHA )",
              "\tattribute vec4 color;",
              "#elif defined( USE_COLOR )",
              "\tattribute vec3 color;",
              "#endif",
              "#ifdef USE_SKINNING",
              "\tattribute vec4 skinIndex;",
              "\tattribute vec4 skinWeight;",
              "#endif",
              "\n",
            ]
              .filter(ke)
              .join("\n")),
            (v = [
              Ze(n),
              "#define SHADER_TYPE " + n.shaderType,
              "#define SHADER_NAME " + n.shaderName,
              m,
              n.useFog && n.fog ? "#define USE_FOG" : "",
              n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
              n.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
              n.map ? "#define USE_MAP" : "",
              n.matcap ? "#define USE_MATCAP" : "",
              n.envMap ? "#define USE_ENVMAP" : "",
              n.envMap ? "#define " + u : "",
              n.envMap ? "#define " + h : "",
              n.envMap ? "#define " + d : "",
              p ? "#define CUBEUV_TEXEL_WIDTH " + p.texelWidth : "",
              p ? "#define CUBEUV_TEXEL_HEIGHT " + p.texelHeight : "",
              p ? "#define CUBEUV_MAX_MIP " + p.maxMip + ".0" : "",
              n.lightMap ? "#define USE_LIGHTMAP" : "",
              n.aoMap ? "#define USE_AOMAP" : "",
              n.bumpMap ? "#define USE_BUMPMAP" : "",
              n.normalMap ? "#define USE_NORMALMAP" : "",
              n.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
              n.normalMapTangentSpace
                ? "#define USE_NORMALMAP_TANGENTSPACE"
                : "",
              n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
              n.anisotropy ? "#define USE_ANISOTROPY" : "",
              n.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
              n.clearcoat ? "#define USE_CLEARCOAT" : "",
              n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
              n.clearcoatRoughnessMap
                ? "#define USE_CLEARCOAT_ROUGHNESSMAP"
                : "",
              n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
              n.dispersion ? "#define USE_DISPERSION" : "",
              n.iridescence ? "#define USE_IRIDESCENCE" : "",
              n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
              n.iridescenceThicknessMap
                ? "#define USE_IRIDESCENCE_THICKNESSMAP"
                : "",
              n.specularMap ? "#define USE_SPECULARMAP" : "",
              n.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
              n.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
              n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
              n.metalnessMap ? "#define USE_METALNESSMAP" : "",
              n.alphaMap ? "#define USE_ALPHAMAP" : "",
              n.alphaTest ? "#define USE_ALPHATEST" : "",
              n.alphaHash ? "#define USE_ALPHAHASH" : "",
              n.sheen ? "#define USE_SHEEN" : "",
              n.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
              n.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
              n.transmission ? "#define USE_TRANSMISSION" : "",
              n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
              n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
              n.vertexTangents && !1 === n.flatShading
                ? "#define USE_TANGENT"
                : "",
              n.vertexColors || n.instancingColor || n.batchingColor
                ? "#define USE_COLOR"
                : "",
              n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
              n.vertexUv1s ? "#define USE_UV1" : "",
              n.vertexUv2s ? "#define USE_UV2" : "",
              n.vertexUv3s ? "#define USE_UV3" : "",
              n.pointsUvs ? "#define USE_POINTS_UV" : "",
              n.gradientMap ? "#define USE_GRADIENTMAP" : "",
              n.flatShading ? "#define FLAT_SHADED" : "",
              n.doubleSided ? "#define DOUBLE_SIDED" : "",
              n.flipSided ? "#define FLIP_SIDED" : "",
              n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
              n.shadowMapEnabled ? "#define " + c : "",
              n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
              n.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
              n.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
              n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
              "uniform mat4 viewMatrix;",
              "uniform vec3 cameraPosition;",
              "uniform bool isOrthographic;",
              n.toneMapping !== i.y_p ? "#define TONE_MAPPING" : "",
              n.toneMapping !== i.y_p ? A.tonemapping_pars_fragment : "",
              n.toneMapping !== i.y_p ? ze("toneMapping", n.toneMapping) : "",
              n.dithering ? "#define DITHERING" : "",
              n.opaque ? "#define OPAQUE" : "",
              A.colorspace_pars_fragment,
              Be("linearToOutputTexel", n.outputColorSpace),
              n.useDepthPacking
                ? "#define DEPTH_PACKING " + n.depthPacking
                : "",
              "\n",
            ]
              .filter(ke)
              .join("\n"))),
          (o = We(o)),
          (o = He(o, n)),
          (o = Ge(o, n)),
          (l = We(l)),
          (l = He(l, n)),
          (l = Ge(l, n)),
          (o = Ye(o)),
          (l = Ye(l)),
          !0 !== n.isRawShaderMaterial &&
            ((x = "#version 300 es\n"),
            (_ =
              [
                f,
                "#define attribute in",
                "#define varying out",
                "#define texture2D texture",
              ].join("\n") +
              "\n" +
              _),
            (v =
              [
                "#define varying in",
                n.glslVersion === i.Wdf
                  ? ""
                  : "layout(location = 0) out highp vec4 pc_fragColor;",
                n.glslVersion === i.Wdf
                  ? ""
                  : "#define gl_FragColor pc_fragColor",
                "#define gl_FragDepthEXT gl_FragDepth",
                "#define texture2D texture",
                "#define textureCube texture",
                "#define texture2DProj textureProj",
                "#define texture2DLodEXT textureLod",
                "#define texture2DProjLodEXT textureProjLod",
                "#define textureCubeLodEXT textureLod",
                "#define texture2DGradEXT textureGrad",
                "#define texture2DProjGradEXT textureProjGrad",
                "#define textureCubeGradEXT textureGrad",
              ].join("\n") +
              "\n" +
              v));
        const y = x + _ + o,
          M = x + v + l,
          S = Ie(a, a.VERTEX_SHADER, y),
          E = Ie(a, a.FRAGMENT_SHADER, M);
        function b(e) {
          if (t.debug.checkShaderErrors) {
            const n = a.getProgramInfoLog(g).trim(),
              i = a.getShaderInfoLog(S).trim(),
              r = a.getShaderInfoLog(E).trim();
            let s = !0,
              o = !0;
            if (!1 === a.getProgramParameter(g, a.LINK_STATUS))
              if (((s = !1), "function" == typeof t.debug.onShaderError))
                t.debug.onShaderError(a, g, S, E);
              else {
                const t = Fe(a, S, "vertex"),
                  i = Fe(a, E, "fragment");
                console.error(
                  "THREE.WebGLProgram: Shader Error " +
                    a.getError() +
                    " - VALIDATE_STATUS " +
                    a.getProgramParameter(g, a.VALIDATE_STATUS) +
                    "\n\nMaterial Name: " +
                    e.name +
                    "\nMaterial Type: " +
                    e.type +
                    "\n\nProgram Info Log: " +
                    n +
                    "\n" +
                    t +
                    "\n" +
                    i
                );
              }
            else
              "" !== n
                ? console.warn("THREE.WebGLProgram: Program Info Log:", n)
                : ("" !== i && "" !== r) || (o = !1);
            o &&
              (e.diagnostics = {
                runnable: s,
                programLog: n,
                vertexShader: { log: i, prefix: _ },
                fragmentShader: { log: r, prefix: v },
              });
          }
          a.deleteShader(S),
            a.deleteShader(E),
            (T = new De(a, g)),
            (w = (function (t, e) {
              const n = {},
                i = t.getProgramParameter(e, t.ACTIVE_ATTRIBUTES);
              for (let r = 0; r < i; r++) {
                const i = t.getActiveAttrib(e, r),
                  a = i.name;
                let s = 1;
                i.type === t.FLOAT_MAT2 && (s = 2),
                  i.type === t.FLOAT_MAT3 && (s = 3),
                  i.type === t.FLOAT_MAT4 && (s = 4),
                  (n[a] = {
                    type: i.type,
                    location: t.getAttribLocation(e, a),
                    locationSize: s,
                  });
              }
              return n;
            })(a, g));
        }
        let T, w;
        a.attachShader(g, S),
          a.attachShader(g, E),
          void 0 !== n.index0AttributeName
            ? a.bindAttribLocation(g, 0, n.index0AttributeName)
            : !0 === n.morphTargets && a.bindAttribLocation(g, 0, "position"),
          a.linkProgram(g),
          (this.getUniforms = function () {
            return void 0 === T && b(this), T;
          }),
          (this.getAttributes = function () {
            return void 0 === w && b(this), w;
          });
        let R = !1 === n.rendererExtensionParallelShaderCompile;
        return (
          (this.isReady = function () {
            return !1 === R && (R = a.getProgramParameter(g, Ne)), R;
          }),
          (this.destroy = function () {
            r.releaseStatesOfProgram(this),
              a.deleteProgram(g),
              (this.program = void 0);
          }),
          (this.type = n.shaderType),
          (this.name = n.shaderName),
          (this.id = Oe++),
          (this.cacheKey = e),
          (this.usedTimes = 1),
          (this.program = g),
          (this.vertexShader = S),
          (this.fragmentShader = E),
          this
        );
      }
      let Qe = 0;
      class Je {
        constructor() {
          (this.shaderCache = new Map()), (this.materialCache = new Map());
        }
        update(t) {
          const e = t.vertexShader,
            n = t.fragmentShader,
            i = this._getShaderStage(e),
            r = this._getShaderStage(n),
            a = this._getShaderCacheForMaterial(t);
          return (
            !1 === a.has(i) && (a.add(i), i.usedTimes++),
            !1 === a.has(r) && (a.add(r), r.usedTimes++),
            this
          );
        }
        remove(t) {
          const e = this.materialCache.get(t);
          for (const t of e)
            t.usedTimes--, 0 === t.usedTimes && this.shaderCache.delete(t.code);
          return this.materialCache.delete(t), this;
        }
        getVertexShaderID(t) {
          return this._getShaderStage(t.vertexShader).id;
        }
        getFragmentShaderID(t) {
          return this._getShaderStage(t.fragmentShader).id;
        }
        dispose() {
          this.shaderCache.clear(), this.materialCache.clear();
        }
        _getShaderCacheForMaterial(t) {
          const e = this.materialCache;
          let n = e.get(t);
          return void 0 === n && ((n = new Set()), e.set(t, n)), n;
        }
        _getShaderStage(t) {
          const e = this.shaderCache;
          let n = e.get(t);
          return void 0 === n && ((n = new tn(t)), e.set(t, n)), n;
        }
      }
      class tn {
        constructor(t) {
          (this.id = Qe++), (this.code = t), (this.usedTimes = 0);
        }
      }
      function en(t, e, n, r, a, s, o) {
        const l = new wt.z(),
          c = new Je(),
          u = new Set(),
          h = [],
          d = a.logarithmicDepthBuffer,
          p = a.vertexTextures;
        let f = a.precision;
        const m = {
          MeshDepthMaterial: "depth",
          MeshDistanceMaterial: "distanceRGBA",
          MeshNormalMaterial: "normal",
          MeshBasicMaterial: "basic",
          MeshLambertMaterial: "lambert",
          MeshPhongMaterial: "phong",
          MeshToonMaterial: "toon",
          MeshStandardMaterial: "physical",
          MeshPhysicalMaterial: "physical",
          MeshMatcapMaterial: "matcap",
          LineBasicMaterial: "basic",
          LineDashedMaterial: "dashed",
          PointsMaterial: "points",
          ShadowMaterial: "shadow",
          SpriteMaterial: "sprite",
        };
        function g(t) {
          return u.add(t), 0 === t ? "uv" : `uv${t}`;
        }
        return {
          getParameters: function (s, l, h, _, v) {
            const x = _.fog,
              y = v.geometry,
              M = s.isMeshStandardMaterial ? _.environment : null,
              S = (s.isMeshStandardMaterial ? n : e).get(s.envMap || M),
              E = S && S.mapping === i.Om ? S.image.height : null,
              T = m[s.type];
            null !== s.precision &&
              ((f = a.getMaxPrecision(s.precision)),
              f !== s.precision &&
                console.warn(
                  "THREE.WebGLProgram.getParameters:",
                  s.precision,
                  "not supported, using",
                  f,
                  "instead."
                ));
            const w =
                y.morphAttributes.position ||
                y.morphAttributes.normal ||
                y.morphAttributes.color,
              A = void 0 !== w ? w.length : 0;
            let R,
              C,
              P,
              U,
              D = 0;
            if (
              (void 0 !== y.morphAttributes.position && (D = 1),
              void 0 !== y.morphAttributes.normal && (D = 2),
              void 0 !== y.morphAttributes.color && (D = 3),
              T)
            ) {
              const t = L[T];
              (R = t.vertexShader), (C = t.fragmentShader);
            } else
              (R = s.vertexShader),
                (C = s.fragmentShader),
                c.update(s),
                (P = c.getVertexShaderID(s)),
                (U = c.getFragmentShaderID(s));
            const I = t.getRenderTarget(),
              N = !0 === v.isInstancedMesh,
              O = !0 === v.isBatchedMesh,
              F = !!s.map,
              B = !!s.matcap,
              z = !!S,
              k = !!s.aoMap,
              H = !!s.lightMap,
              G = !!s.bumpMap,
              V = !!s.normalMap,
              W = !!s.displacementMap,
              X = !!s.emissiveMap,
              q = !!s.metalnessMap,
              j = !!s.roughnessMap,
              Y = s.anisotropy > 0,
              K = s.clearcoat > 0,
              Z = s.dispersion > 0,
              $ = s.iridescence > 0,
              Q = s.sheen > 0,
              J = s.transmission > 0,
              tt = Y && !!s.anisotropyMap,
              et = K && !!s.clearcoatMap,
              nt = K && !!s.clearcoatNormalMap,
              it = K && !!s.clearcoatRoughnessMap,
              rt = $ && !!s.iridescenceMap,
              at = $ && !!s.iridescenceThicknessMap,
              st = Q && !!s.sheenColorMap,
              ot = Q && !!s.sheenRoughnessMap,
              lt = !!s.specularMap,
              ct = !!s.specularColorMap,
              ut = !!s.specularIntensityMap,
              ht = J && !!s.transmissionMap,
              dt = J && !!s.thicknessMap,
              pt = !!s.gradientMap,
              ft = !!s.alphaMap,
              mt = s.alphaTest > 0,
              gt = !!s.alphaHash,
              _t = !!s.extensions;
            let vt = i.y_p;
            s.toneMapped &&
              ((null !== I && !0 !== I.isXRRenderTarget) ||
                (vt = t.toneMapping));
            const xt = {
              shaderID: T,
              shaderType: s.type,
              shaderName: s.name,
              vertexShader: R,
              fragmentShader: C,
              defines: s.defines,
              customVertexShaderID: P,
              customFragmentShaderID: U,
              isRawShaderMaterial: !0 === s.isRawShaderMaterial,
              glslVersion: s.glslVersion,
              precision: f,
              batching: O,
              batchingColor: O && null !== v._colorsTexture,
              instancing: N,
              instancingColor: N && null !== v.instanceColor,
              instancingMorph: N && null !== v.morphTexture,
              supportsVertexTextures: p,
              outputColorSpace:
                null === I
                  ? t.outputColorSpace
                  : !0 === I.isXRRenderTarget
                  ? I.texture.colorSpace
                  : i.Zr2,
              alphaToCoverage: !!s.alphaToCoverage,
              map: F,
              matcap: B,
              envMap: z,
              envMapMode: z && S.mapping,
              envMapCubeUVHeight: E,
              aoMap: k,
              lightMap: H,
              bumpMap: G,
              normalMap: V,
              displacementMap: p && W,
              emissiveMap: X,
              normalMapObjectSpace: V && s.normalMapType === i.vyJ,
              normalMapTangentSpace: V && s.normalMapType === i.bI3,
              metalnessMap: q,
              roughnessMap: j,
              anisotropy: Y,
              anisotropyMap: tt,
              clearcoat: K,
              clearcoatMap: et,
              clearcoatNormalMap: nt,
              clearcoatRoughnessMap: it,
              dispersion: Z,
              iridescence: $,
              iridescenceMap: rt,
              iridescenceThicknessMap: at,
              sheen: Q,
              sheenColorMap: st,
              sheenRoughnessMap: ot,
              specularMap: lt,
              specularColorMap: ct,
              specularIntensityMap: ut,
              transmission: J,
              transmissionMap: ht,
              thicknessMap: dt,
              gradientMap: pt,
              opaque:
                !1 === s.transparent &&
                s.blending === i.NTi &&
                !1 === s.alphaToCoverage,
              alphaMap: ft,
              alphaTest: mt,
              alphaHash: gt,
              combine: s.combine,
              mapUv: F && g(s.map.channel),
              aoMapUv: k && g(s.aoMap.channel),
              lightMapUv: H && g(s.lightMap.channel),
              bumpMapUv: G && g(s.bumpMap.channel),
              normalMapUv: V && g(s.normalMap.channel),
              displacementMapUv: W && g(s.displacementMap.channel),
              emissiveMapUv: X && g(s.emissiveMap.channel),
              metalnessMapUv: q && g(s.metalnessMap.channel),
              roughnessMapUv: j && g(s.roughnessMap.channel),
              anisotropyMapUv: tt && g(s.anisotropyMap.channel),
              clearcoatMapUv: et && g(s.clearcoatMap.channel),
              clearcoatNormalMapUv: nt && g(s.clearcoatNormalMap.channel),
              clearcoatRoughnessMapUv: it && g(s.clearcoatRoughnessMap.channel),
              iridescenceMapUv: rt && g(s.iridescenceMap.channel),
              iridescenceThicknessMapUv:
                at && g(s.iridescenceThicknessMap.channel),
              sheenColorMapUv: st && g(s.sheenColorMap.channel),
              sheenRoughnessMapUv: ot && g(s.sheenRoughnessMap.channel),
              specularMapUv: lt && g(s.specularMap.channel),
              specularColorMapUv: ct && g(s.specularColorMap.channel),
              specularIntensityMapUv: ut && g(s.specularIntensityMap.channel),
              transmissionMapUv: ht && g(s.transmissionMap.channel),
              thicknessMapUv: dt && g(s.thicknessMap.channel),
              alphaMapUv: ft && g(s.alphaMap.channel),
              vertexTangents: !!y.attributes.tangent && (V || Y),
              vertexColors: s.vertexColors,
              vertexAlphas:
                !0 === s.vertexColors &&
                !!y.attributes.color &&
                4 === y.attributes.color.itemSize,
              pointsUvs: !0 === v.isPoints && !!y.attributes.uv && (F || ft),
              fog: !!x,
              useFog: !0 === s.fog,
              fogExp2: !!x && x.isFogExp2,
              flatShading: !0 === s.flatShading,
              sizeAttenuation: !0 === s.sizeAttenuation,
              logarithmicDepthBuffer: d,
              skinning: !0 === v.isSkinnedMesh,
              morphTargets: void 0 !== y.morphAttributes.position,
              morphNormals: void 0 !== y.morphAttributes.normal,
              morphColors: void 0 !== y.morphAttributes.color,
              morphTargetsCount: A,
              morphTextureStride: D,
              numDirLights: l.directional.length,
              numPointLights: l.point.length,
              numSpotLights: l.spot.length,
              numSpotLightMaps: l.spotLightMap.length,
              numRectAreaLights: l.rectArea.length,
              numHemiLights: l.hemi.length,
              numDirLightShadows: l.directionalShadowMap.length,
              numPointLightShadows: l.pointShadowMap.length,
              numSpotLightShadows: l.spotShadowMap.length,
              numSpotLightShadowsWithMaps: l.numSpotLightShadowsWithMaps,
              numLightProbes: l.numLightProbes,
              numClippingPlanes: o.numPlanes,
              numClipIntersection: o.numIntersection,
              dithering: s.dithering,
              shadowMapEnabled: t.shadowMap.enabled && h.length > 0,
              shadowMapType: t.shadowMap.type,
              toneMapping: vt,
              decodeVideoTexture:
                F &&
                !0 === s.map.isVideoTexture &&
                b.pp.getTransfer(s.map.colorSpace) === i.KLL,
              premultipliedAlpha: s.premultipliedAlpha,
              doubleSided: s.side === i.$EB,
              flipSided: s.side === i.hsX,
              useDepthPacking: s.depthPacking >= 0,
              depthPacking: s.depthPacking || 0,
              index0AttributeName: s.index0AttributeName,
              extensionClipCullDistance:
                _t &&
                !0 === s.extensions.clipCullDistance &&
                r.has("WEBGL_clip_cull_distance"),
              extensionMultiDraw:
                _t &&
                !0 === s.extensions.multiDraw &&
                r.has("WEBGL_multi_draw"),
              rendererExtensionParallelShaderCompile: r.has(
                "KHR_parallel_shader_compile"
              ),
              customProgramCacheKey: s.customProgramCacheKey(),
            };
            return (
              (xt.vertexUv1s = u.has(1)),
              (xt.vertexUv2s = u.has(2)),
              (xt.vertexUv3s = u.has(3)),
              u.clear(),
              xt
            );
          },
          getProgramCacheKey: function (e) {
            const n = [];
            if (
              (e.shaderID
                ? n.push(e.shaderID)
                : (n.push(e.customVertexShaderID),
                  n.push(e.customFragmentShaderID)),
              void 0 !== e.defines)
            )
              for (const t in e.defines) n.push(t), n.push(e.defines[t]);
            return (
              !1 === e.isRawShaderMaterial &&
                ((function (t, e) {
                  t.push(e.precision),
                    t.push(e.outputColorSpace),
                    t.push(e.envMapMode),
                    t.push(e.envMapCubeUVHeight),
                    t.push(e.mapUv),
                    t.push(e.alphaMapUv),
                    t.push(e.lightMapUv),
                    t.push(e.aoMapUv),
                    t.push(e.bumpMapUv),
                    t.push(e.normalMapUv),
                    t.push(e.displacementMapUv),
                    t.push(e.emissiveMapUv),
                    t.push(e.metalnessMapUv),
                    t.push(e.roughnessMapUv),
                    t.push(e.anisotropyMapUv),
                    t.push(e.clearcoatMapUv),
                    t.push(e.clearcoatNormalMapUv),
                    t.push(e.clearcoatRoughnessMapUv),
                    t.push(e.iridescenceMapUv),
                    t.push(e.iridescenceThicknessMapUv),
                    t.push(e.sheenColorMapUv),
                    t.push(e.sheenRoughnessMapUv),
                    t.push(e.specularMapUv),
                    t.push(e.specularColorMapUv),
                    t.push(e.specularIntensityMapUv),
                    t.push(e.transmissionMapUv),
                    t.push(e.thicknessMapUv),
                    t.push(e.combine),
                    t.push(e.fogExp2),
                    t.push(e.sizeAttenuation),
                    t.push(e.morphTargetsCount),
                    t.push(e.morphAttributeCount),
                    t.push(e.numDirLights),
                    t.push(e.numPointLights),
                    t.push(e.numSpotLights),
                    t.push(e.numSpotLightMaps),
                    t.push(e.numHemiLights),
                    t.push(e.numRectAreaLights),
                    t.push(e.numDirLightShadows),
                    t.push(e.numPointLightShadows),
                    t.push(e.numSpotLightShadows),
                    t.push(e.numSpotLightShadowsWithMaps),
                    t.push(e.numLightProbes),
                    t.push(e.shadowMapType),
                    t.push(e.toneMapping),
                    t.push(e.numClippingPlanes),
                    t.push(e.numClipIntersection),
                    t.push(e.depthPacking);
                })(n, e),
                (function (t, e) {
                  l.disableAll(),
                    e.supportsVertexTextures && l.enable(0),
                    e.instancing && l.enable(1),
                    e.instancingColor && l.enable(2),
                    e.instancingMorph && l.enable(3),
                    e.matcap && l.enable(4),
                    e.envMap && l.enable(5),
                    e.normalMapObjectSpace && l.enable(6),
                    e.normalMapTangentSpace && l.enable(7),
                    e.clearcoat && l.enable(8),
                    e.iridescence && l.enable(9),
                    e.alphaTest && l.enable(10),
                    e.vertexColors && l.enable(11),
                    e.vertexAlphas && l.enable(12),
                    e.vertexUv1s && l.enable(13),
                    e.vertexUv2s && l.enable(14),
                    e.vertexUv3s && l.enable(15),
                    e.vertexTangents && l.enable(16),
                    e.anisotropy && l.enable(17),
                    e.alphaHash && l.enable(18),
                    e.batching && l.enable(19),
                    e.dispersion && l.enable(20),
                    e.batchingColor && l.enable(21),
                    t.push(l.mask),
                    l.disableAll(),
                    e.fog && l.enable(0),
                    e.useFog && l.enable(1),
                    e.flatShading && l.enable(2),
                    e.logarithmicDepthBuffer && l.enable(3),
                    e.skinning && l.enable(4),
                    e.morphTargets && l.enable(5),
                    e.morphNormals && l.enable(6),
                    e.morphColors && l.enable(7),
                    e.premultipliedAlpha && l.enable(8),
                    e.shadowMapEnabled && l.enable(9),
                    e.doubleSided && l.enable(10),
                    e.flipSided && l.enable(11),
                    e.useDepthPacking && l.enable(12),
                    e.dithering && l.enable(13),
                    e.transmission && l.enable(14),
                    e.sheen && l.enable(15),
                    e.opaque && l.enable(16),
                    e.pointsUvs && l.enable(17),
                    e.decodeVideoTexture && l.enable(18),
                    e.alphaToCoverage && l.enable(19),
                    t.push(l.mask);
                })(n, e),
                n.push(t.outputColorSpace)),
              n.push(e.customProgramCacheKey),
              n.join()
            );
          },
          getUniforms: function (t) {
            const e = m[t.type];
            let n;
            if (e) {
              const t = L[e];
              n = R.Ll.clone(t.uniforms);
            } else n = t.uniforms;
            return n;
          },
          acquireProgram: function (e, n) {
            let i;
            for (let t = 0, e = h.length; t < e; t++) {
              const e = h[t];
              if (e.cacheKey === n) {
                (i = e), ++i.usedTimes;
                break;
              }
            }
            return void 0 === i && ((i = new $e(t, n, e, s)), h.push(i)), i;
          },
          releaseProgram: function (t) {
            if (0 == --t.usedTimes) {
              const e = h.indexOf(t);
              (h[e] = h[h.length - 1]), h.pop(), t.destroy();
            }
          },
          releaseShaderCache: function (t) {
            c.remove(t);
          },
          programs: h,
          dispose: function () {
            c.dispose();
          },
        };
      }
      function nn() {
        let t = new WeakMap();
        return {
          get: function (e) {
            let n = t.get(e);
            return void 0 === n && ((n = {}), t.set(e, n)), n;
          },
          remove: function (e) {
            t.delete(e);
          },
          update: function (e, n, i) {
            t.get(e)[n] = i;
          },
          dispose: function () {
            t = new WeakMap();
          },
        };
      }
      function rn(t, e) {
        return t.groupOrder !== e.groupOrder
          ? t.groupOrder - e.groupOrder
          : t.renderOrder !== e.renderOrder
          ? t.renderOrder - e.renderOrder
          : t.material.id !== e.material.id
          ? t.material.id - e.material.id
          : t.z !== e.z
          ? t.z - e.z
          : t.id - e.id;
      }
      function an(t, e) {
        return t.groupOrder !== e.groupOrder
          ? t.groupOrder - e.groupOrder
          : t.renderOrder !== e.renderOrder
          ? t.renderOrder - e.renderOrder
          : t.z !== e.z
          ? e.z - t.z
          : t.id - e.id;
      }
      function sn() {
        const t = [];
        let e = 0;
        const n = [],
          i = [],
          r = [];
        function a(n, i, r, a, s, o) {
          let l = t[e];
          return (
            void 0 === l
              ? ((l = {
                  id: n.id,
                  object: n,
                  geometry: i,
                  material: r,
                  groupOrder: a,
                  renderOrder: n.renderOrder,
                  z: s,
                  group: o,
                }),
                (t[e] = l))
              : ((l.id = n.id),
                (l.object = n),
                (l.geometry = i),
                (l.material = r),
                (l.groupOrder = a),
                (l.renderOrder = n.renderOrder),
                (l.z = s),
                (l.group = o)),
            e++,
            l
          );
        }
        return {
          opaque: n,
          transmissive: i,
          transparent: r,
          init: function () {
            (e = 0), (n.length = 0), (i.length = 0), (r.length = 0);
          },
          push: function (t, e, s, o, l, c) {
            const u = a(t, e, s, o, l, c);
            s.transmission > 0
              ? i.push(u)
              : !0 === s.transparent
              ? r.push(u)
              : n.push(u);
          },
          unshift: function (t, e, s, o, l, c) {
            const u = a(t, e, s, o, l, c);
            s.transmission > 0
              ? i.unshift(u)
              : !0 === s.transparent
              ? r.unshift(u)
              : n.unshift(u);
          },
          finish: function () {
            for (let n = e, i = t.length; n < i; n++) {
              const e = t[n];
              if (null === e.id) break;
              (e.id = null),
                (e.object = null),
                (e.geometry = null),
                (e.material = null),
                (e.group = null);
            }
          },
          sort: function (t, e) {
            n.length > 1 && n.sort(t || rn),
              i.length > 1 && i.sort(e || an),
              r.length > 1 && r.sort(e || an);
          },
        };
      }
      function on() {
        let t = new WeakMap();
        return {
          get: function (e, n) {
            const i = t.get(e);
            let r;
            return (
              void 0 === i
                ? ((r = new sn()), t.set(e, [r]))
                : n >= i.length
                ? ((r = new sn()), i.push(r))
                : (r = i[n]),
              r
            );
          },
          dispose: function () {
            t = new WeakMap();
          },
        };
      }
      function ln() {
        const t = {};
        return {
          get: function (e) {
            if (void 0 !== t[e.id]) return t[e.id];
            let n;
            switch (e.type) {
              case "DirectionalLight":
                n = { direction: new a.P(), color: new r.Q() };
                break;
              case "SpotLight":
                n = {
                  position: new a.P(),
                  direction: new a.P(),
                  color: new r.Q(),
                  distance: 0,
                  coneCos: 0,
                  penumbraCos: 0,
                  decay: 0,
                };
                break;
              case "PointLight":
                n = {
                  position: new a.P(),
                  color: new r.Q(),
                  distance: 0,
                  decay: 0,
                };
                break;
              case "HemisphereLight":
                n = {
                  direction: new a.P(),
                  skyColor: new r.Q(),
                  groundColor: new r.Q(),
                };
                break;
              case "RectAreaLight":
                n = {
                  color: new r.Q(),
                  position: new a.P(),
                  halfWidth: new a.P(),
                  halfHeight: new a.P(),
                };
            }
            return (t[e.id] = n), n;
          },
        };
      }
      let cn = 0;
      function un(t, e) {
        return (
          (e.castShadow ? 2 : 0) -
          (t.castShadow ? 2 : 0) +
          (e.map ? 1 : 0) -
          (t.map ? 1 : 0)
        );
      }
      function hn(t) {
        const e = new ln(),
          n = (function () {
            const t = {};
            return {
              get: function (e) {
                if (void 0 !== t[e.id]) return t[e.id];
                let n;
                switch (e.type) {
                  case "DirectionalLight":
                  case "SpotLight":
                    n = {
                      shadowBias: 0,
                      shadowNormalBias: 0,
                      shadowRadius: 1,
                      shadowMapSize: new C.I(),
                    };
                    break;
                  case "PointLight":
                    n = {
                      shadowBias: 0,
                      shadowNormalBias: 0,
                      shadowRadius: 1,
                      shadowMapSize: new C.I(),
                      shadowCameraNear: 1,
                      shadowCameraFar: 1e3,
                    };
                }
                return (t[e.id] = n), n;
              },
            };
          })(),
          i = {
            version: 0,
            hash: {
              directionalLength: -1,
              pointLength: -1,
              spotLength: -1,
              rectAreaLength: -1,
              hemiLength: -1,
              numDirectionalShadows: -1,
              numPointShadows: -1,
              numSpotShadows: -1,
              numSpotMaps: -1,
              numLightProbes: -1,
            },
            ambient: [0, 0, 0],
            probe: [],
            directional: [],
            directionalShadow: [],
            directionalShadowMap: [],
            directionalShadowMatrix: [],
            spot: [],
            spotLightMap: [],
            spotShadow: [],
            spotShadowMap: [],
            spotLightMatrix: [],
            rectArea: [],
            rectAreaLTC1: null,
            rectAreaLTC2: null,
            point: [],
            pointShadow: [],
            pointShadowMap: [],
            pointShadowMatrix: [],
            hemi: [],
            numSpotLightShadowsWithMaps: 0,
            numLightProbes: 0,
          };
        for (let t = 0; t < 9; t++) i.probe.push(new a.P());
        const r = new a.P(),
          s = new m.k(),
          o = new m.k();
        return {
          setup: function (r) {
            let a = 0,
              s = 0,
              o = 0;
            for (let t = 0; t < 9; t++) i.probe[t].set(0, 0, 0);
            let l = 0,
              c = 0,
              u = 0,
              h = 0,
              d = 0,
              p = 0,
              f = 0,
              m = 0,
              g = 0,
              _ = 0,
              v = 0;
            r.sort(un);
            for (let t = 0, x = r.length; t < x; t++) {
              const x = r[t],
                y = x.color,
                M = x.intensity,
                S = x.distance,
                E = x.shadow && x.shadow.map ? x.shadow.map.texture : null;
              if (x.isAmbientLight)
                (a += y.r * M), (s += y.g * M), (o += y.b * M);
              else if (x.isLightProbe) {
                for (let t = 0; t < 9; t++)
                  i.probe[t].addScaledVector(x.sh.coefficients[t], M);
                v++;
              } else if (x.isDirectionalLight) {
                const t = e.get(x);
                if (
                  (t.color.copy(x.color).multiplyScalar(x.intensity),
                  x.castShadow)
                ) {
                  const t = x.shadow,
                    e = n.get(x);
                  (e.shadowBias = t.bias),
                    (e.shadowNormalBias = t.normalBias),
                    (e.shadowRadius = t.radius),
                    (e.shadowMapSize = t.mapSize),
                    (i.directionalShadow[l] = e),
                    (i.directionalShadowMap[l] = E),
                    (i.directionalShadowMatrix[l] = x.shadow.matrix),
                    p++;
                }
                (i.directional[l] = t), l++;
              } else if (x.isSpotLight) {
                const t = e.get(x);
                t.position.setFromMatrixPosition(x.matrixWorld),
                  t.color.copy(y).multiplyScalar(M),
                  (t.distance = S),
                  (t.coneCos = Math.cos(x.angle)),
                  (t.penumbraCos = Math.cos(x.angle * (1 - x.penumbra))),
                  (t.decay = x.decay),
                  (i.spot[u] = t);
                const r = x.shadow;
                if (
                  (x.map &&
                    ((i.spotLightMap[g] = x.map),
                    g++,
                    r.updateMatrices(x),
                    x.castShadow && _++),
                  (i.spotLightMatrix[u] = r.matrix),
                  x.castShadow)
                ) {
                  const t = n.get(x);
                  (t.shadowBias = r.bias),
                    (t.shadowNormalBias = r.normalBias),
                    (t.shadowRadius = r.radius),
                    (t.shadowMapSize = r.mapSize),
                    (i.spotShadow[u] = t),
                    (i.spotShadowMap[u] = E),
                    m++;
                }
                u++;
              } else if (x.isRectAreaLight) {
                const t = e.get(x);
                t.color.copy(y).multiplyScalar(M),
                  t.halfWidth.set(0.5 * x.width, 0, 0),
                  t.halfHeight.set(0, 0.5 * x.height, 0),
                  (i.rectArea[h] = t),
                  h++;
              } else if (x.isPointLight) {
                const t = e.get(x);
                if (
                  (t.color.copy(x.color).multiplyScalar(x.intensity),
                  (t.distance = x.distance),
                  (t.decay = x.decay),
                  x.castShadow)
                ) {
                  const t = x.shadow,
                    e = n.get(x);
                  (e.shadowBias = t.bias),
                    (e.shadowNormalBias = t.normalBias),
                    (e.shadowRadius = t.radius),
                    (e.shadowMapSize = t.mapSize),
                    (e.shadowCameraNear = t.camera.near),
                    (e.shadowCameraFar = t.camera.far),
                    (i.pointShadow[c] = e),
                    (i.pointShadowMap[c] = E),
                    (i.pointShadowMatrix[c] = x.shadow.matrix),
                    f++;
                }
                (i.point[c] = t), c++;
              } else if (x.isHemisphereLight) {
                const t = e.get(x);
                t.skyColor.copy(x.color).multiplyScalar(M),
                  t.groundColor.copy(x.groundColor).multiplyScalar(M),
                  (i.hemi[d] = t),
                  d++;
              }
            }
            h > 0 &&
              (!0 === t.has("OES_texture_float_linear")
                ? ((i.rectAreaLTC1 = P.LTC_FLOAT_1),
                  (i.rectAreaLTC2 = P.LTC_FLOAT_2))
                : ((i.rectAreaLTC1 = P.LTC_HALF_1),
                  (i.rectAreaLTC2 = P.LTC_HALF_2))),
              (i.ambient[0] = a),
              (i.ambient[1] = s),
              (i.ambient[2] = o);
            const x = i.hash;
            (x.directionalLength === l &&
              x.pointLength === c &&
              x.spotLength === u &&
              x.rectAreaLength === h &&
              x.hemiLength === d &&
              x.numDirectionalShadows === p &&
              x.numPointShadows === f &&
              x.numSpotShadows === m &&
              x.numSpotMaps === g &&
              x.numLightProbes === v) ||
              ((i.directional.length = l),
              (i.spot.length = u),
              (i.rectArea.length = h),
              (i.point.length = c),
              (i.hemi.length = d),
              (i.directionalShadow.length = p),
              (i.directionalShadowMap.length = p),
              (i.pointShadow.length = f),
              (i.pointShadowMap.length = f),
              (i.spotShadow.length = m),
              (i.spotShadowMap.length = m),
              (i.directionalShadowMatrix.length = p),
              (i.pointShadowMatrix.length = f),
              (i.spotLightMatrix.length = m + g - _),
              (i.spotLightMap.length = g),
              (i.numSpotLightShadowsWithMaps = _),
              (i.numLightProbes = v),
              (x.directionalLength = l),
              (x.pointLength = c),
              (x.spotLength = u),
              (x.rectAreaLength = h),
              (x.hemiLength = d),
              (x.numDirectionalShadows = p),
              (x.numPointShadows = f),
              (x.numSpotShadows = m),
              (x.numSpotMaps = g),
              (x.numLightProbes = v),
              (i.version = cn++));
          },
          setupView: function (t, e) {
            let n = 0,
              a = 0,
              l = 0,
              c = 0,
              u = 0;
            const h = e.matrixWorldInverse;
            for (let e = 0, d = t.length; e < d; e++) {
              const d = t[e];
              if (d.isDirectionalLight) {
                const t = i.directional[n];
                t.direction.setFromMatrixPosition(d.matrixWorld),
                  r.setFromMatrixPosition(d.target.matrixWorld),
                  t.direction.sub(r),
                  t.direction.transformDirection(h),
                  n++;
              } else if (d.isSpotLight) {
                const t = i.spot[l];
                t.position.setFromMatrixPosition(d.matrixWorld),
                  t.position.applyMatrix4(h),
                  t.direction.setFromMatrixPosition(d.matrixWorld),
                  r.setFromMatrixPosition(d.target.matrixWorld),
                  t.direction.sub(r),
                  t.direction.transformDirection(h),
                  l++;
              } else if (d.isRectAreaLight) {
                const t = i.rectArea[c];
                t.position.setFromMatrixPosition(d.matrixWorld),
                  t.position.applyMatrix4(h),
                  o.identity(),
                  s.copy(d.matrixWorld),
                  s.premultiply(h),
                  o.extractRotation(s),
                  t.halfWidth.set(0.5 * d.width, 0, 0),
                  t.halfHeight.set(0, 0.5 * d.height, 0),
                  t.halfWidth.applyMatrix4(o),
                  t.halfHeight.applyMatrix4(o),
                  c++;
              } else if (d.isPointLight) {
                const t = i.point[a];
                t.position.setFromMatrixPosition(d.matrixWorld),
                  t.position.applyMatrix4(h),
                  a++;
              } else if (d.isHemisphereLight) {
                const t = i.hemi[u];
                t.direction.setFromMatrixPosition(d.matrixWorld),
                  t.direction.transformDirection(h),
                  u++;
              }
            }
          },
          state: i,
        };
      }
      function dn(t) {
        const e = new hn(t),
          n = [],
          i = [],
          r = {
            lightsArray: n,
            shadowsArray: i,
            camera: null,
            lights: e,
            transmissionRenderTarget: {},
          };
        return {
          init: function (t) {
            (r.camera = t), (n.length = 0), (i.length = 0);
          },
          state: r,
          setupLights: function () {
            e.setup(n);
          },
          setupLightsView: function (t) {
            e.setupView(n, t);
          },
          pushLight: function (t) {
            n.push(t);
          },
          pushShadow: function (t) {
            i.push(t);
          },
        };
      }
      function pn(t) {
        let e = new WeakMap();
        return {
          get: function (n, i = 0) {
            const r = e.get(n);
            let a;
            return (
              void 0 === r
                ? ((a = new dn(t)), e.set(n, [a]))
                : i >= r.length
                ? ((a = new dn(t)), r.push(a))
                : (a = r[i]),
              a
            );
          },
          dispose: function () {
            e = new WeakMap();
          },
        };
      }
      var fn = n(371);
      class mn extends fn.i {
        constructor(t) {
          super(),
            (this.isMeshDepthMaterial = !0),
            (this.type = "MeshDepthMaterial"),
            (this.depthPacking = i.Rkk),
            (this.map = null),
            (this.alphaMap = null),
            (this.displacementMap = null),
            (this.displacementScale = 1),
            (this.displacementBias = 0),
            (this.wireframe = !1),
            (this.wireframeLinewidth = 1),
            this.setValues(t);
        }
        copy(t) {
          return (
            super.copy(t),
            (this.depthPacking = t.depthPacking),
            (this.map = t.map),
            (this.alphaMap = t.alphaMap),
            (this.displacementMap = t.displacementMap),
            (this.displacementScale = t.displacementScale),
            (this.displacementBias = t.displacementBias),
            (this.wireframe = t.wireframe),
            (this.wireframeLinewidth = t.wireframeLinewidth),
            this
          );
        }
      }
      class gn extends fn.i {
        constructor(t) {
          super(),
            (this.isMeshDistanceMaterial = !0),
            (this.type = "MeshDistanceMaterial"),
            (this.map = null),
            (this.alphaMap = null),
            (this.displacementMap = null),
            (this.displacementScale = 1),
            (this.displacementBias = 0),
            this.setValues(t);
        }
        copy(t) {
          return (
            super.copy(t),
            (this.map = t.map),
            (this.alphaMap = t.alphaMap),
            (this.displacementMap = t.displacementMap),
            (this.displacementScale = t.displacementScale),
            (this.displacementBias = t.displacementBias),
            this
          );
        }
      }
      function _n(t, e, n) {
        let r = new f();
        const a = new C.I(),
          s = new C.I(),
          o = new g.I(),
          l = new mn({ depthPacking: i.N5j }),
          c = new gn(),
          u = {},
          h = n.maxTextureSize,
          d = { [i.hB5]: i.hsX, [i.hsX]: i.hB5, [i.$EB]: i.$EB },
          p = new E.B({
            defines: { VSM_SAMPLES: 8 },
            uniforms: {
              shadow_pass: { value: null },
              resolution: { value: new C.I() },
              radius: { value: 4 },
            },
            vertexShader:
              "\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}\n",
            fragmentShader:
              "\nuniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n\n#include <packing>\n\nvoid main() {\n\n\tconst float samples = float( VSM_SAMPLES );\n\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\n\t\t#ifdef HORIZONTAL_PASS\n\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\n\t\t#else\n\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\n\t\t#endif\n\n\t}\n\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n\n}\n",
          }),
          m = p.clone();
        m.defines.HORIZONTAL_PASS = 1;
        const _ = new x.L();
        _.setAttribute(
          "position",
          new y.TH(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3)
        );
        const v = new w.e(_, p),
          M = this;
        (this.enabled = !1),
          (this.autoUpdate = !0),
          (this.needsUpdate = !1),
          (this.type = i.QP0);
        let S = this.type;
        function b(n, i) {
          const r = e.update(v);
          p.defines.VSM_SAMPLES !== n.blurSamples &&
            ((p.defines.VSM_SAMPLES = n.blurSamples),
            (m.defines.VSM_SAMPLES = n.blurSamples),
            (p.needsUpdate = !0),
            (m.needsUpdate = !0)),
            null === n.mapPass && (n.mapPass = new k.n(a.x, a.y)),
            (p.uniforms.shadow_pass.value = n.map.texture),
            (p.uniforms.resolution.value = n.mapSize),
            (p.uniforms.radius.value = n.radius),
            t.setRenderTarget(n.mapPass),
            t.clear(),
            t.renderBufferDirect(i, null, r, p, v, null),
            (m.uniforms.shadow_pass.value = n.mapPass.texture),
            (m.uniforms.resolution.value = n.mapSize),
            (m.uniforms.radius.value = n.radius),
            t.setRenderTarget(n.map),
            t.clear(),
            t.renderBufferDirect(i, null, r, m, v, null);
        }
        function T(e, n, r, a) {
          let s = null;
          const o =
            !0 === r.isPointLight
              ? e.customDistanceMaterial
              : e.customDepthMaterial;
          if (void 0 !== o) s = o;
          else if (
            ((s = !0 === r.isPointLight ? c : l),
            (t.localClippingEnabled &&
              !0 === n.clipShadows &&
              Array.isArray(n.clippingPlanes) &&
              0 !== n.clippingPlanes.length) ||
              (n.displacementMap && 0 !== n.displacementScale) ||
              (n.alphaMap && n.alphaTest > 0) ||
              (n.map && n.alphaTest > 0))
          ) {
            const t = s.uuid,
              e = n.uuid;
            let i = u[t];
            void 0 === i && ((i = {}), (u[t] = i));
            let r = i[e];
            void 0 === r &&
              ((r = s.clone()), (i[e] = r), n.addEventListener("dispose", R)),
              (s = r);
          }
          return (
            (s.visible = n.visible),
            (s.wireframe = n.wireframe),
            a === i.RyA
              ? (s.side = null !== n.shadowSide ? n.shadowSide : n.side)
              : (s.side = null !== n.shadowSide ? n.shadowSide : d[n.side]),
            (s.alphaMap = n.alphaMap),
            (s.alphaTest = n.alphaTest),
            (s.map = n.map),
            (s.clipShadows = n.clipShadows),
            (s.clippingPlanes = n.clippingPlanes),
            (s.clipIntersection = n.clipIntersection),
            (s.displacementMap = n.displacementMap),
            (s.displacementScale = n.displacementScale),
            (s.displacementBias = n.displacementBias),
            (s.wireframeLinewidth = n.wireframeLinewidth),
            (s.linewidth = n.linewidth),
            !0 === r.isPointLight &&
              !0 === s.isMeshDistanceMaterial &&
              (t.properties.get(s).light = r),
            s
          );
        }
        function A(n, a, s, o, l) {
          if (!1 === n.visible) return;
          if (
            n.layers.test(a.layers) &&
            (n.isMesh || n.isLine || n.isPoints) &&
            (n.castShadow || (n.receiveShadow && l === i.RyA)) &&
            (!n.frustumCulled || r.intersectsObject(n))
          ) {
            n.modelViewMatrix.multiplyMatrices(
              s.matrixWorldInverse,
              n.matrixWorld
            );
            const i = e.update(n),
              r = n.material;
            if (Array.isArray(r)) {
              const e = i.groups;
              for (let c = 0, u = e.length; c < u; c++) {
                const u = e[c],
                  h = r[u.materialIndex];
                if (h && h.visible) {
                  const e = T(n, h, o, l);
                  n.onBeforeShadow(t, n, a, s, i, e, u),
                    t.renderBufferDirect(s, null, i, e, n, u),
                    n.onAfterShadow(t, n, a, s, i, e, u);
                }
              }
            } else if (r.visible) {
              const e = T(n, r, o, l);
              n.onBeforeShadow(t, n, a, s, i, e, null),
                t.renderBufferDirect(s, null, i, e, n, null),
                n.onAfterShadow(t, n, a, s, i, e, null);
            }
          }
          const c = n.children;
          for (let t = 0, e = c.length; t < e; t++) A(c[t], a, s, o, l);
        }
        function R(t) {
          t.target.removeEventListener("dispose", R);
          for (const e in u) {
            const n = u[e],
              i = t.target.uuid;
            i in n && (n[i].dispose(), delete n[i]);
          }
        }
        this.render = function (e, n, l) {
          if (!1 === M.enabled) return;
          if (!1 === M.autoUpdate && !1 === M.needsUpdate) return;
          if (0 === e.length) return;
          const c = t.getRenderTarget(),
            u = t.getActiveCubeFace(),
            d = t.getActiveMipmapLevel(),
            p = t.state;
          p.setBlending(i.XIg),
            p.buffers.color.setClear(1, 1, 1, 1),
            p.buffers.depth.setTest(!0),
            p.setScissorTest(!1);
          const f = S !== i.RyA && this.type === i.RyA,
            m = S === i.RyA && this.type !== i.RyA;
          for (let c = 0, u = e.length; c < u; c++) {
            const u = e[c],
              d = u.shadow;
            if (void 0 === d) {
              console.warn("THREE.WebGLShadowMap:", u, "has no shadow.");
              continue;
            }
            if (!1 === d.autoUpdate && !1 === d.needsUpdate) continue;
            a.copy(d.mapSize);
            const g = d.getFrameExtents();
            if (
              (a.multiply(g),
              s.copy(d.mapSize),
              (a.x > h || a.y > h) &&
                (a.x > h &&
                  ((s.x = Math.floor(h / g.x)),
                  (a.x = s.x * g.x),
                  (d.mapSize.x = s.x)),
                a.y > h &&
                  ((s.y = Math.floor(h / g.y)),
                  (a.y = s.y * g.y),
                  (d.mapSize.y = s.y))),
              null === d.map || !0 === f || !0 === m)
            ) {
              const t =
                this.type !== i.RyA
                  ? { minFilter: i.hxR, magFilter: i.hxR }
                  : {};
              null !== d.map && d.map.dispose(),
                (d.map = new k.n(a.x, a.y, t)),
                (d.map.texture.name = u.name + ".shadowMap"),
                d.camera.updateProjectionMatrix();
            }
            t.setRenderTarget(d.map), t.clear();
            const _ = d.getViewportCount();
            for (let t = 0; t < _; t++) {
              const e = d.getViewport(t);
              o.set(s.x * e.x, s.y * e.y, s.x * e.z, s.y * e.w),
                p.viewport(o),
                d.updateMatrices(u, t),
                (r = d.getFrustum()),
                A(n, l, d.camera, u, this.type);
            }
            !0 !== d.isPointLightShadow && this.type === i.RyA && b(d, l),
              (d.needsUpdate = !1);
          }
          (S = this.type), (M.needsUpdate = !1), t.setRenderTarget(c, u, d);
        };
      }
      function vn(t) {
        const e = new (function () {
            let e = !1;
            const n = new g.I();
            let i = null;
            const r = new g.I(0, 0, 0, 0);
            return {
              setMask: function (n) {
                i === n || e || (t.colorMask(n, n, n, n), (i = n));
              },
              setLocked: function (t) {
                e = t;
              },
              setClear: function (e, i, a, s, o) {
                !0 === o && ((e *= s), (i *= s), (a *= s)),
                  n.set(e, i, a, s),
                  !1 === r.equals(n) && (t.clearColor(e, i, a, s), r.copy(n));
              },
              reset: function () {
                (e = !1), (i = null), r.set(-1, 0, 0, 0);
              },
            };
          })(),
          n = new (function () {
            let e = !1,
              n = null,
              r = null,
              a = null;
            return {
              setTest: function (e) {
                e ? G(t.DEPTH_TEST) : V(t.DEPTH_TEST);
              },
              setMask: function (i) {
                n === i || e || (t.depthMask(i), (n = i));
              },
              setFunc: function (e) {
                if (r !== e) {
                  switch (e) {
                    case i.eHc:
                      t.depthFunc(t.NEVER);
                      break;
                    case i.lGu:
                      t.depthFunc(t.ALWAYS);
                      break;
                    case i.brA:
                      t.depthFunc(t.LESS);
                      break;
                    case i.xSv:
                      t.depthFunc(t.LEQUAL);
                      break;
                    case i.U3G:
                      t.depthFunc(t.EQUAL);
                      break;
                    case i.Gwm:
                      t.depthFunc(t.GEQUAL);
                      break;
                    case i.K52:
                      t.depthFunc(t.GREATER);
                      break;
                    case i.bw0:
                      t.depthFunc(t.NOTEQUAL);
                      break;
                    default:
                      t.depthFunc(t.LEQUAL);
                  }
                  r = e;
                }
              },
              setLocked: function (t) {
                e = t;
              },
              setClear: function (e) {
                a !== e && (t.clearDepth(e), (a = e));
              },
              reset: function () {
                (e = !1), (n = null), (r = null), (a = null);
              },
            };
          })(),
          a = new (function () {
            let e = !1,
              n = null,
              i = null,
              r = null,
              a = null,
              s = null,
              o = null,
              l = null,
              c = null;
            return {
              setTest: function (n) {
                e || (n ? G(t.STENCIL_TEST) : V(t.STENCIL_TEST));
              },
              setMask: function (i) {
                n === i || e || (t.stencilMask(i), (n = i));
              },
              setFunc: function (e, n, s) {
                (i === e && r === n && a === s) ||
                  (t.stencilFunc(e, n, s), (i = e), (r = n), (a = s));
              },
              setOp: function (e, n, i) {
                (s === e && o === n && l === i) ||
                  (t.stencilOp(e, n, i), (s = e), (o = n), (l = i));
              },
              setLocked: function (t) {
                e = t;
              },
              setClear: function (e) {
                c !== e && (t.clearStencil(e), (c = e));
              },
              reset: function () {
                (e = !1),
                  (n = null),
                  (i = null),
                  (r = null),
                  (a = null),
                  (s = null),
                  (o = null),
                  (l = null),
                  (c = null);
              },
            };
          })(),
          s = new WeakMap(),
          o = new WeakMap();
        let l = {},
          c = {},
          u = new WeakMap(),
          h = [],
          d = null,
          p = !1,
          f = null,
          m = null,
          _ = null,
          v = null,
          x = null,
          y = null,
          M = null,
          S = new r.Q(0, 0, 0),
          E = 0,
          b = !1,
          T = null,
          w = null,
          A = null,
          R = null,
          C = null;
        const P = t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
        let L = !1,
          U = 0;
        const D = t.getParameter(t.VERSION);
        -1 !== D.indexOf("WebGL")
          ? ((U = parseFloat(/^WebGL (\d)/.exec(D)[1])), (L = U >= 1))
          : -1 !== D.indexOf("OpenGL ES") &&
            ((U = parseFloat(/^OpenGL ES (\d)/.exec(D)[1])), (L = U >= 2));
        let I = null,
          N = {};
        const O = t.getParameter(t.SCISSOR_BOX),
          F = t.getParameter(t.VIEWPORT),
          B = new g.I().fromArray(O),
          z = new g.I().fromArray(F);
        function k(e, n, i, r) {
          const a = new Uint8Array(4),
            s = t.createTexture();
          t.bindTexture(e, s),
            t.texParameteri(e, t.TEXTURE_MIN_FILTER, t.NEAREST),
            t.texParameteri(e, t.TEXTURE_MAG_FILTER, t.NEAREST);
          for (let s = 0; s < i; s++)
            e === t.TEXTURE_3D || e === t.TEXTURE_2D_ARRAY
              ? t.texImage3D(
                  n,
                  0,
                  t.RGBA,
                  1,
                  1,
                  r,
                  0,
                  t.RGBA,
                  t.UNSIGNED_BYTE,
                  a
                )
              : t.texImage2D(
                  n + s,
                  0,
                  t.RGBA,
                  1,
                  1,
                  0,
                  t.RGBA,
                  t.UNSIGNED_BYTE,
                  a
                );
          return s;
        }
        const H = {};
        function G(e) {
          !0 !== l[e] && (t.enable(e), (l[e] = !0));
        }
        function V(e) {
          !1 !== l[e] && (t.disable(e), (l[e] = !1));
        }
        (H[t.TEXTURE_2D] = k(t.TEXTURE_2D, t.TEXTURE_2D, 1)),
          (H[t.TEXTURE_CUBE_MAP] = k(
            t.TEXTURE_CUBE_MAP,
            t.TEXTURE_CUBE_MAP_POSITIVE_X,
            6
          )),
          (H[t.TEXTURE_2D_ARRAY] = k(
            t.TEXTURE_2D_ARRAY,
            t.TEXTURE_2D_ARRAY,
            1,
            1
          )),
          (H[t.TEXTURE_3D] = k(t.TEXTURE_3D, t.TEXTURE_3D, 1, 1)),
          e.setClear(0, 0, 0, 1),
          n.setClear(1),
          a.setClear(0),
          G(t.DEPTH_TEST),
          n.setFunc(i.xSv),
          j(!1),
          Y(i.Vb5),
          G(t.CULL_FACE),
          q(i.XIg);
        const W = {
          [i.gO9]: t.FUNC_ADD,
          [i.FXf]: t.FUNC_SUBTRACT,
          [i.nST]: t.FUNC_REVERSE_SUBTRACT,
        };
        (W[i.znC] = t.MIN), (W[i.$ei] = t.MAX);
        const X = {
          [i.ojh]: t.ZERO,
          [i.qad]: t.ONE,
          [i.f4X]: t.SRC_COLOR,
          [i.ie2]: t.SRC_ALPHA,
          [i.hgQ]: t.SRC_ALPHA_SATURATE,
          [i.wn6]: t.DST_COLOR,
          [i.hdd]: t.DST_ALPHA,
          [i.LiQ]: t.ONE_MINUS_SRC_COLOR,
          [i.OuU]: t.ONE_MINUS_SRC_ALPHA,
          [i.aEY]: t.ONE_MINUS_DST_COLOR,
          [i.Nt7]: t.ONE_MINUS_DST_ALPHA,
          [i.RrE]: t.CONSTANT_COLOR,
          [i.$Yl]: t.ONE_MINUS_CONSTANT_COLOR,
          [i.e0p]: t.CONSTANT_ALPHA,
          [i.ov9]: t.ONE_MINUS_CONSTANT_ALPHA,
        };
        function q(e, n, r, a, s, o, l, c, u, h) {
          if (e !== i.XIg) {
            if ((!1 === p && (G(t.BLEND), (p = !0)), e === i.bCz))
              (s = s || n),
                (o = o || r),
                (l = l || a),
                (n === m && s === x) ||
                  (t.blendEquationSeparate(W[n], W[s]), (m = n), (x = s)),
                (r === _ && a === v && o === y && l === M) ||
                  (t.blendFuncSeparate(X[r], X[a], X[o], X[l]),
                  (_ = r),
                  (v = a),
                  (y = o),
                  (M = l)),
                (!1 !== c.equals(S) && u === E) ||
                  (t.blendColor(c.r, c.g, c.b, u), S.copy(c), (E = u)),
                (f = e),
                (b = !1);
            else if (e !== f || h !== b) {
              if (
                ((m === i.gO9 && x === i.gO9) ||
                  (t.blendEquation(t.FUNC_ADD), (m = i.gO9), (x = i.gO9)),
                h)
              )
                switch (e) {
                  case i.NTi:
                    t.blendFuncSeparate(
                      t.ONE,
                      t.ONE_MINUS_SRC_ALPHA,
                      t.ONE,
                      t.ONE_MINUS_SRC_ALPHA
                    );
                    break;
                  case i.EZo:
                    t.blendFunc(t.ONE, t.ONE);
                    break;
                  case i.Kwu:
                    t.blendFuncSeparate(
                      t.ZERO,
                      t.ONE_MINUS_SRC_COLOR,
                      t.ZERO,
                      t.ONE
                    );
                    break;
                  case i.EdD:
                    t.blendFuncSeparate(
                      t.ZERO,
                      t.SRC_COLOR,
                      t.ZERO,
                      t.SRC_ALPHA
                    );
                    break;
                  default:
                    console.error("THREE.WebGLState: Invalid blending: ", e);
                }
              else
                switch (e) {
                  case i.NTi:
                    t.blendFuncSeparate(
                      t.SRC_ALPHA,
                      t.ONE_MINUS_SRC_ALPHA,
                      t.ONE,
                      t.ONE_MINUS_SRC_ALPHA
                    );
                    break;
                  case i.EZo:
                    t.blendFunc(t.SRC_ALPHA, t.ONE);
                    break;
                  case i.Kwu:
                    t.blendFuncSeparate(
                      t.ZERO,
                      t.ONE_MINUS_SRC_COLOR,
                      t.ZERO,
                      t.ONE
                    );
                    break;
                  case i.EdD:
                    t.blendFunc(t.ZERO, t.SRC_COLOR);
                    break;
                  default:
                    console.error("THREE.WebGLState: Invalid blending: ", e);
                }
              (_ = null),
                (v = null),
                (y = null),
                (M = null),
                S.set(0, 0, 0),
                (E = 0),
                (f = e),
                (b = h);
            }
          } else !0 === p && (V(t.BLEND), (p = !1));
        }
        function j(e) {
          T !== e && (e ? t.frontFace(t.CW) : t.frontFace(t.CCW), (T = e));
        }
        function Y(e) {
          e !== i.WNZ
            ? (G(t.CULL_FACE),
              e !== w &&
                (e === i.Vb5
                  ? t.cullFace(t.BACK)
                  : e === i.Jnc
                  ? t.cullFace(t.FRONT)
                  : t.cullFace(t.FRONT_AND_BACK)))
            : V(t.CULL_FACE),
            (w = e);
        }
        function K(e, n, i) {
          e
            ? (G(t.POLYGON_OFFSET_FILL),
              (R === n && C === i) || (t.polygonOffset(n, i), (R = n), (C = i)))
            : V(t.POLYGON_OFFSET_FILL);
        }
        return {
          buffers: { color: e, depth: n, stencil: a },
          enable: G,
          disable: V,
          bindFramebuffer: function (e, n) {
            return (
              c[e] !== n &&
              (t.bindFramebuffer(e, n),
              (c[e] = n),
              e === t.DRAW_FRAMEBUFFER && (c[t.FRAMEBUFFER] = n),
              e === t.FRAMEBUFFER && (c[t.DRAW_FRAMEBUFFER] = n),
              !0)
            );
          },
          drawBuffers: function (e, n) {
            let i = h,
              r = !1;
            if (e) {
              (i = u.get(n)), void 0 === i && ((i = []), u.set(n, i));
              const a = e.textures;
              if (i.length !== a.length || i[0] !== t.COLOR_ATTACHMENT0) {
                for (let e = 0, n = a.length; e < n; e++)
                  i[e] = t.COLOR_ATTACHMENT0 + e;
                (i.length = a.length), (r = !0);
              }
            } else i[0] !== t.BACK && ((i[0] = t.BACK), (r = !0));
            r && t.drawBuffers(i);
          },
          useProgram: function (e) {
            return d !== e && (t.useProgram(e), (d = e), !0);
          },
          setBlending: q,
          setMaterial: function (r, s) {
            r.side === i.$EB ? V(t.CULL_FACE) : G(t.CULL_FACE);
            let o = r.side === i.hsX;
            s && (o = !o),
              j(o),
              r.blending === i.NTi && !1 === r.transparent
                ? q(i.XIg)
                : q(
                    r.blending,
                    r.blendEquation,
                    r.blendSrc,
                    r.blendDst,
                    r.blendEquationAlpha,
                    r.blendSrcAlpha,
                    r.blendDstAlpha,
                    r.blendColor,
                    r.blendAlpha,
                    r.premultipliedAlpha
                  ),
              n.setFunc(r.depthFunc),
              n.setTest(r.depthTest),
              n.setMask(r.depthWrite),
              e.setMask(r.colorWrite);
            const l = r.stencilWrite;
            a.setTest(l),
              l &&
                (a.setMask(r.stencilWriteMask),
                a.setFunc(r.stencilFunc, r.stencilRef, r.stencilFuncMask),
                a.setOp(r.stencilFail, r.stencilZFail, r.stencilZPass)),
              K(r.polygonOffset, r.polygonOffsetFactor, r.polygonOffsetUnits),
              !0 === r.alphaToCoverage
                ? G(t.SAMPLE_ALPHA_TO_COVERAGE)
                : V(t.SAMPLE_ALPHA_TO_COVERAGE);
          },
          setFlipSided: j,
          setCullFace: Y,
          setLineWidth: function (e) {
            e !== A && (L && t.lineWidth(e), (A = e));
          },
          setPolygonOffset: K,
          setScissorTest: function (e) {
            e ? G(t.SCISSOR_TEST) : V(t.SCISSOR_TEST);
          },
          activeTexture: function (e) {
            void 0 === e && (e = t.TEXTURE0 + P - 1),
              I !== e && (t.activeTexture(e), (I = e));
          },
          bindTexture: function (e, n, i) {
            void 0 === i && (i = null === I ? t.TEXTURE0 + P - 1 : I);
            let r = N[i];
            void 0 === r &&
              ((r = { type: void 0, texture: void 0 }), (N[i] = r)),
              (r.type === e && r.texture === n) ||
                (I !== i && (t.activeTexture(i), (I = i)),
                t.bindTexture(e, n || H[e]),
                (r.type = e),
                (r.texture = n));
          },
          unbindTexture: function () {
            const e = N[I];
            void 0 !== e &&
              void 0 !== e.type &&
              (t.bindTexture(e.type, null),
              (e.type = void 0),
              (e.texture = void 0));
          },
          compressedTexImage2D: function () {
            try {
              t.compressedTexImage2D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          compressedTexImage3D: function () {
            try {
              t.compressedTexImage3D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texImage2D: function () {
            try {
              t.texImage2D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texImage3D: function () {
            try {
              t.texImage3D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          updateUBOMapping: function (e, n) {
            let i = o.get(n);
            void 0 === i && ((i = new WeakMap()), o.set(n, i));
            let r = i.get(e);
            void 0 === r &&
              ((r = t.getUniformBlockIndex(n, e.name)), i.set(e, r));
          },
          uniformBlockBinding: function (e, n) {
            const i = o.get(n).get(e);
            s.get(n) !== i &&
              (t.uniformBlockBinding(n, i, e.__bindingPointIndex), s.set(n, i));
          },
          texStorage2D: function () {
            try {
              t.texStorage2D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texStorage3D: function () {
            try {
              t.texStorage3D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texSubImage2D: function () {
            try {
              t.texSubImage2D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          texSubImage3D: function () {
            try {
              t.texSubImage3D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          compressedTexSubImage2D: function () {
            try {
              t.compressedTexSubImage2D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          compressedTexSubImage3D: function () {
            try {
              t.compressedTexSubImage3D.apply(t, arguments);
            } catch (t) {
              console.error("THREE.WebGLState:", t);
            }
          },
          scissor: function (e) {
            !1 === B.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), B.copy(e));
          },
          viewport: function (e) {
            !1 === z.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), z.copy(e));
          },
          reset: function () {
            t.disable(t.BLEND),
              t.disable(t.CULL_FACE),
              t.disable(t.DEPTH_TEST),
              t.disable(t.POLYGON_OFFSET_FILL),
              t.disable(t.SCISSOR_TEST),
              t.disable(t.STENCIL_TEST),
              t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),
              t.blendEquation(t.FUNC_ADD),
              t.blendFunc(t.ONE, t.ZERO),
              t.blendFuncSeparate(t.ONE, t.ZERO, t.ONE, t.ZERO),
              t.blendColor(0, 0, 0, 0),
              t.colorMask(!0, !0, !0, !0),
              t.clearColor(0, 0, 0, 0),
              t.depthMask(!0),
              t.depthFunc(t.LESS),
              t.clearDepth(1),
              t.stencilMask(4294967295),
              t.stencilFunc(t.ALWAYS, 0, 4294967295),
              t.stencilOp(t.KEEP, t.KEEP, t.KEEP),
              t.clearStencil(0),
              t.cullFace(t.BACK),
              t.frontFace(t.CCW),
              t.polygonOffset(0, 0),
              t.activeTexture(t.TEXTURE0),
              t.bindFramebuffer(t.FRAMEBUFFER, null),
              t.bindFramebuffer(t.DRAW_FRAMEBUFFER, null),
              t.bindFramebuffer(t.READ_FRAMEBUFFER, null),
              t.useProgram(null),
              t.lineWidth(1),
              t.scissor(0, 0, t.canvas.width, t.canvas.height),
              t.viewport(0, 0, t.canvas.width, t.canvas.height),
              (l = {}),
              (I = null),
              (N = {}),
              (c = {}),
              (u = new WeakMap()),
              (h = []),
              (d = null),
              (p = !1),
              (f = null),
              (m = null),
              (_ = null),
              (v = null),
              (x = null),
              (y = null),
              (M = null),
              (S = new r.Q(0, 0, 0)),
              (E = 0),
              (b = !1),
              (T = null),
              (w = null),
              (A = null),
              (R = null),
              (C = null),
              B.set(0, 0, t.canvas.width, t.canvas.height),
              z.set(0, 0, t.canvas.width, t.canvas.height),
              e.reset(),
              n.reset(),
              a.reset();
          },
        };
      }
      function xn(t, e, n, r, a, s, o) {
        const l = e.has("WEBGL_multisampled_render_to_texture")
            ? e.get("WEBGL_multisampled_render_to_texture")
            : null,
          c =
            "undefined" != typeof navigator &&
            /OculusBrowser/g.test(navigator.userAgent),
          u = new C.I(),
          h = new WeakMap();
        let d;
        const p = new WeakMap();
        let f = !1;
        try {
          f =
            "undefined" != typeof OffscreenCanvas &&
            null !== new OffscreenCanvas(1, 1).getContext("2d");
        } catch (t) {}
        function m(t, e) {
          return f ? new OffscreenCanvas(t, e) : (0, vt.qq)("canvas");
        }
        function g(t, e, n) {
          let i = 1;
          const r = V(t);
          if (
            ((r.width > n || r.height > n) &&
              (i = n / Math.max(r.width, r.height)),
            i < 1)
          ) {
            if (
              ("undefined" != typeof HTMLImageElement &&
                t instanceof HTMLImageElement) ||
              ("undefined" != typeof HTMLCanvasElement &&
                t instanceof HTMLCanvasElement) ||
              ("undefined" != typeof ImageBitmap && t instanceof ImageBitmap) ||
              ("undefined" != typeof VideoFrame && t instanceof VideoFrame)
            ) {
              const n = Math.floor(i * r.width),
                a = Math.floor(i * r.height);
              void 0 === d && (d = m(n, a));
              const s = e ? m(n, a) : d;
              return (
                (s.width = n),
                (s.height = a),
                s.getContext("2d").drawImage(t, 0, 0, n, a),
                console.warn(
                  "THREE.WebGLRenderer: Texture has been resized from (" +
                    r.width +
                    "x" +
                    r.height +
                    ") to (" +
                    n +
                    "x" +
                    a +
                    ")."
                ),
                s
              );
            }
            return (
              "data" in t &&
                console.warn(
                  "THREE.WebGLRenderer: Image in DataTexture is too big (" +
                    r.width +
                    "x" +
                    r.height +
                    ")."
                ),
              t
            );
          }
          return t;
        }
        function _(t) {
          return (
            t.generateMipmaps && t.minFilter !== i.hxR && t.minFilter !== i.k6q
          );
        }
        function v(e) {
          t.generateMipmap(e);
        }
        function x(n, r, a, s, o = !1) {
          if (null !== n) {
            if (void 0 !== t[n]) return t[n];
            console.warn(
              "THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" +
                n +
                "'"
            );
          }
          let l = r;
          if (
            (r === t.RED &&
              (a === t.FLOAT && (l = t.R32F),
              a === t.HALF_FLOAT && (l = t.R16F),
              a === t.UNSIGNED_BYTE && (l = t.R8)),
            r === t.RED_INTEGER &&
              (a === t.UNSIGNED_BYTE && (l = t.R8UI),
              a === t.UNSIGNED_SHORT && (l = t.R16UI),
              a === t.UNSIGNED_INT && (l = t.R32UI),
              a === t.BYTE && (l = t.R8I),
              a === t.SHORT && (l = t.R16I),
              a === t.INT && (l = t.R32I)),
            r === t.RG &&
              (a === t.FLOAT && (l = t.RG32F),
              a === t.HALF_FLOAT && (l = t.RG16F),
              a === t.UNSIGNED_BYTE && (l = t.RG8)),
            r === t.RG_INTEGER &&
              (a === t.UNSIGNED_BYTE && (l = t.RG8UI),
              a === t.UNSIGNED_SHORT && (l = t.RG16UI),
              a === t.UNSIGNED_INT && (l = t.RG32UI),
              a === t.BYTE && (l = t.RG8I),
              a === t.SHORT && (l = t.RG16I),
              a === t.INT && (l = t.RG32I)),
            r === t.RGB && a === t.UNSIGNED_INT_5_9_9_9_REV && (l = t.RGB9_E5),
            r === t.RGBA)
          ) {
            const e = o ? i.VxR : b.pp.getTransfer(s);
            a === t.FLOAT && (l = t.RGBA32F),
              a === t.HALF_FLOAT && (l = t.RGBA16F),
              a === t.UNSIGNED_BYTE &&
                (l = e === i.KLL ? t.SRGB8_ALPHA8 : t.RGBA8),
              a === t.UNSIGNED_SHORT_4_4_4_4 && (l = t.RGBA4),
              a === t.UNSIGNED_SHORT_5_5_5_1 && (l = t.RGB5_A1);
          }
          return (
            (l !== t.R16F &&
              l !== t.R32F &&
              l !== t.RG16F &&
              l !== t.RG32F &&
              l !== t.RGBA16F &&
              l !== t.RGBA32F) ||
              e.get("EXT_color_buffer_float"),
            l
          );
        }
        function y(e, n) {
          let r;
          return (
            e
              ? null === n || n === i.bkx || n === i.V3x
                ? (r = t.DEPTH24_STENCIL8)
                : n === i.RQf
                ? (r = t.DEPTH32F_STENCIL8)
                : n === i.cHt &&
                  ((r = t.DEPTH24_STENCIL8),
                  console.warn(
                    "DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment."
                  ))
              : null === n || n === i.bkx || n === i.V3x
              ? (r = t.DEPTH_COMPONENT24)
              : n === i.RQf
              ? (r = t.DEPTH_COMPONENT32F)
              : n === i.cHt && (r = t.DEPTH_COMPONENT16),
            r
          );
        }
        function M(t, e) {
          return !0 === _(t) ||
            (t.isFramebufferTexture &&
              t.minFilter !== i.hxR &&
              t.minFilter !== i.k6q)
            ? Math.log2(Math.max(e.width, e.height)) + 1
            : void 0 !== t.mipmaps && t.mipmaps.length > 0
            ? t.mipmaps.length
            : t.isCompressedTexture && Array.isArray(t.image)
            ? e.mipmaps.length
            : 1;
        }
        function S(t) {
          const e = t.target;
          e.removeEventListener("dispose", S),
            (function (t) {
              const e = r.get(t);
              if (void 0 === e.__webglInit) return;
              const n = t.source,
                i = p.get(n);
              if (i) {
                const r = i[e.__cacheKey];
                r.usedTimes--,
                  0 === r.usedTimes && T(t),
                  0 === Object.keys(i).length && p.delete(n);
              }
              r.remove(t);
            })(e),
            e.isVideoTexture && h.delete(e);
        }
        function E(e) {
          const n = e.target;
          n.removeEventListener("dispose", E),
            (function (e) {
              const n = r.get(e);
              if (
                (e.depthTexture && e.depthTexture.dispose(),
                e.isWebGLCubeRenderTarget)
              )
                for (let e = 0; e < 6; e++) {
                  if (Array.isArray(n.__webglFramebuffer[e]))
                    for (let i = 0; i < n.__webglFramebuffer[e].length; i++)
                      t.deleteFramebuffer(n.__webglFramebuffer[e][i]);
                  else t.deleteFramebuffer(n.__webglFramebuffer[e]);
                  n.__webglDepthbuffer &&
                    t.deleteRenderbuffer(n.__webglDepthbuffer[e]);
                }
              else {
                if (Array.isArray(n.__webglFramebuffer))
                  for (let e = 0; e < n.__webglFramebuffer.length; e++)
                    t.deleteFramebuffer(n.__webglFramebuffer[e]);
                else t.deleteFramebuffer(n.__webglFramebuffer);
                if (
                  (n.__webglDepthbuffer &&
                    t.deleteRenderbuffer(n.__webglDepthbuffer),
                  n.__webglMultisampledFramebuffer &&
                    t.deleteFramebuffer(n.__webglMultisampledFramebuffer),
                  n.__webglColorRenderbuffer)
                )
                  for (let e = 0; e < n.__webglColorRenderbuffer.length; e++)
                    n.__webglColorRenderbuffer[e] &&
                      t.deleteRenderbuffer(n.__webglColorRenderbuffer[e]);
                n.__webglDepthRenderbuffer &&
                  t.deleteRenderbuffer(n.__webglDepthRenderbuffer);
              }
              const i = e.textures;
              for (let e = 0, n = i.length; e < n; e++) {
                const n = r.get(i[e]);
                n.__webglTexture &&
                  (t.deleteTexture(n.__webglTexture), o.memory.textures--),
                  r.remove(i[e]);
              }
              r.remove(e);
            })(n);
        }
        function T(e) {
          const n = r.get(e);
          t.deleteTexture(n.__webglTexture);
          const i = e.source;
          delete p.get(i)[n.__cacheKey], o.memory.textures--;
        }
        let w = 0;
        function A(e, i) {
          const a = r.get(e);
          if (
            (e.isVideoTexture &&
              (function (t) {
                const e = o.render.frame;
                h.get(t) !== e && (h.set(t, e), t.update());
              })(e),
            !1 === e.isRenderTargetTexture &&
              e.version > 0 &&
              a.__version !== e.version)
          ) {
            const t = e.image;
            if (null === t)
              console.warn(
                "THREE.WebGLRenderer: Texture marked for update but no image data found."
              );
            else {
              if (!1 !== t.complete) return void I(a, e, i);
              console.warn(
                "THREE.WebGLRenderer: Texture marked for update but image is incomplete"
              );
            }
          }
          n.bindTexture(t.TEXTURE_2D, a.__webglTexture, t.TEXTURE0 + i);
        }
        const R = {
            [i.GJx]: t.REPEAT,
            [i.ghU]: t.CLAMP_TO_EDGE,
            [i.kTW]: t.MIRRORED_REPEAT,
          },
          P = {
            [i.hxR]: t.NEAREST,
            [i.pHI]: t.NEAREST_MIPMAP_NEAREST,
            [i.Cfg]: t.NEAREST_MIPMAP_LINEAR,
            [i.k6q]: t.LINEAR,
            [i.kRr]: t.LINEAR_MIPMAP_NEAREST,
            [i.$_I]: t.LINEAR_MIPMAP_LINEAR,
          },
          L = {
            [i.amv]: t.NEVER,
            [i.FFZ]: t.ALWAYS,
            [i.vim]: t.LESS,
            [i.TiK]: t.LEQUAL,
            [i.kO0]: t.EQUAL,
            [i.gWB]: t.GEQUAL,
            [i.eoi]: t.GREATER,
            [i.jzd]: t.NOTEQUAL,
          };
        function U(n, s) {
          if (
            (s.type !== i.RQf ||
              !1 !== e.has("OES_texture_float_linear") ||
              (s.magFilter !== i.k6q &&
                s.magFilter !== i.kRr &&
                s.magFilter !== i.Cfg &&
                s.magFilter !== i.$_I &&
                s.minFilter !== i.k6q &&
                s.minFilter !== i.kRr &&
                s.minFilter !== i.Cfg &&
                s.minFilter !== i.$_I) ||
              console.warn(
                "THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."
              ),
            t.texParameteri(n, t.TEXTURE_WRAP_S, R[s.wrapS]),
            t.texParameteri(n, t.TEXTURE_WRAP_T, R[s.wrapT]),
            (n !== t.TEXTURE_3D && n !== t.TEXTURE_2D_ARRAY) ||
              t.texParameteri(n, t.TEXTURE_WRAP_R, R[s.wrapR]),
            t.texParameteri(n, t.TEXTURE_MAG_FILTER, P[s.magFilter]),
            t.texParameteri(n, t.TEXTURE_MIN_FILTER, P[s.minFilter]),
            s.compareFunction &&
              (t.texParameteri(
                n,
                t.TEXTURE_COMPARE_MODE,
                t.COMPARE_REF_TO_TEXTURE
              ),
              t.texParameteri(n, t.TEXTURE_COMPARE_FUNC, L[s.compareFunction])),
            !0 === e.has("EXT_texture_filter_anisotropic"))
          ) {
            if (s.magFilter === i.hxR) return;
            if (s.minFilter !== i.Cfg && s.minFilter !== i.$_I) return;
            if (s.type === i.RQf && !1 === e.has("OES_texture_float_linear"))
              return;
            if (s.anisotropy > 1 || r.get(s).__currentAnisotropy) {
              const i = e.get("EXT_texture_filter_anisotropic");
              t.texParameterf(
                n,
                i.TEXTURE_MAX_ANISOTROPY_EXT,
                Math.min(s.anisotropy, a.getMaxAnisotropy())
              ),
                (r.get(s).__currentAnisotropy = s.anisotropy);
            }
          }
        }
        function D(e, n) {
          let i = !1;
          void 0 === e.__webglInit &&
            ((e.__webglInit = !0), n.addEventListener("dispose", S));
          const r = n.source;
          let a = p.get(r);
          void 0 === a && ((a = {}), p.set(r, a));
          const s = (function (t) {
            const e = [];
            return (
              e.push(t.wrapS),
              e.push(t.wrapT),
              e.push(t.wrapR || 0),
              e.push(t.magFilter),
              e.push(t.minFilter),
              e.push(t.anisotropy),
              e.push(t.internalFormat),
              e.push(t.format),
              e.push(t.type),
              e.push(t.generateMipmaps),
              e.push(t.premultiplyAlpha),
              e.push(t.flipY),
              e.push(t.unpackAlignment),
              e.push(t.colorSpace),
              e.join()
            );
          })(n);
          if (s !== e.__cacheKey) {
            void 0 === a[s] &&
              ((a[s] = { texture: t.createTexture(), usedTimes: 0 }),
              o.memory.textures++,
              (i = !0)),
              a[s].usedTimes++;
            const r = a[e.__cacheKey];
            void 0 !== r &&
              (a[e.__cacheKey].usedTimes--, 0 === r.usedTimes && T(n)),
              (e.__cacheKey = s),
              (e.__webglTexture = a[s].texture);
          }
          return i;
        }
        function I(e, o, l) {
          let c = t.TEXTURE_2D;
          (o.isDataArrayTexture || o.isCompressedArrayTexture) &&
            (c = t.TEXTURE_2D_ARRAY),
            o.isData3DTexture && (c = t.TEXTURE_3D);
          const u = D(e, o),
            h = o.source;
          n.bindTexture(c, e.__webglTexture, t.TEXTURE0 + l);
          const d = r.get(h);
          if (h.version !== d.__version || !0 === u) {
            n.activeTexture(t.TEXTURE0 + l);
            const e = b.pp.getPrimaries(b.pp.workingColorSpace),
              r =
                o.colorSpace === i.jf0 ? null : b.pp.getPrimaries(o.colorSpace),
              p =
                o.colorSpace === i.jf0 || e === r
                  ? t.NONE
                  : t.BROWSER_DEFAULT_WEBGL;
            t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, o.flipY),
              t.pixelStorei(
                t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                o.premultiplyAlpha
              ),
              t.pixelStorei(t.UNPACK_ALIGNMENT, o.unpackAlignment),
              t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL, p);
            let f = g(o.image, !1, a.maxTextureSize);
            f = G(o, f);
            const m = s.convert(o.format, o.colorSpace),
              S = s.convert(o.type);
            let E,
              T = x(o.internalFormat, m, S, o.colorSpace, o.isVideoTexture);
            U(c, o);
            const w = o.mipmaps,
              A = !0 !== o.isVideoTexture,
              R = void 0 === d.__version || !0 === u,
              C = h.dataReady,
              P = M(o, f);
            if (o.isDepthTexture)
              (T = y(o.format === i.dcC, o.type)),
                R &&
                  (A
                    ? n.texStorage2D(t.TEXTURE_2D, 1, T, f.width, f.height)
                    : n.texImage2D(
                        t.TEXTURE_2D,
                        0,
                        T,
                        f.width,
                        f.height,
                        0,
                        m,
                        S,
                        null
                      ));
            else if (o.isDataTexture)
              if (w.length > 0) {
                A &&
                  R &&
                  n.texStorage2D(t.TEXTURE_2D, P, T, w[0].width, w[0].height);
                for (let e = 0, i = w.length; e < i; e++)
                  (E = w[e]),
                    A
                      ? C &&
                        n.texSubImage2D(
                          t.TEXTURE_2D,
                          e,
                          0,
                          0,
                          E.width,
                          E.height,
                          m,
                          S,
                          E.data
                        )
                      : n.texImage2D(
                          t.TEXTURE_2D,
                          e,
                          T,
                          E.width,
                          E.height,
                          0,
                          m,
                          S,
                          E.data
                        );
                o.generateMipmaps = !1;
              } else
                A
                  ? (R && n.texStorage2D(t.TEXTURE_2D, P, T, f.width, f.height),
                    C &&
                      n.texSubImage2D(
                        t.TEXTURE_2D,
                        0,
                        0,
                        0,
                        f.width,
                        f.height,
                        m,
                        S,
                        f.data
                      ))
                  : n.texImage2D(
                      t.TEXTURE_2D,
                      0,
                      T,
                      f.width,
                      f.height,
                      0,
                      m,
                      S,
                      f.data
                    );
            else if (o.isCompressedTexture)
              if (o.isCompressedArrayTexture) {
                A &&
                  R &&
                  n.texStorage3D(
                    t.TEXTURE_2D_ARRAY,
                    P,
                    T,
                    w[0].width,
                    w[0].height,
                    f.depth
                  );
                for (let e = 0, r = w.length; e < r; e++)
                  if (((E = w[e]), o.format !== i.GWd))
                    if (null !== m)
                      if (A) {
                        if (C)
                          if (o.layerUpdates.size > 0) {
                            for (const i of o.layerUpdates) {
                              const r = E.width * E.height;
                              n.compressedTexSubImage3D(
                                t.TEXTURE_2D_ARRAY,
                                e,
                                0,
                                0,
                                i,
                                E.width,
                                E.height,
                                1,
                                m,
                                E.data.slice(r * i, r * (i + 1)),
                                0,
                                0
                              );
                            }
                            o.clearLayerUpdates();
                          } else
                            n.compressedTexSubImage3D(
                              t.TEXTURE_2D_ARRAY,
                              e,
                              0,
                              0,
                              0,
                              E.width,
                              E.height,
                              f.depth,
                              m,
                              E.data,
                              0,
                              0
                            );
                      } else
                        n.compressedTexImage3D(
                          t.TEXTURE_2D_ARRAY,
                          e,
                          T,
                          E.width,
                          E.height,
                          f.depth,
                          0,
                          E.data,
                          0,
                          0
                        );
                    else
                      console.warn(
                        "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"
                      );
                  else
                    A
                      ? C &&
                        n.texSubImage3D(
                          t.TEXTURE_2D_ARRAY,
                          e,
                          0,
                          0,
                          0,
                          E.width,
                          E.height,
                          f.depth,
                          m,
                          S,
                          E.data
                        )
                      : n.texImage3D(
                          t.TEXTURE_2D_ARRAY,
                          e,
                          T,
                          E.width,
                          E.height,
                          f.depth,
                          0,
                          m,
                          S,
                          E.data
                        );
              } else {
                A &&
                  R &&
                  n.texStorage2D(t.TEXTURE_2D, P, T, w[0].width, w[0].height);
                for (let e = 0, r = w.length; e < r; e++)
                  (E = w[e]),
                    o.format !== i.GWd
                      ? null !== m
                        ? A
                          ? C &&
                            n.compressedTexSubImage2D(
                              t.TEXTURE_2D,
                              e,
                              0,
                              0,
                              E.width,
                              E.height,
                              m,
                              E.data
                            )
                          : n.compressedTexImage2D(
                              t.TEXTURE_2D,
                              e,
                              T,
                              E.width,
                              E.height,
                              0,
                              E.data
                            )
                        : console.warn(
                            "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"
                          )
                      : A
                      ? C &&
                        n.texSubImage2D(
                          t.TEXTURE_2D,
                          e,
                          0,
                          0,
                          E.width,
                          E.height,
                          m,
                          S,
                          E.data
                        )
                      : n.texImage2D(
                          t.TEXTURE_2D,
                          e,
                          T,
                          E.width,
                          E.height,
                          0,
                          m,
                          S,
                          E.data
                        );
              }
            else if (o.isDataArrayTexture)
              if (A) {
                if (
                  (R &&
                    n.texStorage3D(
                      t.TEXTURE_2D_ARRAY,
                      P,
                      T,
                      f.width,
                      f.height,
                      f.depth
                    ),
                  C)
                )
                  if (o.layerUpdates.size > 0) {
                    let e;
                    switch (S) {
                      case t.UNSIGNED_BYTE:
                        switch (m) {
                          case t.ALPHA:
                          case t.LUMINANCE:
                            e = 1;
                            break;
                          case t.LUMINANCE_ALPHA:
                            e = 2;
                            break;
                          case t.RGB:
                            e = 3;
                            break;
                          case t.RGBA:
                            e = 4;
                            break;
                          default:
                            throw new Error(
                              `Unknown texel size for format ${m}.`
                            );
                        }
                        break;
                      case t.UNSIGNED_SHORT_4_4_4_4:
                      case t.UNSIGNED_SHORT_5_5_5_1:
                      case t.UNSIGNED_SHORT_5_6_5:
                        e = 1;
                        break;
                      default:
                        throw new Error(`Unknown texel size for type ${S}.`);
                    }
                    const i = f.width * f.height * e;
                    for (const e of o.layerUpdates)
                      n.texSubImage3D(
                        t.TEXTURE_2D_ARRAY,
                        0,
                        0,
                        0,
                        e,
                        f.width,
                        f.height,
                        1,
                        m,
                        S,
                        f.data.slice(i * e, i * (e + 1))
                      );
                    o.clearLayerUpdates();
                  } else
                    n.texSubImage3D(
                      t.TEXTURE_2D_ARRAY,
                      0,
                      0,
                      0,
                      0,
                      f.width,
                      f.height,
                      f.depth,
                      m,
                      S,
                      f.data
                    );
              } else
                n.texImage3D(
                  t.TEXTURE_2D_ARRAY,
                  0,
                  T,
                  f.width,
                  f.height,
                  f.depth,
                  0,
                  m,
                  S,
                  f.data
                );
            else if (o.isData3DTexture)
              A
                ? (R &&
                    n.texStorage3D(
                      t.TEXTURE_3D,
                      P,
                      T,
                      f.width,
                      f.height,
                      f.depth
                    ),
                  C &&
                    n.texSubImage3D(
                      t.TEXTURE_3D,
                      0,
                      0,
                      0,
                      0,
                      f.width,
                      f.height,
                      f.depth,
                      m,
                      S,
                      f.data
                    ))
                : n.texImage3D(
                    t.TEXTURE_3D,
                    0,
                    T,
                    f.width,
                    f.height,
                    f.depth,
                    0,
                    m,
                    S,
                    f.data
                  );
            else if (o.isFramebufferTexture) {
              if (R)
                if (A) n.texStorage2D(t.TEXTURE_2D, P, T, f.width, f.height);
                else {
                  let e = f.width,
                    i = f.height;
                  for (let r = 0; r < P; r++)
                    n.texImage2D(t.TEXTURE_2D, r, T, e, i, 0, m, S, null),
                      (e >>= 1),
                      (i >>= 1);
                }
            } else if (w.length > 0) {
              if (A && R) {
                const e = V(w[0]);
                n.texStorage2D(t.TEXTURE_2D, P, T, e.width, e.height);
              }
              for (let e = 0, i = w.length; e < i; e++)
                (E = w[e]),
                  A
                    ? C && n.texSubImage2D(t.TEXTURE_2D, e, 0, 0, m, S, E)
                    : n.texImage2D(t.TEXTURE_2D, e, T, m, S, E);
              o.generateMipmaps = !1;
            } else if (A) {
              if (R) {
                const e = V(f);
                n.texStorage2D(t.TEXTURE_2D, P, T, e.width, e.height);
              }
              C && n.texSubImage2D(t.TEXTURE_2D, 0, 0, 0, m, S, f);
            } else n.texImage2D(t.TEXTURE_2D, 0, T, m, S, f);
            _(o) && v(c),
              (d.__version = h.version),
              o.onUpdate && o.onUpdate(o);
          }
          e.__version = o.version;
        }
        function N(e, i, a, o, c, u) {
          const h = s.convert(a.format, a.colorSpace),
            d = s.convert(a.type),
            p = x(a.internalFormat, h, d, a.colorSpace);
          if (!r.get(i).__hasExternalTextures) {
            const e = Math.max(1, i.width >> u),
              r = Math.max(1, i.height >> u);
            c === t.TEXTURE_3D || c === t.TEXTURE_2D_ARRAY
              ? n.texImage3D(c, u, p, e, r, i.depth, 0, h, d, null)
              : n.texImage2D(c, u, p, e, r, 0, h, d, null);
          }
          n.bindFramebuffer(t.FRAMEBUFFER, e),
            H(i)
              ? l.framebufferTexture2DMultisampleEXT(
                  t.FRAMEBUFFER,
                  o,
                  c,
                  r.get(a).__webglTexture,
                  0,
                  k(i)
                )
              : (c === t.TEXTURE_2D ||
                  (c >= t.TEXTURE_CUBE_MAP_POSITIVE_X &&
                    c <= t.TEXTURE_CUBE_MAP_NEGATIVE_Z)) &&
                t.framebufferTexture2D(
                  t.FRAMEBUFFER,
                  o,
                  c,
                  r.get(a).__webglTexture,
                  u
                ),
            n.bindFramebuffer(t.FRAMEBUFFER, null);
        }
        function O(e, n, i) {
          if ((t.bindRenderbuffer(t.RENDERBUFFER, e), n.depthBuffer)) {
            const r = n.depthTexture,
              a = r && r.isDepthTexture ? r.type : null,
              s = y(n.stencilBuffer, a),
              o = n.stencilBuffer
                ? t.DEPTH_STENCIL_ATTACHMENT
                : t.DEPTH_ATTACHMENT,
              c = k(n);
            H(n)
              ? l.renderbufferStorageMultisampleEXT(
                  t.RENDERBUFFER,
                  c,
                  s,
                  n.width,
                  n.height
                )
              : i
              ? t.renderbufferStorageMultisample(
                  t.RENDERBUFFER,
                  c,
                  s,
                  n.width,
                  n.height
                )
              : t.renderbufferStorage(t.RENDERBUFFER, s, n.width, n.height),
              t.framebufferRenderbuffer(t.FRAMEBUFFER, o, t.RENDERBUFFER, e);
          } else {
            const e = n.textures;
            for (let r = 0; r < e.length; r++) {
              const a = e[r],
                o = s.convert(a.format, a.colorSpace),
                c = s.convert(a.type),
                u = x(a.internalFormat, o, c, a.colorSpace),
                h = k(n);
              i && !1 === H(n)
                ? t.renderbufferStorageMultisample(
                    t.RENDERBUFFER,
                    h,
                    u,
                    n.width,
                    n.height
                  )
                : H(n)
                ? l.renderbufferStorageMultisampleEXT(
                    t.RENDERBUFFER,
                    h,
                    u,
                    n.width,
                    n.height
                  )
                : t.renderbufferStorage(t.RENDERBUFFER, u, n.width, n.height);
            }
          }
          t.bindRenderbuffer(t.RENDERBUFFER, null);
        }
        function F(e) {
          const a = r.get(e),
            s = !0 === e.isWebGLCubeRenderTarget;
          if (e.depthTexture && !a.__autoAllocateDepthBuffer) {
            if (s)
              throw new Error(
                "target.depthTexture not supported in Cube render targets"
              );
            !(function (e, a) {
              if (a && a.isWebGLCubeRenderTarget)
                throw new Error(
                  "Depth Texture with cube render targets is not supported"
                );
              if (
                (n.bindFramebuffer(t.FRAMEBUFFER, e),
                !a.depthTexture || !a.depthTexture.isDepthTexture)
              )
                throw new Error(
                  "renderTarget.depthTexture must be an instance of THREE.DepthTexture"
                );
              (r.get(a.depthTexture).__webglTexture &&
                a.depthTexture.image.width === a.width &&
                a.depthTexture.image.height === a.height) ||
                ((a.depthTexture.image.width = a.width),
                (a.depthTexture.image.height = a.height),
                (a.depthTexture.needsUpdate = !0)),
                A(a.depthTexture, 0);
              const s = r.get(a.depthTexture).__webglTexture,
                o = k(a);
              if (a.depthTexture.format === i.zdS)
                H(a)
                  ? l.framebufferTexture2DMultisampleEXT(
                      t.FRAMEBUFFER,
                      t.DEPTH_ATTACHMENT,
                      t.TEXTURE_2D,
                      s,
                      0,
                      o
                    )
                  : t.framebufferTexture2D(
                      t.FRAMEBUFFER,
                      t.DEPTH_ATTACHMENT,
                      t.TEXTURE_2D,
                      s,
                      0
                    );
              else {
                if (a.depthTexture.format !== i.dcC)
                  throw new Error("Unknown depthTexture format");
                H(a)
                  ? l.framebufferTexture2DMultisampleEXT(
                      t.FRAMEBUFFER,
                      t.DEPTH_STENCIL_ATTACHMENT,
                      t.TEXTURE_2D,
                      s,
                      0,
                      o
                    )
                  : t.framebufferTexture2D(
                      t.FRAMEBUFFER,
                      t.DEPTH_STENCIL_ATTACHMENT,
                      t.TEXTURE_2D,
                      s,
                      0
                    );
              }
            })(a.__webglFramebuffer, e);
          } else if (s) {
            a.__webglDepthbuffer = [];
            for (let i = 0; i < 6; i++)
              n.bindFramebuffer(t.FRAMEBUFFER, a.__webglFramebuffer[i]),
                (a.__webglDepthbuffer[i] = t.createRenderbuffer()),
                O(a.__webglDepthbuffer[i], e, !1);
          } else
            n.bindFramebuffer(t.FRAMEBUFFER, a.__webglFramebuffer),
              (a.__webglDepthbuffer = t.createRenderbuffer()),
              O(a.__webglDepthbuffer, e, !1);
          n.bindFramebuffer(t.FRAMEBUFFER, null);
        }
        const B = [],
          z = [];
        function k(t) {
          return Math.min(a.maxSamples, t.samples);
        }
        function H(t) {
          const n = r.get(t);
          return (
            t.samples > 0 &&
            !0 === e.has("WEBGL_multisampled_render_to_texture") &&
            !1 !== n.__useRenderToTexture
          );
        }
        function G(t, e) {
          const n = t.colorSpace,
            r = t.format,
            a = t.type;
          return (
            !0 === t.isCompressedTexture ||
              !0 === t.isVideoTexture ||
              (n !== i.Zr2 &&
                n !== i.jf0 &&
                (b.pp.getTransfer(n) === i.KLL
                  ? (r === i.GWd && a === i.OUM) ||
                    console.warn(
                      "THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."
                    )
                  : console.error(
                      "THREE.WebGLTextures: Unsupported texture color space:",
                      n
                    ))),
            e
          );
        }
        function V(t) {
          return (
            "undefined" != typeof HTMLImageElement &&
            t instanceof HTMLImageElement
              ? ((u.width = t.naturalWidth || t.width),
                (u.height = t.naturalHeight || t.height))
              : "undefined" != typeof VideoFrame && t instanceof VideoFrame
              ? ((u.width = t.displayWidth), (u.height = t.displayHeight))
              : ((u.width = t.width), (u.height = t.height)),
            u
          );
        }
        (this.allocateTextureUnit = function () {
          const t = w;
          return (
            t >= a.maxTextures &&
              console.warn(
                "THREE.WebGLTextures: Trying to use " +
                  t +
                  " texture units while this GPU supports only " +
                  a.maxTextures
              ),
            (w += 1),
            t
          );
        }),
          (this.resetTextureUnits = function () {
            w = 0;
          }),
          (this.setTexture2D = A),
          (this.setTexture2DArray = function (e, i) {
            const a = r.get(e);
            e.version > 0 && a.__version !== e.version
              ? I(a, e, i)
              : n.bindTexture(
                  t.TEXTURE_2D_ARRAY,
                  a.__webglTexture,
                  t.TEXTURE0 + i
                );
          }),
          (this.setTexture3D = function (e, i) {
            const a = r.get(e);
            e.version > 0 && a.__version !== e.version
              ? I(a, e, i)
              : n.bindTexture(t.TEXTURE_3D, a.__webglTexture, t.TEXTURE0 + i);
          }),
          (this.setTextureCube = function (e, o) {
            const l = r.get(e);
            e.version > 0 && l.__version !== e.version
              ? (function (e, o, l) {
                  if (6 !== o.image.length) return;
                  const c = D(e, o),
                    u = o.source;
                  n.bindTexture(
                    t.TEXTURE_CUBE_MAP,
                    e.__webglTexture,
                    t.TEXTURE0 + l
                  );
                  const h = r.get(u);
                  if (u.version !== h.__version || !0 === c) {
                    n.activeTexture(t.TEXTURE0 + l);
                    const e = b.pp.getPrimaries(b.pp.workingColorSpace),
                      r =
                        o.colorSpace === i.jf0
                          ? null
                          : b.pp.getPrimaries(o.colorSpace),
                      d =
                        o.colorSpace === i.jf0 || e === r
                          ? t.NONE
                          : t.BROWSER_DEFAULT_WEBGL;
                    t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, o.flipY),
                      t.pixelStorei(
                        t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                        o.premultiplyAlpha
                      ),
                      t.pixelStorei(t.UNPACK_ALIGNMENT, o.unpackAlignment),
                      t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL, d);
                    const p =
                        o.isCompressedTexture || o.image[0].isCompressedTexture,
                      f = o.image[0] && o.image[0].isDataTexture,
                      m = [];
                    for (let t = 0; t < 6; t++)
                      (m[t] =
                        p || f
                          ? f
                            ? o.image[t].image
                            : o.image[t]
                          : g(o.image[t], !0, a.maxCubemapSize)),
                        (m[t] = G(o, m[t]));
                    const y = m[0],
                      S = s.convert(o.format, o.colorSpace),
                      E = s.convert(o.type),
                      T = x(o.internalFormat, S, E, o.colorSpace),
                      w = !0 !== o.isVideoTexture,
                      A = void 0 === h.__version || !0 === c,
                      R = u.dataReady;
                    let C,
                      P = M(o, y);
                    if ((U(t.TEXTURE_CUBE_MAP, o), p)) {
                      w &&
                        A &&
                        n.texStorage2D(
                          t.TEXTURE_CUBE_MAP,
                          P,
                          T,
                          y.width,
                          y.height
                        );
                      for (let e = 0; e < 6; e++) {
                        C = m[e].mipmaps;
                        for (let r = 0; r < C.length; r++) {
                          const a = C[r];
                          o.format !== i.GWd
                            ? null !== S
                              ? w
                                ? R &&
                                  n.compressedTexSubImage2D(
                                    t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                    r,
                                    0,
                                    0,
                                    a.width,
                                    a.height,
                                    S,
                                    a.data
                                  )
                                : n.compressedTexImage2D(
                                    t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                    r,
                                    T,
                                    a.width,
                                    a.height,
                                    0,
                                    a.data
                                  )
                              : console.warn(
                                  "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"
                                )
                            : w
                            ? R &&
                              n.texSubImage2D(
                                t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                r,
                                0,
                                0,
                                a.width,
                                a.height,
                                S,
                                E,
                                a.data
                              )
                            : n.texImage2D(
                                t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                r,
                                T,
                                a.width,
                                a.height,
                                0,
                                S,
                                E,
                                a.data
                              );
                        }
                      }
                    } else {
                      if (((C = o.mipmaps), w && A)) {
                        C.length > 0 && P++;
                        const e = V(m[0]);
                        n.texStorage2D(
                          t.TEXTURE_CUBE_MAP,
                          P,
                          T,
                          e.width,
                          e.height
                        );
                      }
                      for (let e = 0; e < 6; e++)
                        if (f) {
                          w
                            ? R &&
                              n.texSubImage2D(
                                t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                0,
                                0,
                                0,
                                m[e].width,
                                m[e].height,
                                S,
                                E,
                                m[e].data
                              )
                            : n.texImage2D(
                                t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                0,
                                T,
                                m[e].width,
                                m[e].height,
                                0,
                                S,
                                E,
                                m[e].data
                              );
                          for (let i = 0; i < C.length; i++) {
                            const r = C[i].image[e].image;
                            w
                              ? R &&
                                n.texSubImage2D(
                                  t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                  i + 1,
                                  0,
                                  0,
                                  r.width,
                                  r.height,
                                  S,
                                  E,
                                  r.data
                                )
                              : n.texImage2D(
                                  t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                  i + 1,
                                  T,
                                  r.width,
                                  r.height,
                                  0,
                                  S,
                                  E,
                                  r.data
                                );
                          }
                        } else {
                          w
                            ? R &&
                              n.texSubImage2D(
                                t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                0,
                                0,
                                0,
                                S,
                                E,
                                m[e]
                              )
                            : n.texImage2D(
                                t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                0,
                                T,
                                S,
                                E,
                                m[e]
                              );
                          for (let i = 0; i < C.length; i++) {
                            const r = C[i];
                            w
                              ? R &&
                                n.texSubImage2D(
                                  t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                  i + 1,
                                  0,
                                  0,
                                  S,
                                  E,
                                  r.image[e]
                                )
                              : n.texImage2D(
                                  t.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                                  i + 1,
                                  T,
                                  S,
                                  E,
                                  r.image[e]
                                );
                          }
                        }
                    }
                    _(o) && v(t.TEXTURE_CUBE_MAP),
                      (h.__version = u.version),
                      o.onUpdate && o.onUpdate(o);
                  }
                  e.__version = o.version;
                })(l, e, o)
              : n.bindTexture(
                  t.TEXTURE_CUBE_MAP,
                  l.__webglTexture,
                  t.TEXTURE0 + o
                );
          }),
          (this.rebindTextures = function (e, n, i) {
            const a = r.get(e);
            void 0 !== n &&
              N(
                a.__webglFramebuffer,
                e,
                e.texture,
                t.COLOR_ATTACHMENT0,
                t.TEXTURE_2D,
                0
              ),
              void 0 !== i && F(e);
          }),
          (this.setupRenderTarget = function (e) {
            const i = e.texture,
              a = r.get(e),
              l = r.get(i);
            e.addEventListener("dispose", E);
            const c = e.textures,
              u = !0 === e.isWebGLCubeRenderTarget,
              h = c.length > 1;
            if (
              (h ||
                (void 0 === l.__webglTexture &&
                  (l.__webglTexture = t.createTexture()),
                (l.__version = i.version),
                o.memory.textures++),
              u)
            ) {
              a.__webglFramebuffer = [];
              for (let e = 0; e < 6; e++)
                if (i.mipmaps && i.mipmaps.length > 0) {
                  a.__webglFramebuffer[e] = [];
                  for (let n = 0; n < i.mipmaps.length; n++)
                    a.__webglFramebuffer[e][n] = t.createFramebuffer();
                } else a.__webglFramebuffer[e] = t.createFramebuffer();
            } else {
              if (i.mipmaps && i.mipmaps.length > 0) {
                a.__webglFramebuffer = [];
                for (let e = 0; e < i.mipmaps.length; e++)
                  a.__webglFramebuffer[e] = t.createFramebuffer();
              } else a.__webglFramebuffer = t.createFramebuffer();
              if (h)
                for (let e = 0, n = c.length; e < n; e++) {
                  const n = r.get(c[e]);
                  void 0 === n.__webglTexture &&
                    ((n.__webglTexture = t.createTexture()),
                    o.memory.textures++);
                }
              if (e.samples > 0 && !1 === H(e)) {
                (a.__webglMultisampledFramebuffer = t.createFramebuffer()),
                  (a.__webglColorRenderbuffer = []),
                  n.bindFramebuffer(
                    t.FRAMEBUFFER,
                    a.__webglMultisampledFramebuffer
                  );
                for (let n = 0; n < c.length; n++) {
                  const i = c[n];
                  (a.__webglColorRenderbuffer[n] = t.createRenderbuffer()),
                    t.bindRenderbuffer(
                      t.RENDERBUFFER,
                      a.__webglColorRenderbuffer[n]
                    );
                  const r = s.convert(i.format, i.colorSpace),
                    o = s.convert(i.type),
                    l = x(
                      i.internalFormat,
                      r,
                      o,
                      i.colorSpace,
                      !0 === e.isXRRenderTarget
                    ),
                    u = k(e);
                  t.renderbufferStorageMultisample(
                    t.RENDERBUFFER,
                    u,
                    l,
                    e.width,
                    e.height
                  ),
                    t.framebufferRenderbuffer(
                      t.FRAMEBUFFER,
                      t.COLOR_ATTACHMENT0 + n,
                      t.RENDERBUFFER,
                      a.__webglColorRenderbuffer[n]
                    );
                }
                t.bindRenderbuffer(t.RENDERBUFFER, null),
                  e.depthBuffer &&
                    ((a.__webglDepthRenderbuffer = t.createRenderbuffer()),
                    O(a.__webglDepthRenderbuffer, e, !0)),
                  n.bindFramebuffer(t.FRAMEBUFFER, null);
              }
            }
            if (u) {
              n.bindTexture(t.TEXTURE_CUBE_MAP, l.__webglTexture),
                U(t.TEXTURE_CUBE_MAP, i);
              for (let n = 0; n < 6; n++)
                if (i.mipmaps && i.mipmaps.length > 0)
                  for (let r = 0; r < i.mipmaps.length; r++)
                    N(
                      a.__webglFramebuffer[n][r],
                      e,
                      i,
                      t.COLOR_ATTACHMENT0,
                      t.TEXTURE_CUBE_MAP_POSITIVE_X + n,
                      r
                    );
                else
                  N(
                    a.__webglFramebuffer[n],
                    e,
                    i,
                    t.COLOR_ATTACHMENT0,
                    t.TEXTURE_CUBE_MAP_POSITIVE_X + n,
                    0
                  );
              _(i) && v(t.TEXTURE_CUBE_MAP), n.unbindTexture();
            } else if (h) {
              for (let i = 0, s = c.length; i < s; i++) {
                const s = c[i],
                  o = r.get(s);
                n.bindTexture(t.TEXTURE_2D, o.__webglTexture),
                  U(t.TEXTURE_2D, s),
                  N(
                    a.__webglFramebuffer,
                    e,
                    s,
                    t.COLOR_ATTACHMENT0 + i,
                    t.TEXTURE_2D,
                    0
                  ),
                  _(s) && v(t.TEXTURE_2D);
              }
              n.unbindTexture();
            } else {
              let r = t.TEXTURE_2D;
              if (
                ((e.isWebGL3DRenderTarget || e.isWebGLArrayRenderTarget) &&
                  (r = e.isWebGL3DRenderTarget
                    ? t.TEXTURE_3D
                    : t.TEXTURE_2D_ARRAY),
                n.bindTexture(r, l.__webglTexture),
                U(r, i),
                i.mipmaps && i.mipmaps.length > 0)
              )
                for (let n = 0; n < i.mipmaps.length; n++)
                  N(a.__webglFramebuffer[n], e, i, t.COLOR_ATTACHMENT0, r, n);
              else N(a.__webglFramebuffer, e, i, t.COLOR_ATTACHMENT0, r, 0);
              _(i) && v(r), n.unbindTexture();
            }
            e.depthBuffer && F(e);
          }),
          (this.updateRenderTargetMipmap = function (e) {
            const i = e.textures;
            for (let a = 0, s = i.length; a < s; a++) {
              const s = i[a];
              if (_(s)) {
                const i = e.isWebGLCubeRenderTarget
                    ? t.TEXTURE_CUBE_MAP
                    : t.TEXTURE_2D,
                  a = r.get(s).__webglTexture;
                n.bindTexture(i, a), v(i), n.unbindTexture();
              }
            }
          }),
          (this.updateMultisampleRenderTarget = function (e) {
            if (e.samples > 0)
              if (!1 === H(e)) {
                const i = e.textures,
                  a = e.width,
                  s = e.height;
                let o = t.COLOR_BUFFER_BIT;
                const l = e.stencilBuffer
                    ? t.DEPTH_STENCIL_ATTACHMENT
                    : t.DEPTH_ATTACHMENT,
                  u = r.get(e),
                  h = i.length > 1;
                if (h)
                  for (let e = 0; e < i.length; e++)
                    n.bindFramebuffer(
                      t.FRAMEBUFFER,
                      u.__webglMultisampledFramebuffer
                    ),
                      t.framebufferRenderbuffer(
                        t.FRAMEBUFFER,
                        t.COLOR_ATTACHMENT0 + e,
                        t.RENDERBUFFER,
                        null
                      ),
                      n.bindFramebuffer(t.FRAMEBUFFER, u.__webglFramebuffer),
                      t.framebufferTexture2D(
                        t.DRAW_FRAMEBUFFER,
                        t.COLOR_ATTACHMENT0 + e,
                        t.TEXTURE_2D,
                        null,
                        0
                      );
                n.bindFramebuffer(
                  t.READ_FRAMEBUFFER,
                  u.__webglMultisampledFramebuffer
                ),
                  n.bindFramebuffer(t.DRAW_FRAMEBUFFER, u.__webglFramebuffer);
                for (let n = 0; n < i.length; n++) {
                  if (
                    (e.resolveDepthBuffer &&
                      (e.depthBuffer && (o |= t.DEPTH_BUFFER_BIT),
                      e.stencilBuffer &&
                        e.resolveStencilBuffer &&
                        (o |= t.STENCIL_BUFFER_BIT)),
                    h)
                  ) {
                    t.framebufferRenderbuffer(
                      t.READ_FRAMEBUFFER,
                      t.COLOR_ATTACHMENT0,
                      t.RENDERBUFFER,
                      u.__webglColorRenderbuffer[n]
                    );
                    const e = r.get(i[n]).__webglTexture;
                    t.framebufferTexture2D(
                      t.DRAW_FRAMEBUFFER,
                      t.COLOR_ATTACHMENT0,
                      t.TEXTURE_2D,
                      e,
                      0
                    );
                  }
                  t.blitFramebuffer(0, 0, a, s, 0, 0, a, s, o, t.NEAREST),
                    !0 === c &&
                      ((B.length = 0),
                      (z.length = 0),
                      B.push(t.COLOR_ATTACHMENT0 + n),
                      e.depthBuffer &&
                        !1 === e.resolveDepthBuffer &&
                        (B.push(l),
                        z.push(l),
                        t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER, z)),
                      t.invalidateFramebuffer(t.READ_FRAMEBUFFER, B));
                }
                if (
                  (n.bindFramebuffer(t.READ_FRAMEBUFFER, null),
                  n.bindFramebuffer(t.DRAW_FRAMEBUFFER, null),
                  h)
                )
                  for (let e = 0; e < i.length; e++) {
                    n.bindFramebuffer(
                      t.FRAMEBUFFER,
                      u.__webglMultisampledFramebuffer
                    ),
                      t.framebufferRenderbuffer(
                        t.FRAMEBUFFER,
                        t.COLOR_ATTACHMENT0 + e,
                        t.RENDERBUFFER,
                        u.__webglColorRenderbuffer[e]
                      );
                    const a = r.get(i[e]).__webglTexture;
                    n.bindFramebuffer(t.FRAMEBUFFER, u.__webglFramebuffer),
                      t.framebufferTexture2D(
                        t.DRAW_FRAMEBUFFER,
                        t.COLOR_ATTACHMENT0 + e,
                        t.TEXTURE_2D,
                        a,
                        0
                      );
                  }
                n.bindFramebuffer(
                  t.DRAW_FRAMEBUFFER,
                  u.__webglMultisampledFramebuffer
                );
              } else if (e.depthBuffer && !1 === e.resolveDepthBuffer && c) {
                const n = e.stencilBuffer
                  ? t.DEPTH_STENCIL_ATTACHMENT
                  : t.DEPTH_ATTACHMENT;
                t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER, [n]);
              }
          }),
          (this.setupDepthRenderbuffer = F),
          (this.setupFrameBufferTexture = N),
          (this.useMultisampledRTT = H);
      }
      function yn(t, e) {
        return {
          convert: function (n, r = i.jf0) {
            let a;
            const s = b.pp.getTransfer(r);
            if (n === i.OUM) return t.UNSIGNED_BYTE;
            if (n === i.Wew) return t.UNSIGNED_SHORT_4_4_4_4;
            if (n === i.gJ2) return t.UNSIGNED_SHORT_5_5_5_1;
            if (n === i.Dmk) return t.UNSIGNED_INT_5_9_9_9_REV;
            if (n === i.tJf) return t.BYTE;
            if (n === i.fBL) return t.SHORT;
            if (n === i.cHt) return t.UNSIGNED_SHORT;
            if (n === i.Yuy) return t.INT;
            if (n === i.bkx) return t.UNSIGNED_INT;
            if (n === i.RQf) return t.FLOAT;
            if (n === i.ix0) return t.HALF_FLOAT;
            if (n === i.wrO) return t.ALPHA;
            if (n === i.HIg) return t.RGB;
            if (n === i.GWd) return t.RGBA;
            if (n === i.Kzv) return t.LUMINANCE;
            if (n === i.CMB) return t.LUMINANCE_ALPHA;
            if (n === i.zdS) return t.DEPTH_COMPONENT;
            if (n === i.dcC) return t.DEPTH_STENCIL;
            if (n === i.VT0) return t.RED;
            if (n === i.ZQM) return t.RED_INTEGER;
            if (n === i.paN) return t.RG;
            if (n === i.TkQ) return t.RG_INTEGER;
            if (n === i.c90) return t.RGBA_INTEGER;
            if (n === i.IE4 || n === i.Nz6 || n === i.jR7 || n === i.BXX)
              if (s === i.KLL) {
                if (
                  ((a = e.get("WEBGL_compressed_texture_s3tc_srgb")),
                  null === a)
                )
                  return null;
                if (n === i.IE4) return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                if (n === i.Nz6) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                if (n === i.jR7) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                if (n === i.BXX) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
              } else {
                if (((a = e.get("WEBGL_compressed_texture_s3tc")), null === a))
                  return null;
                if (n === i.IE4) return a.COMPRESSED_RGB_S3TC_DXT1_EXT;
                if (n === i.Nz6) return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                if (n === i.jR7) return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                if (n === i.BXX) return a.COMPRESSED_RGBA_S3TC_DXT5_EXT;
              }
            if (n === i.k6Q || n === i.kTp || n === i.HXV || n === i.pBf) {
              if (((a = e.get("WEBGL_compressed_texture_pvrtc")), null === a))
                return null;
              if (n === i.k6Q) return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
              if (n === i.kTp) return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
              if (n === i.HXV) return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
              if (n === i.pBf) return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            }
            if (n === i.CVz || n === i.Riy || n === i.KDk) {
              if (((a = e.get("WEBGL_compressed_texture_etc")), null === a))
                return null;
              if (n === i.CVz || n === i.Riy)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ETC2
                  : a.COMPRESSED_RGB8_ETC2;
              if (n === i.KDk)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
                  : a.COMPRESSED_RGBA8_ETC2_EAC;
            }
            if (
              n === i.qa3 ||
              n === i.B_h ||
              n === i.czI ||
              n === i.rSH ||
              n === i.Qrf ||
              n === i.psI ||
              n === i.a5J ||
              n === i._QJ ||
              n === i.uB5 ||
              n === i.lyL ||
              n === i.bC7 ||
              n === i.y3Z ||
              n === i.ojs ||
              n === i.S$4
            ) {
              if (((a = e.get("WEBGL_compressed_texture_astc")), null === a))
                return null;
              if (n === i.qa3)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
                  : a.COMPRESSED_RGBA_ASTC_4x4_KHR;
              if (n === i.B_h)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
                  : a.COMPRESSED_RGBA_ASTC_5x4_KHR;
              if (n === i.czI)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
                  : a.COMPRESSED_RGBA_ASTC_5x5_KHR;
              if (n === i.rSH)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
                  : a.COMPRESSED_RGBA_ASTC_6x5_KHR;
              if (n === i.Qrf)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
                  : a.COMPRESSED_RGBA_ASTC_6x6_KHR;
              if (n === i.psI)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
                  : a.COMPRESSED_RGBA_ASTC_8x5_KHR;
              if (n === i.a5J)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
                  : a.COMPRESSED_RGBA_ASTC_8x6_KHR;
              if (n === i._QJ)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
                  : a.COMPRESSED_RGBA_ASTC_8x8_KHR;
              if (n === i.uB5)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
                  : a.COMPRESSED_RGBA_ASTC_10x5_KHR;
              if (n === i.lyL)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
                  : a.COMPRESSED_RGBA_ASTC_10x6_KHR;
              if (n === i.bC7)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
                  : a.COMPRESSED_RGBA_ASTC_10x8_KHR;
              if (n === i.y3Z)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
                  : a.COMPRESSED_RGBA_ASTC_10x10_KHR;
              if (n === i.ojs)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
                  : a.COMPRESSED_RGBA_ASTC_12x10_KHR;
              if (n === i.S$4)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
                  : a.COMPRESSED_RGBA_ASTC_12x12_KHR;
            }
            if (n === i.Fn || n === i.H23 || n === i.W9U) {
              if (((a = e.get("EXT_texture_compression_bptc")), null === a))
                return null;
              if (n === i.Fn)
                return s === i.KLL
                  ? a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT
                  : a.COMPRESSED_RGBA_BPTC_UNORM_EXT;
              if (n === i.H23) return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
              if (n === i.W9U) return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
            }
            if (n === i.Kef || n === i.XG_ || n === i.HO_ || n === i.CWW) {
              if (((a = e.get("EXT_texture_compression_rgtc")), null === a))
                return null;
              if (n === i.Fn) return a.COMPRESSED_RED_RGTC1_EXT;
              if (n === i.XG_) return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;
              if (n === i.HO_) return a.COMPRESSED_RED_GREEN_RGTC2_EXT;
              if (n === i.CWW) return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
            }
            return n === i.V3x
              ? t.UNSIGNED_INT_24_8
              : void 0 !== t[n]
              ? t[n]
              : null;
          },
        };
      }
      class Mn extends j {
        constructor(t = []) {
          super(), (this.isArrayCamera = !0), (this.cameras = t);
        }
      }
      var Sn = n(168);
      class En extends H.B {
        constructor() {
          super(), (this.isGroup = !0), (this.type = "Group");
        }
      }
      const bn = { type: "move" };
      class Tn {
        constructor() {
          (this._targetRay = null), (this._grip = null), (this._hand = null);
        }
        getHandSpace() {
          return (
            null === this._hand &&
              ((this._hand = new En()),
              (this._hand.matrixAutoUpdate = !1),
              (this._hand.visible = !1),
              (this._hand.joints = {}),
              (this._hand.inputState = { pinching: !1 })),
            this._hand
          );
        }
        getTargetRaySpace() {
          return (
            null === this._targetRay &&
              ((this._targetRay = new En()),
              (this._targetRay.matrixAutoUpdate = !1),
              (this._targetRay.visible = !1),
              (this._targetRay.hasLinearVelocity = !1),
              (this._targetRay.linearVelocity = new a.P()),
              (this._targetRay.hasAngularVelocity = !1),
              (this._targetRay.angularVelocity = new a.P())),
            this._targetRay
          );
        }
        getGripSpace() {
          return (
            null === this._grip &&
              ((this._grip = new En()),
              (this._grip.matrixAutoUpdate = !1),
              (this._grip.visible = !1),
              (this._grip.hasLinearVelocity = !1),
              (this._grip.linearVelocity = new a.P()),
              (this._grip.hasAngularVelocity = !1),
              (this._grip.angularVelocity = new a.P())),
            this._grip
          );
        }
        dispatchEvent(t) {
          return (
            null !== this._targetRay && this._targetRay.dispatchEvent(t),
            null !== this._grip && this._grip.dispatchEvent(t),
            null !== this._hand && this._hand.dispatchEvent(t),
            this
          );
        }
        connect(t) {
          if (t && t.hand) {
            const e = this._hand;
            if (e) for (const n of t.hand.values()) this._getHandJoint(e, n);
          }
          return this.dispatchEvent({ type: "connected", data: t }), this;
        }
        disconnect(t) {
          return (
            this.dispatchEvent({ type: "disconnected", data: t }),
            null !== this._targetRay && (this._targetRay.visible = !1),
            null !== this._grip && (this._grip.visible = !1),
            null !== this._hand && (this._hand.visible = !1),
            this
          );
        }
        update(t, e, n) {
          let i = null,
            r = null,
            a = null;
          const s = this._targetRay,
            o = this._grip,
            l = this._hand;
          if (t && "visible-blurred" !== e.session.visibilityState) {
            if (l && t.hand) {
              a = !0;
              for (const i of t.hand.values()) {
                const t = e.getJointPose(i, n),
                  r = this._getHandJoint(l, i);
                null !== t &&
                  (r.matrix.fromArray(t.transform.matrix),
                  r.matrix.decompose(r.position, r.rotation, r.scale),
                  (r.matrixWorldNeedsUpdate = !0),
                  (r.jointRadius = t.radius)),
                  (r.visible = null !== t);
              }
              const i = l.joints["index-finger-tip"],
                r = l.joints["thumb-tip"],
                s = i.position.distanceTo(r.position),
                o = 0.02,
                c = 0.005;
              l.inputState.pinching && s > o + c
                ? ((l.inputState.pinching = !1),
                  this.dispatchEvent({
                    type: "pinchend",
                    handedness: t.handedness,
                    target: this,
                  }))
                : !l.inputState.pinching &&
                  s <= o - c &&
                  ((l.inputState.pinching = !0),
                  this.dispatchEvent({
                    type: "pinchstart",
                    handedness: t.handedness,
                    target: this,
                  }));
            } else
              null !== o &&
                t.gripSpace &&
                ((r = e.getPose(t.gripSpace, n)),
                null !== r &&
                  (o.matrix.fromArray(r.transform.matrix),
                  o.matrix.decompose(o.position, o.rotation, o.scale),
                  (o.matrixWorldNeedsUpdate = !0),
                  r.linearVelocity
                    ? ((o.hasLinearVelocity = !0),
                      o.linearVelocity.copy(r.linearVelocity))
                    : (o.hasLinearVelocity = !1),
                  r.angularVelocity
                    ? ((o.hasAngularVelocity = !0),
                      o.angularVelocity.copy(r.angularVelocity))
                    : (o.hasAngularVelocity = !1)));
            null !== s &&
              ((i = e.getPose(t.targetRaySpace, n)),
              null === i && null !== r && (i = r),
              null !== i &&
                (s.matrix.fromArray(i.transform.matrix),
                s.matrix.decompose(s.position, s.rotation, s.scale),
                (s.matrixWorldNeedsUpdate = !0),
                i.linearVelocity
                  ? ((s.hasLinearVelocity = !0),
                    s.linearVelocity.copy(i.linearVelocity))
                  : (s.hasLinearVelocity = !1),
                i.angularVelocity
                  ? ((s.hasAngularVelocity = !0),
                    s.angularVelocity.copy(i.angularVelocity))
                  : (s.hasAngularVelocity = !1),
                this.dispatchEvent(bn)));
          }
          return (
            null !== s && (s.visible = null !== i),
            null !== o && (o.visible = null !== r),
            null !== l && (l.visible = null !== a),
            this
          );
        }
        _getHandJoint(t, e) {
          if (void 0 === t.joints[e.jointName]) {
            const n = new En();
            (n.matrixAutoUpdate = !1),
              (n.visible = !1),
              (t.joints[e.jointName] = n),
              t.add(n);
          }
          return t.joints[e.jointName];
        }
      }
      class wn {
        constructor() {
          (this.texture = null),
            (this.mesh = null),
            (this.depthNear = 0),
            (this.depthFar = 0);
        }
        init(t, e, n) {
          if (null === this.texture) {
            const i = new Z.g();
            (t.properties.get(i).__webglTexture = e.texture),
              (e.depthNear == n.depthNear && e.depthFar == n.depthFar) ||
                ((this.depthNear = e.depthNear), (this.depthFar = e.depthFar)),
              (this.texture = i);
          }
        }
        getMesh(t) {
          if (null !== this.texture && null === this.mesh) {
            const e = t.cameras[0].viewport,
              n = new E.B({
                vertexShader:
                  "\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",
                fragmentShader:
                  "\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",
                uniforms: {
                  depthColor: { value: this.texture },
                  depthWidth: { value: e.z },
                  depthHeight: { value: e.w },
                },
              });
            this.mesh = new w.e(new S.b(20, 20), n);
          }
          return this.mesh;
        }
        reset() {
          (this.texture = null), (this.mesh = null);
        }
      }
      class An extends Sn.Q {
        constructor(t, e) {
          super();
          const n = this;
          let r = null,
            s = 1,
            o = null,
            l = "local-floor",
            c = 1,
            u = null,
            h = null,
            d = null,
            p = null,
            f = null,
            m = null;
          const v = new wn(),
            x = e.getContextAttributes();
          let y = null,
            M = null;
          const S = [],
            E = [],
            b = new C.I();
          let T = null;
          const w = new j();
          w.layers.enable(1), (w.viewport = new g.I());
          const A = new j();
          A.layers.enable(2), (A.viewport = new g.I());
          const R = [w, A],
            P = new Mn();
          P.layers.enable(1), P.layers.enable(2);
          let L = null,
            U = null;
          function D(t) {
            const e = E.indexOf(t.inputSource);
            if (-1 === e) return;
            const n = S[e];
            void 0 !== n &&
              (n.update(t.inputSource, t.frame, u || o),
              n.dispatchEvent({ type: t.type, data: t.inputSource }));
          }
          function I() {
            r.removeEventListener("select", D),
              r.removeEventListener("selectstart", D),
              r.removeEventListener("selectend", D),
              r.removeEventListener("squeeze", D),
              r.removeEventListener("squeezestart", D),
              r.removeEventListener("squeezeend", D),
              r.removeEventListener("end", I),
              r.removeEventListener("inputsourceschange", N);
            for (let t = 0; t < S.length; t++) {
              const e = E[t];
              null !== e && ((E[t] = null), S[t].disconnect(e));
            }
            (L = null),
              (U = null),
              v.reset(),
              t.setRenderTarget(y),
              (f = null),
              (p = null),
              (d = null),
              (r = null),
              (M = null),
              H.stop(),
              (n.isPresenting = !1),
              t.setPixelRatio(T),
              t.setSize(b.width, b.height, !1),
              n.dispatchEvent({ type: "sessionend" });
          }
          function N(t) {
            for (let e = 0; e < t.removed.length; e++) {
              const n = t.removed[e],
                i = E.indexOf(n);
              i >= 0 && ((E[i] = null), S[i].disconnect(n));
            }
            for (let e = 0; e < t.added.length; e++) {
              const n = t.added[e];
              let i = E.indexOf(n);
              if (-1 === i) {
                for (let t = 0; t < S.length; t++) {
                  if (t >= E.length) {
                    E.push(n), (i = t);
                    break;
                  }
                  if (null === E[t]) {
                    (E[t] = n), (i = t);
                    break;
                  }
                }
                if (-1 === i) break;
              }
              const r = S[i];
              r && r.connect(n);
            }
          }
          (this.cameraAutoUpdate = !0),
            (this.enabled = !1),
            (this.isPresenting = !1),
            (this.getController = function (t) {
              let e = S[t];
              return (
                void 0 === e && ((e = new Tn()), (S[t] = e)),
                e.getTargetRaySpace()
              );
            }),
            (this.getControllerGrip = function (t) {
              let e = S[t];
              return (
                void 0 === e && ((e = new Tn()), (S[t] = e)), e.getGripSpace()
              );
            }),
            (this.getHand = function (t) {
              let e = S[t];
              return (
                void 0 === e && ((e = new Tn()), (S[t] = e)), e.getHandSpace()
              );
            }),
            (this.setFramebufferScaleFactor = function (t) {
              (s = t),
                !0 === n.isPresenting &&
                  console.warn(
                    "THREE.WebXRManager: Cannot change framebuffer scale while presenting."
                  );
            }),
            (this.setReferenceSpaceType = function (t) {
              (l = t),
                !0 === n.isPresenting &&
                  console.warn(
                    "THREE.WebXRManager: Cannot change reference space type while presenting."
                  );
            }),
            (this.getReferenceSpace = function () {
              return u || o;
            }),
            (this.setReferenceSpace = function (t) {
              u = t;
            }),
            (this.getBaseLayer = function () {
              return null !== p ? p : f;
            }),
            (this.getBinding = function () {
              return d;
            }),
            (this.getFrame = function () {
              return m;
            }),
            (this.getSession = function () {
              return r;
            }),
            (this.setSession = async function (a) {
              if (((r = a), null !== r)) {
                if (
                  ((y = t.getRenderTarget()),
                  r.addEventListener("select", D),
                  r.addEventListener("selectstart", D),
                  r.addEventListener("selectend", D),
                  r.addEventListener("squeeze", D),
                  r.addEventListener("squeezestart", D),
                  r.addEventListener("squeezeend", D),
                  r.addEventListener("end", I),
                  r.addEventListener("inputsourceschange", N),
                  !0 !== x.xrCompatible && (await e.makeXRCompatible()),
                  (T = t.getPixelRatio()),
                  t.getSize(b),
                  void 0 === r.renderState.layers)
                ) {
                  const n = {
                    antialias: x.antialias,
                    alpha: !0,
                    depth: x.depth,
                    stencil: x.stencil,
                    framebufferScaleFactor: s,
                  };
                  (f = new XRWebGLLayer(r, e, n)),
                    r.updateRenderState({ baseLayer: f }),
                    t.setPixelRatio(1),
                    t.setSize(f.framebufferWidth, f.framebufferHeight, !1),
                    (M = new k.n(f.framebufferWidth, f.framebufferHeight, {
                      format: i.GWd,
                      type: i.OUM,
                      colorSpace: t.outputColorSpace,
                      stencilBuffer: x.stencil,
                    }));
                } else {
                  let n = null,
                    a = null,
                    o = null;
                  x.depth &&
                    ((o = x.stencil ? e.DEPTH24_STENCIL8 : e.DEPTH_COMPONENT24),
                    (n = x.stencil ? i.dcC : i.zdS),
                    (a = x.stencil ? i.V3x : i.bkx));
                  const l = {
                    colorFormat: e.RGBA8,
                    depthFormat: o,
                    scaleFactor: s,
                  };
                  (d = new XRWebGLBinding(r, e)),
                    (p = d.createProjectionLayer(l)),
                    r.updateRenderState({ layers: [p] }),
                    t.setPixelRatio(1),
                    t.setSize(p.textureWidth, p.textureHeight, !1),
                    (M = new k.n(p.textureWidth, p.textureHeight, {
                      format: i.GWd,
                      type: i.OUM,
                      depthTexture: new Rt(
                        p.textureWidth,
                        p.textureHeight,
                        a,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        n
                      ),
                      stencilBuffer: x.stencil,
                      colorSpace: t.outputColorSpace,
                      samples: x.antialias ? 4 : 0,
                      resolveDepthBuffer: !1 === p.ignoreDepthValues,
                    }));
                }
                (M.isXRRenderTarget = !0),
                  this.setFoveation(c),
                  (u = null),
                  (o = await r.requestReferenceSpace(l)),
                  H.setContext(r),
                  H.start(),
                  (n.isPresenting = !0),
                  n.dispatchEvent({ type: "sessionstart" });
              }
            }),
            (this.getEnvironmentBlendMode = function () {
              if (null !== r) return r.environmentBlendMode;
            });
          const O = new a.P(),
            F = new a.P();
          function B(t, e) {
            null === e
              ? t.matrixWorld.copy(t.matrix)
              : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix),
              t.matrixWorldInverse.copy(t.matrixWorld).invert();
          }
          (this.updateCamera = function (t) {
            if (null === r) return;
            null !== v.texture &&
              ((t.near = v.depthNear), (t.far = v.depthFar)),
              (P.near = A.near = w.near = t.near),
              (P.far = A.far = w.far = t.far),
              (L === P.near && U === P.far) ||
                (r.updateRenderState({ depthNear: P.near, depthFar: P.far }),
                (L = P.near),
                (U = P.far),
                (w.near = L),
                (w.far = U),
                (A.near = L),
                (A.far = U),
                w.updateProjectionMatrix(),
                A.updateProjectionMatrix(),
                t.updateProjectionMatrix());
            const e = t.parent,
              n = P.cameras;
            B(P, e);
            for (let t = 0; t < n.length; t++) B(n[t], e);
            2 === n.length
              ? (function (t, e, n) {
                  O.setFromMatrixPosition(e.matrixWorld),
                    F.setFromMatrixPosition(n.matrixWorld);
                  const i = O.distanceTo(F),
                    r = e.projectionMatrix.elements,
                    a = n.projectionMatrix.elements,
                    s = r[14] / (r[10] - 1),
                    o = r[14] / (r[10] + 1),
                    l = (r[9] + 1) / r[5],
                    c = (r[9] - 1) / r[5],
                    u = (r[8] - 1) / r[0],
                    h = (a[8] + 1) / a[0],
                    d = s * u,
                    p = s * h,
                    f = i / (-u + h),
                    m = f * -u;
                  e.matrixWorld.decompose(t.position, t.quaternion, t.scale),
                    t.translateX(m),
                    t.translateZ(f),
                    t.matrixWorld.compose(t.position, t.quaternion, t.scale),
                    t.matrixWorldInverse.copy(t.matrixWorld).invert();
                  const g = s + f,
                    _ = o + f,
                    v = d - m,
                    x = p + (i - m),
                    y = ((l * o) / _) * g,
                    M = ((c * o) / _) * g;
                  t.projectionMatrix.makePerspective(v, x, y, M, g, _),
                    t.projectionMatrixInverse.copy(t.projectionMatrix).invert();
                })(P, w, A)
              : P.projectionMatrix.copy(w.projectionMatrix),
              (function (t, e, n) {
                null === n
                  ? t.matrix.copy(e.matrixWorld)
                  : (t.matrix.copy(n.matrixWorld),
                    t.matrix.invert(),
                    t.matrix.multiply(e.matrixWorld)),
                  t.matrix.decompose(t.position, t.quaternion, t.scale),
                  t.updateMatrixWorld(!0),
                  t.projectionMatrix.copy(e.projectionMatrix),
                  t.projectionMatrixInverse.copy(e.projectionMatrixInverse),
                  t.isPerspectiveCamera &&
                    ((t.fov =
                      2 * V.a5 * Math.atan(1 / t.projectionMatrix.elements[5])),
                    (t.zoom = 1));
              })(t, P, e);
          }),
            (this.getCamera = function () {
              return P;
            }),
            (this.getFoveation = function () {
              if (null !== p || null !== f) return c;
            }),
            (this.setFoveation = function (t) {
              (c = t),
                null !== p && (p.fixedFoveation = t),
                null !== f &&
                  void 0 !== f.fixedFoveation &&
                  (f.fixedFoveation = t);
            }),
            (this.hasDepthSensing = function () {
              return null !== v.texture;
            }),
            (this.getDepthSensingMesh = function () {
              return v.getMesh(P);
            });
          let z = null;
          const H = new _();
          H.setAnimationLoop(function (e, i) {
            if (((h = i.getViewerPose(u || o)), (m = i), null !== h)) {
              const e = h.views;
              null !== f &&
                (t.setRenderTargetFramebuffer(M, f.framebuffer),
                t.setRenderTarget(M));
              let n = !1;
              e.length !== P.cameras.length &&
                ((P.cameras.length = 0), (n = !0));
              for (let i = 0; i < e.length; i++) {
                const r = e[i];
                let a = null;
                if (null !== f) a = f.getViewport(r);
                else {
                  const e = d.getViewSubImage(p, r);
                  (a = e.viewport),
                    0 === i &&
                      (t.setRenderTargetTextures(
                        M,
                        e.colorTexture,
                        p.ignoreDepthValues ? void 0 : e.depthStencilTexture
                      ),
                      t.setRenderTarget(M));
                }
                let s = R[i];
                void 0 === s &&
                  ((s = new j()),
                  s.layers.enable(i),
                  (s.viewport = new g.I()),
                  (R[i] = s)),
                  s.matrix.fromArray(r.transform.matrix),
                  s.matrix.decompose(s.position, s.quaternion, s.scale),
                  s.projectionMatrix.fromArray(r.projectionMatrix),
                  s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),
                  s.viewport.set(a.x, a.y, a.width, a.height),
                  0 === i &&
                    (P.matrix.copy(s.matrix),
                    P.matrix.decompose(P.position, P.quaternion, P.scale)),
                  !0 === n && P.cameras.push(s);
              }
              const i = r.enabledFeatures;
              if (i && i.includes("depth-sensing")) {
                const n = d.getDepthInformation(e[0]);
                n && n.isValid && n.texture && v.init(t, n, r.renderState);
              }
            }
            for (let t = 0; t < S.length; t++) {
              const e = E[t],
                n = S[t];
              null !== e && void 0 !== n && n.update(e, i, u || o);
            }
            z && z(e, i),
              i.detectedPlanes &&
                n.dispatchEvent({ type: "planesdetected", data: i }),
              (m = null);
          }),
            (this.setAnimationLoop = function (t) {
              z = t;
            }),
            (this.dispose = function () {});
        }
      }
      const Rn = new T.O(),
        Cn = new m.k();
      function Pn(t, e) {
        function n(t, e) {
          !0 === t.matrixAutoUpdate && t.updateMatrix(), e.value.copy(t.matrix);
        }
        function r(t, r) {
          (t.opacity.value = r.opacity),
            r.color && t.diffuse.value.copy(r.color),
            r.emissive &&
              t.emissive.value
                .copy(r.emissive)
                .multiplyScalar(r.emissiveIntensity),
            r.map && ((t.map.value = r.map), n(r.map, t.mapTransform)),
            r.alphaMap &&
              ((t.alphaMap.value = r.alphaMap),
              n(r.alphaMap, t.alphaMapTransform)),
            r.bumpMap &&
              ((t.bumpMap.value = r.bumpMap),
              n(r.bumpMap, t.bumpMapTransform),
              (t.bumpScale.value = r.bumpScale),
              r.side === i.hsX && (t.bumpScale.value *= -1)),
            r.normalMap &&
              ((t.normalMap.value = r.normalMap),
              n(r.normalMap, t.normalMapTransform),
              t.normalScale.value.copy(r.normalScale),
              r.side === i.hsX && t.normalScale.value.negate()),
            r.displacementMap &&
              ((t.displacementMap.value = r.displacementMap),
              n(r.displacementMap, t.displacementMapTransform),
              (t.displacementScale.value = r.displacementScale),
              (t.displacementBias.value = r.displacementBias)),
            r.emissiveMap &&
              ((t.emissiveMap.value = r.emissiveMap),
              n(r.emissiveMap, t.emissiveMapTransform)),
            r.specularMap &&
              ((t.specularMap.value = r.specularMap),
              n(r.specularMap, t.specularMapTransform)),
            r.alphaTest > 0 && (t.alphaTest.value = r.alphaTest);
          const a = e.get(r),
            s = a.envMap,
            o = a.envMapRotation;
          s &&
            ((t.envMap.value = s),
            Rn.copy(o),
            (Rn.x *= -1),
            (Rn.y *= -1),
            (Rn.z *= -1),
            s.isCubeTexture &&
              !1 === s.isRenderTargetTexture &&
              ((Rn.y *= -1), (Rn.z *= -1)),
            t.envMapRotation.value.setFromMatrix4(Cn.makeRotationFromEuler(Rn)),
            (t.flipEnvMap.value =
              s.isCubeTexture && !1 === s.isRenderTargetTexture ? -1 : 1),
            (t.reflectivity.value = r.reflectivity),
            (t.ior.value = r.ior),
            (t.refractionRatio.value = r.refractionRatio)),
            r.lightMap &&
              ((t.lightMap.value = r.lightMap),
              (t.lightMapIntensity.value = r.lightMapIntensity),
              n(r.lightMap, t.lightMapTransform)),
            r.aoMap &&
              ((t.aoMap.value = r.aoMap),
              (t.aoMapIntensity.value = r.aoMapIntensity),
              n(r.aoMap, t.aoMapTransform));
        }
        return {
          refreshFogUniforms: function (e, n) {
            n.color.getRGB(e.fogColor.value, (0, R._U)(t)),
              n.isFog
                ? ((e.fogNear.value = n.near), (e.fogFar.value = n.far))
                : n.isFogExp2 && (e.fogDensity.value = n.density);
          },
          refreshMaterialUniforms: function (t, a, s, o, l) {
            a.isMeshBasicMaterial || a.isMeshLambertMaterial
              ? r(t, a)
              : a.isMeshToonMaterial
              ? (r(t, a),
                (function (t, e) {
                  e.gradientMap && (t.gradientMap.value = e.gradientMap);
                })(t, a))
              : a.isMeshPhongMaterial
              ? (r(t, a),
                (function (t, e) {
                  t.specular.value.copy(e.specular),
                    (t.shininess.value = Math.max(e.shininess, 1e-4));
                })(t, a))
              : a.isMeshStandardMaterial
              ? (r(t, a),
                (function (t, e) {
                  (t.metalness.value = e.metalness),
                    e.metalnessMap &&
                      ((t.metalnessMap.value = e.metalnessMap),
                      n(e.metalnessMap, t.metalnessMapTransform)),
                    (t.roughness.value = e.roughness),
                    e.roughnessMap &&
                      ((t.roughnessMap.value = e.roughnessMap),
                      n(e.roughnessMap, t.roughnessMapTransform)),
                    e.envMap && (t.envMapIntensity.value = e.envMapIntensity);
                })(t, a),
                a.isMeshPhysicalMaterial &&
                  (function (t, e, r) {
                    (t.ior.value = e.ior),
                      e.sheen > 0 &&
                        (t.sheenColor.value
                          .copy(e.sheenColor)
                          .multiplyScalar(e.sheen),
                        (t.sheenRoughness.value = e.sheenRoughness),
                        e.sheenColorMap &&
                          ((t.sheenColorMap.value = e.sheenColorMap),
                          n(e.sheenColorMap, t.sheenColorMapTransform)),
                        e.sheenRoughnessMap &&
                          ((t.sheenRoughnessMap.value = e.sheenRoughnessMap),
                          n(
                            e.sheenRoughnessMap,
                            t.sheenRoughnessMapTransform
                          ))),
                      e.clearcoat > 0 &&
                        ((t.clearcoat.value = e.clearcoat),
                        (t.clearcoatRoughness.value = e.clearcoatRoughness),
                        e.clearcoatMap &&
                          ((t.clearcoatMap.value = e.clearcoatMap),
                          n(e.clearcoatMap, t.clearcoatMapTransform)),
                        e.clearcoatRoughnessMap &&
                          ((t.clearcoatRoughnessMap.value =
                            e.clearcoatRoughnessMap),
                          n(
                            e.clearcoatRoughnessMap,
                            t.clearcoatRoughnessMapTransform
                          )),
                        e.clearcoatNormalMap &&
                          ((t.clearcoatNormalMap.value = e.clearcoatNormalMap),
                          n(
                            e.clearcoatNormalMap,
                            t.clearcoatNormalMapTransform
                          ),
                          t.clearcoatNormalScale.value.copy(
                            e.clearcoatNormalScale
                          ),
                          e.side === i.hsX &&
                            t.clearcoatNormalScale.value.negate())),
                      e.dispersion > 0 && (t.dispersion.value = e.dispersion),
                      e.iridescence > 0 &&
                        ((t.iridescence.value = e.iridescence),
                        (t.iridescenceIOR.value = e.iridescenceIOR),
                        (t.iridescenceThicknessMinimum.value =
                          e.iridescenceThicknessRange[0]),
                        (t.iridescenceThicknessMaximum.value =
                          e.iridescenceThicknessRange[1]),
                        e.iridescenceMap &&
                          ((t.iridescenceMap.value = e.iridescenceMap),
                          n(e.iridescenceMap, t.iridescenceMapTransform)),
                        e.iridescenceThicknessMap &&
                          ((t.iridescenceThicknessMap.value =
                            e.iridescenceThicknessMap),
                          n(
                            e.iridescenceThicknessMap,
                            t.iridescenceThicknessMapTransform
                          ))),
                      e.transmission > 0 &&
                        ((t.transmission.value = e.transmission),
                        (t.transmissionSamplerMap.value = r.texture),
                        t.transmissionSamplerSize.value.set(r.width, r.height),
                        e.transmissionMap &&
                          ((t.transmissionMap.value = e.transmissionMap),
                          n(e.transmissionMap, t.transmissionMapTransform)),
                        (t.thickness.value = e.thickness),
                        e.thicknessMap &&
                          ((t.thicknessMap.value = e.thicknessMap),
                          n(e.thicknessMap, t.thicknessMapTransform)),
                        (t.attenuationDistance.value = e.attenuationDistance),
                        t.attenuationColor.value.copy(e.attenuationColor)),
                      e.anisotropy > 0 &&
                        (t.anisotropyVector.value.set(
                          e.anisotropy * Math.cos(e.anisotropyRotation),
                          e.anisotropy * Math.sin(e.anisotropyRotation)
                        ),
                        e.anisotropyMap &&
                          ((t.anisotropyMap.value = e.anisotropyMap),
                          n(e.anisotropyMap, t.anisotropyMapTransform))),
                      (t.specularIntensity.value = e.specularIntensity),
                      t.specularColor.value.copy(e.specularColor),
                      e.specularColorMap &&
                        ((t.specularColorMap.value = e.specularColorMap),
                        n(e.specularColorMap, t.specularColorMapTransform)),
                      e.specularIntensityMap &&
                        ((t.specularIntensityMap.value =
                          e.specularIntensityMap),
                        n(
                          e.specularIntensityMap,
                          t.specularIntensityMapTransform
                        ));
                  })(t, a, l))
              : a.isMeshMatcapMaterial
              ? (r(t, a),
                (function (t, e) {
                  e.matcap && (t.matcap.value = e.matcap);
                })(t, a))
              : a.isMeshDepthMaterial
              ? r(t, a)
              : a.isMeshDistanceMaterial
              ? (r(t, a),
                (function (t, n) {
                  const i = e.get(n).light;
                  t.referencePosition.value.setFromMatrixPosition(
                    i.matrixWorld
                  ),
                    (t.nearDistance.value = i.shadow.camera.near),
                    (t.farDistance.value = i.shadow.camera.far);
                })(t, a))
              : a.isMeshNormalMaterial
              ? r(t, a)
              : a.isLineBasicMaterial
              ? ((function (t, e) {
                  t.diffuse.value.copy(e.color),
                    (t.opacity.value = e.opacity),
                    e.map && ((t.map.value = e.map), n(e.map, t.mapTransform));
                })(t, a),
                a.isLineDashedMaterial &&
                  (function (t, e) {
                    (t.dashSize.value = e.dashSize),
                      (t.totalSize.value = e.dashSize + e.gapSize),
                      (t.scale.value = e.scale);
                  })(t, a))
              : a.isPointsMaterial
              ? (function (t, e, i, r) {
                  t.diffuse.value.copy(e.color),
                    (t.opacity.value = e.opacity),
                    (t.size.value = e.size * i),
                    (t.scale.value = 0.5 * r),
                    e.map && ((t.map.value = e.map), n(e.map, t.uvTransform)),
                    e.alphaMap &&
                      ((t.alphaMap.value = e.alphaMap),
                      n(e.alphaMap, t.alphaMapTransform)),
                    e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
                })(t, a, s, o)
              : a.isSpriteMaterial
              ? (function (t, e) {
                  t.diffuse.value.copy(e.color),
                    (t.opacity.value = e.opacity),
                    (t.rotation.value = e.rotation),
                    e.map && ((t.map.value = e.map), n(e.map, t.mapTransform)),
                    e.alphaMap &&
                      ((t.alphaMap.value = e.alphaMap),
                      n(e.alphaMap, t.alphaMapTransform)),
                    e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
                })(t, a)
              : a.isShadowMaterial
              ? (t.color.value.copy(a.color), (t.opacity.value = a.opacity))
              : a.isShaderMaterial && (a.uniformsNeedUpdate = !1);
          },
        };
      }
      function Ln(t, e, n, i) {
        let r = {},
          a = {},
          s = [];
        const o = t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS);
        function l(t, e, n, i) {
          const r = t.value,
            a = e + "_" + n;
          if (void 0 === i[a])
            return (
              (i[a] =
                "number" == typeof r || "boolean" == typeof r ? r : r.clone()),
              !0
            );
          {
            const t = i[a];
            if ("number" == typeof r || "boolean" == typeof r) {
              if (t !== r) return (i[a] = r), !0;
            } else if (!1 === t.equals(r)) return t.copy(r), !0;
          }
          return !1;
        }
        function c(t) {
          const e = { boundary: 0, storage: 0 };
          return (
            "number" == typeof t || "boolean" == typeof t
              ? ((e.boundary = 4), (e.storage = 4))
              : t.isVector2
              ? ((e.boundary = 8), (e.storage = 8))
              : t.isVector3 || t.isColor
              ? ((e.boundary = 16), (e.storage = 12))
              : t.isVector4
              ? ((e.boundary = 16), (e.storage = 16))
              : t.isMatrix3
              ? ((e.boundary = 48), (e.storage = 48))
              : t.isMatrix4
              ? ((e.boundary = 64), (e.storage = 64))
              : t.isTexture
              ? console.warn(
                  "THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."
                )
              : console.warn(
                  "THREE.WebGLRenderer: Unsupported uniform value type.",
                  t
                ),
            e
          );
        }
        function u(e) {
          const n = e.target;
          n.removeEventListener("dispose", u);
          const i = s.indexOf(n.__bindingPointIndex);
          s.splice(i, 1),
            t.deleteBuffer(r[n.id]),
            delete r[n.id],
            delete a[n.id];
        }
        return {
          bind: function (t, e) {
            const n = e.program;
            i.uniformBlockBinding(t, n);
          },
          update: function (n, h) {
            let d = r[n.id];
            void 0 === d &&
              ((function (t) {
                const e = t.uniforms;
                let n = 0;
                for (let t = 0, i = e.length; t < i; t++) {
                  const i = Array.isArray(e[t]) ? e[t] : [e[t]];
                  for (let t = 0, e = i.length; t < e; t++) {
                    const e = i[t],
                      r = Array.isArray(e.value) ? e.value : [e.value];
                    for (let t = 0, i = r.length; t < i; t++) {
                      const i = c(r[t]),
                        a = n % 16;
                      0 !== a && 16 - a < i.boundary && (n += 16 - a),
                        (e.__data = new Float32Array(
                          i.storage / Float32Array.BYTES_PER_ELEMENT
                        )),
                        (e.__offset = n),
                        (n += i.storage);
                    }
                  }
                }
                const i = n % 16;
                i > 0 && (n += 16 - i), (t.__size = n), (t.__cache = {});
              })(n),
              (d = (function (e) {
                const n = (function () {
                  for (let t = 0; t < o; t++)
                    if (-1 === s.indexOf(t)) return s.push(t), t;
                  return (
                    console.error(
                      "THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."
                    ),
                    0
                  );
                })();
                e.__bindingPointIndex = n;
                const i = t.createBuffer(),
                  r = e.__size,
                  a = e.usage;
                return (
                  t.bindBuffer(t.UNIFORM_BUFFER, i),
                  t.bufferData(t.UNIFORM_BUFFER, r, a),
                  t.bindBuffer(t.UNIFORM_BUFFER, null),
                  t.bindBufferBase(t.UNIFORM_BUFFER, n, i),
                  i
                );
              })(n)),
              (r[n.id] = d),
              n.addEventListener("dispose", u));
            const p = h.program;
            i.updateUBOMapping(n, p);
            const f = e.render.frame;
            a[n.id] !== f &&
              ((function (e) {
                const n = r[e.id],
                  i = e.uniforms,
                  a = e.__cache;
                t.bindBuffer(t.UNIFORM_BUFFER, n);
                for (let e = 0, n = i.length; e < n; e++) {
                  const n = Array.isArray(i[e]) ? i[e] : [i[e]];
                  for (let i = 0, r = n.length; i < r; i++) {
                    const r = n[i];
                    if (!0 === l(r, e, i, a)) {
                      const e = r.__offset,
                        n = Array.isArray(r.value) ? r.value : [r.value];
                      let i = 0;
                      for (let a = 0; a < n.length; a++) {
                        const s = n[a],
                          o = c(s);
                        "number" == typeof s || "boolean" == typeof s
                          ? ((r.__data[0] = s),
                            t.bufferSubData(t.UNIFORM_BUFFER, e + i, r.__data))
                          : s.isMatrix3
                          ? ((r.__data[0] = s.elements[0]),
                            (r.__data[1] = s.elements[1]),
                            (r.__data[2] = s.elements[2]),
                            (r.__data[3] = 0),
                            (r.__data[4] = s.elements[3]),
                            (r.__data[5] = s.elements[4]),
                            (r.__data[6] = s.elements[5]),
                            (r.__data[7] = 0),
                            (r.__data[8] = s.elements[6]),
                            (r.__data[9] = s.elements[7]),
                            (r.__data[10] = s.elements[8]),
                            (r.__data[11] = 0))
                          : (s.toArray(r.__data, i),
                            (i += o.storage / Float32Array.BYTES_PER_ELEMENT));
                      }
                      t.bufferSubData(t.UNIFORM_BUFFER, e, r.__data);
                    }
                  }
                }
                t.bindBuffer(t.UNIFORM_BUFFER, null);
              })(n),
              (a[n.id] = f));
          },
          dispose: function () {
            for (const e in r) t.deleteBuffer(r[e]);
            (s = []), (r = {}), (a = {});
          },
        };
      }
      class Un {
        constructor(t = {}) {
          const {
            canvas: e = (0, vt.lP)(),
            context: n = null,
            depth: s = !0,
            stencil: o = !1,
            alpha: l = !1,
            antialias: c = !1,
            premultipliedAlpha: u = !0,
            preserveDrawingBuffer: h = !1,
            powerPreference: d = "default",
            failIfMajorPerformanceCaveat: p = !1,
          } = t;
          let x;
          if (((this.isWebGLRenderer = !0), null !== n)) {
            if (
              "undefined" != typeof WebGLRenderingContext &&
              n instanceof WebGLRenderingContext
            )
              throw new Error(
                "THREE.WebGLRenderer: WebGL 1 is not supported since r163."
              );
            x = n.getContextAttributes().alpha;
          } else x = l;
          const y = new Uint32Array(4),
            M = new Int32Array(4);
          let S = null,
            E = null;
          const T = [],
            w = [];
          (this.domElement = e),
            (this.debug = { checkShaderErrors: !0, onShaderError: null }),
            (this.autoClear = !0),
            (this.autoClearColor = !0),
            (this.autoClearDepth = !0),
            (this.autoClearStencil = !0),
            (this.sortObjects = !0),
            (this.clippingPlanes = []),
            (this.localClippingEnabled = !1),
            (this._outputColorSpace = i.er$),
            (this.toneMapping = i.y_p),
            (this.toneMappingExposure = 1);
          const A = this;
          let R = !1,
            C = 0,
            P = 0,
            L = null,
            U = -1,
            D = null;
          const I = new g.I(),
            H = new g.I();
          let G = null;
          const V = new r.Q(0);
          let W = 0,
            X = e.width,
            q = e.height,
            j = 1,
            Y = null,
            K = null;
          const Z = new g.I(0, 0, X, q),
            $ = new g.I(0, 0, X, q);
          let Q = !1;
          const tt = new f();
          let et = !1,
            nt = !1;
          const it = new m.k(),
            rt = new a.P(),
            at = {
              background: null,
              fog: null,
              environment: null,
              overrideMaterial: null,
              isScene: !0,
            };
          let st = !1;
          function ot() {
            return null === L ? j : 1;
          }
          let lt,
            ct,
            ut,
            ht,
            dt,
            pt,
            ft,
            mt,
            gt,
            Et,
            wt,
            At,
            Rt,
            Ct,
            Pt,
            Lt,
            Ut,
            Dt,
            It,
            Nt,
            Ot,
            Ft,
            Bt,
            zt,
            kt = n;
          function Ht(t, n) {
            return e.getContext(t, n);
          }
          try {
            const t = {
              alpha: !0,
              depth: s,
              stencil: o,
              antialias: c,
              premultipliedAlpha: u,
              preserveDrawingBuffer: h,
              powerPreference: d,
              failIfMajorPerformanceCaveat: p,
            };
            if (
              ("setAttribute" in e &&
                e.setAttribute("data-engine", `three.js r${i.sPf}`),
              e.addEventListener("webglcontextlost", Wt, !1),
              e.addEventListener("webglcontextrestored", Xt, !1),
              e.addEventListener("webglcontextcreationerror", qt, !1),
              null === kt)
            ) {
              const e = "webgl2";
              if (((kt = Ht(e, t)), null === kt))
                throw Ht(e)
                  ? new Error(
                      "Error creating WebGL context with your selected attributes."
                    )
                  : new Error("Error creating WebGL context.");
            }
          } catch (t) {
            throw (console.error("THREE.WebGLRenderer: " + t.message), t);
          }
          function Gt() {
            (lt = new xt(kt)),
              lt.init(),
              (Ft = new yn(kt, lt)),
              (ct = new B(kt, lt, t, Ft)),
              (ut = new vn(kt)),
              (ht = new St(kt)),
              (dt = new nn()),
              (pt = new xn(kt, lt, ut, dt, ct, Ft, ht)),
              (ft = new J(A)),
              (mt = new _t(A)),
              (gt = new v(kt)),
              (Bt = new O(kt, gt)),
              (Et = new yt(kt, gt, ht, Bt)),
              (wt = new Tt(kt, Et, gt, ht)),
              (It = new bt(kt, ct, pt)),
              (Lt = new z(dt)),
              (At = new en(A, ft, mt, lt, ct, Bt, Lt)),
              (Rt = new Pn(A, dt)),
              (Ct = new on()),
              (Pt = new pn(lt)),
              (Dt = new N(A, ft, mt, ut, wt, x, u)),
              (Ut = new _n(A, wt, ct)),
              (zt = new Ln(kt, ht, ct, ut)),
              (Nt = new F(kt, lt, ht)),
              (Ot = new Mt(kt, lt, ht)),
              (ht.programs = At.programs),
              (A.capabilities = ct),
              (A.extensions = lt),
              (A.properties = dt),
              (A.renderLists = Ct),
              (A.shadowMap = Ut),
              (A.state = ut),
              (A.info = ht);
          }
          Gt();
          const Vt = new An(A, kt);
          function Wt(t) {
            t.preventDefault(),
              console.log("THREE.WebGLRenderer: Context Lost."),
              (R = !0);
          }
          function Xt() {
            console.log("THREE.WebGLRenderer: Context Restored."), (R = !1);
            const t = ht.autoReset,
              e = Ut.enabled,
              n = Ut.autoUpdate,
              i = Ut.needsUpdate,
              r = Ut.type;
            Gt(),
              (ht.autoReset = t),
              (Ut.enabled = e),
              (Ut.autoUpdate = n),
              (Ut.needsUpdate = i),
              (Ut.type = r);
          }
          function qt(t) {
            console.error(
              "THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",
              t.statusMessage
            );
          }
          function jt(t) {
            const e = t.target;
            e.removeEventListener("dispose", jt),
              (function (t) {
                (function (t) {
                  const e = dt.get(t).programs;
                  void 0 !== e &&
                    (e.forEach(function (t) {
                      At.releaseProgram(t);
                    }),
                    t.isShaderMaterial && At.releaseShaderCache(t));
                })(t),
                  dt.remove(t);
              })(e);
          }
          function Yt(t, e, n) {
            !0 === t.transparent && t.side === i.$EB && !1 === t.forceSinglePass
              ? ((t.side = i.hsX),
                (t.needsUpdate = !0),
                re(t, e, n),
                (t.side = i.hB5),
                (t.needsUpdate = !0),
                re(t, e, n),
                (t.side = i.$EB))
              : re(t, e, n);
          }
          (this.xr = Vt),
            (this.getContext = function () {
              return kt;
            }),
            (this.getContextAttributes = function () {
              return kt.getContextAttributes();
            }),
            (this.forceContextLoss = function () {
              const t = lt.get("WEBGL_lose_context");
              t && t.loseContext();
            }),
            (this.forceContextRestore = function () {
              const t = lt.get("WEBGL_lose_context");
              t && t.restoreContext();
            }),
            (this.getPixelRatio = function () {
              return j;
            }),
            (this.setPixelRatio = function (t) {
              void 0 !== t && ((j = t), this.setSize(X, q, !1));
            }),
            (this.getSize = function (t) {
              return t.set(X, q);
            }),
            (this.setSize = function (t, n, i = !0) {
              Vt.isPresenting
                ? console.warn(
                    "THREE.WebGLRenderer: Can't change size while VR device is presenting."
                  )
                : ((X = t),
                  (q = n),
                  (e.width = Math.floor(t * j)),
                  (e.height = Math.floor(n * j)),
                  !0 === i &&
                    ((e.style.width = t + "px"), (e.style.height = n + "px")),
                  this.setViewport(0, 0, t, n));
            }),
            (this.getDrawingBufferSize = function (t) {
              return t.set(X * j, q * j).floor();
            }),
            (this.setDrawingBufferSize = function (t, n, i) {
              (X = t),
                (q = n),
                (j = i),
                (e.width = Math.floor(t * i)),
                (e.height = Math.floor(n * i)),
                this.setViewport(0, 0, t, n);
            }),
            (this.getCurrentViewport = function (t) {
              return t.copy(I);
            }),
            (this.getViewport = function (t) {
              return t.copy(Z);
            }),
            (this.setViewport = function (t, e, n, i) {
              t.isVector4 ? Z.set(t.x, t.y, t.z, t.w) : Z.set(t, e, n, i),
                ut.viewport(I.copy(Z).multiplyScalar(j).round());
            }),
            (this.getScissor = function (t) {
              return t.copy($);
            }),
            (this.setScissor = function (t, e, n, i) {
              t.isVector4 ? $.set(t.x, t.y, t.z, t.w) : $.set(t, e, n, i),
                ut.scissor(H.copy($).multiplyScalar(j).round());
            }),
            (this.getScissorTest = function () {
              return Q;
            }),
            (this.setScissorTest = function (t) {
              ut.setScissorTest((Q = t));
            }),
            (this.setOpaqueSort = function (t) {
              Y = t;
            }),
            (this.setTransparentSort = function (t) {
              K = t;
            }),
            (this.getClearColor = function (t) {
              return t.copy(Dt.getClearColor());
            }),
            (this.setClearColor = function () {
              Dt.setClearColor.apply(Dt, arguments);
            }),
            (this.getClearAlpha = function () {
              return Dt.getClearAlpha();
            }),
            (this.setClearAlpha = function () {
              Dt.setClearAlpha.apply(Dt, arguments);
            }),
            (this.clear = function (t = !0, e = !0, n = !0) {
              let r = 0;
              if (t) {
                let t = !1;
                if (null !== L) {
                  const e = L.texture.format;
                  t = e === i.c90 || e === i.TkQ || e === i.ZQM;
                }
                if (t) {
                  const t = L.texture.type,
                    e =
                      t === i.OUM ||
                      t === i.bkx ||
                      t === i.cHt ||
                      t === i.V3x ||
                      t === i.Wew ||
                      t === i.gJ2,
                    n = Dt.getClearColor(),
                    r = Dt.getClearAlpha(),
                    a = n.r,
                    s = n.g,
                    o = n.b;
                  e
                    ? ((y[0] = a),
                      (y[1] = s),
                      (y[2] = o),
                      (y[3] = r),
                      kt.clearBufferuiv(kt.COLOR, 0, y))
                    : ((M[0] = a),
                      (M[1] = s),
                      (M[2] = o),
                      (M[3] = r),
                      kt.clearBufferiv(kt.COLOR, 0, M));
                } else r |= kt.COLOR_BUFFER_BIT;
              }
              e && (r |= kt.DEPTH_BUFFER_BIT),
                n &&
                  ((r |= kt.STENCIL_BUFFER_BIT),
                  this.state.buffers.stencil.setMask(4294967295)),
                kt.clear(r);
            }),
            (this.clearColor = function () {
              this.clear(!0, !1, !1);
            }),
            (this.clearDepth = function () {
              this.clear(!1, !0, !1);
            }),
            (this.clearStencil = function () {
              this.clear(!1, !1, !0);
            }),
            (this.dispose = function () {
              e.removeEventListener("webglcontextlost", Wt, !1),
                e.removeEventListener("webglcontextrestored", Xt, !1),
                e.removeEventListener("webglcontextcreationerror", qt, !1),
                Ct.dispose(),
                Pt.dispose(),
                dt.dispose(),
                ft.dispose(),
                mt.dispose(),
                wt.dispose(),
                Bt.dispose(),
                zt.dispose(),
                At.dispose(),
                Vt.dispose(),
                Vt.removeEventListener("sessionstart", Zt),
                Vt.removeEventListener("sessionend", $t),
                Qt.stop();
            }),
            (this.renderBufferDirect = function (t, e, n, r, a, s) {
              null === e && (e = at);
              const o = a.isMesh && a.matrixWorld.determinant() < 0,
                l = (function (t, e, n, r, a) {
                  !0 !== e.isScene && (e = at), pt.resetTextureUnits();
                  const s = e.fog,
                    o = r.isMeshStandardMaterial ? e.environment : null,
                    l =
                      null === L
                        ? A.outputColorSpace
                        : !0 === L.isXRRenderTarget
                        ? L.texture.colorSpace
                        : i.Zr2,
                    c = (r.isMeshStandardMaterial ? mt : ft).get(r.envMap || o),
                    u =
                      !0 === r.vertexColors &&
                      !!n.attributes.color &&
                      4 === n.attributes.color.itemSize,
                    h =
                      !!n.attributes.tangent &&
                      (!!r.normalMap || r.anisotropy > 0),
                    d = !!n.morphAttributes.position,
                    p = !!n.morphAttributes.normal,
                    f = !!n.morphAttributes.color;
                  let m = i.y_p;
                  r.toneMapped &&
                    ((null !== L && !0 !== L.isXRRenderTarget) ||
                      (m = A.toneMapping));
                  const g =
                      n.morphAttributes.position ||
                      n.morphAttributes.normal ||
                      n.morphAttributes.color,
                    _ = void 0 !== g ? g.length : 0,
                    v = dt.get(r),
                    x = E.state.lights;
                  if (!0 === et && (!0 === nt || t !== D)) {
                    const e = t === D && r.id === U;
                    Lt.setState(r, t, e);
                  }
                  let y = !1;
                  r.version === v.__version
                    ? (v.needsLights &&
                        v.lightsStateVersion !== x.state.version) ||
                      v.outputColorSpace !== l ||
                      (a.isBatchedMesh && !1 === v.batching)
                      ? (y = !0)
                      : a.isBatchedMesh || !0 !== v.batching
                      ? (a.isBatchedMesh &&
                          !0 === v.batchingColor &&
                          null === a.colorTexture) ||
                        (a.isBatchedMesh &&
                          !1 === v.batchingColor &&
                          null !== a.colorTexture) ||
                        (a.isInstancedMesh && !1 === v.instancing)
                        ? (y = !0)
                        : a.isInstancedMesh || !0 !== v.instancing
                        ? a.isSkinnedMesh && !1 === v.skinning
                          ? (y = !0)
                          : a.isSkinnedMesh || !0 !== v.skinning
                          ? (a.isInstancedMesh &&
                              !0 === v.instancingColor &&
                              null === a.instanceColor) ||
                            (a.isInstancedMesh &&
                              !1 === v.instancingColor &&
                              null !== a.instanceColor) ||
                            (a.isInstancedMesh &&
                              !0 === v.instancingMorph &&
                              null === a.morphTexture) ||
                            (a.isInstancedMesh &&
                              !1 === v.instancingMorph &&
                              null !== a.morphTexture) ||
                            v.envMap !== c ||
                            (!0 === r.fog && v.fog !== s)
                            ? (y = !0)
                            : void 0 === v.numClippingPlanes ||
                              (v.numClippingPlanes === Lt.numPlanes &&
                                v.numIntersection === Lt.numIntersection)
                            ? (v.vertexAlphas !== u ||
                                v.vertexTangents !== h ||
                                v.morphTargets !== d ||
                                v.morphNormals !== p ||
                                v.morphColors !== f ||
                                v.toneMapping !== m ||
                                v.morphTargetsCount !== _) &&
                              (y = !0)
                            : (y = !0)
                          : (y = !0)
                        : (y = !0)
                      : (y = !0)
                    : ((y = !0), (v.__version = r.version));
                  let M = v.currentProgram;
                  !0 === y && (M = re(r, e, a));
                  let S = !1,
                    b = !1,
                    T = !1;
                  const w = M.getUniforms(),
                    R = v.uniforms;
                  if (
                    (ut.useProgram(M.program) && ((S = !0), (b = !0), (T = !0)),
                    r.id !== U && ((U = r.id), (b = !0)),
                    S || D !== t)
                  ) {
                    w.setValue(kt, "projectionMatrix", t.projectionMatrix),
                      w.setValue(kt, "viewMatrix", t.matrixWorldInverse);
                    const e = w.map.cameraPosition;
                    void 0 !== e &&
                      e.setValue(kt, rt.setFromMatrixPosition(t.matrixWorld)),
                      ct.logarithmicDepthBuffer &&
                        w.setValue(
                          kt,
                          "logDepthBufFC",
                          2 / (Math.log(t.far + 1) / Math.LN2)
                        ),
                      (r.isMeshPhongMaterial ||
                        r.isMeshToonMaterial ||
                        r.isMeshLambertMaterial ||
                        r.isMeshBasicMaterial ||
                        r.isMeshStandardMaterial ||
                        r.isShaderMaterial) &&
                        w.setValue(
                          kt,
                          "isOrthographic",
                          !0 === t.isOrthographicCamera
                        ),
                      D !== t && ((D = t), (b = !0), (T = !0));
                  }
                  if (a.isSkinnedMesh) {
                    w.setOptional(kt, a, "bindMatrix"),
                      w.setOptional(kt, a, "bindMatrixInverse");
                    const t = a.skeleton;
                    t &&
                      (null === t.boneTexture && t.computeBoneTexture(),
                      w.setValue(kt, "boneTexture", t.boneTexture, pt));
                  }
                  a.isBatchedMesh &&
                    (w.setOptional(kt, a, "batchingTexture"),
                    w.setValue(kt, "batchingTexture", a._matricesTexture, pt),
                    w.setOptional(kt, a, "batchingColorTexture"),
                    null !== a._colorsTexture &&
                      w.setValue(
                        kt,
                        "batchingColorTexture",
                        a._colorsTexture,
                        pt
                      ));
                  const C = n.morphAttributes;
                  var P, I;
                  if (
                    ((void 0 === C.position &&
                      void 0 === C.normal &&
                      void 0 === C.color) ||
                      It.update(a, n, M),
                    (b || v.receiveShadow !== a.receiveShadow) &&
                      ((v.receiveShadow = a.receiveShadow),
                      w.setValue(kt, "receiveShadow", a.receiveShadow)),
                    r.isMeshGouraudMaterial &&
                      null !== r.envMap &&
                      ((R.envMap.value = c),
                      (R.flipEnvMap.value =
                        c.isCubeTexture && !1 === c.isRenderTargetTexture
                          ? -1
                          : 1)),
                    r.isMeshStandardMaterial &&
                      null === r.envMap &&
                      null !== e.environment &&
                      (R.envMapIntensity.value = e.environmentIntensity),
                    b &&
                      (w.setValue(
                        kt,
                        "toneMappingExposure",
                        A.toneMappingExposure
                      ),
                      v.needsLights &&
                        ((I = T),
                        ((P = R).ambientLightColor.needsUpdate = I),
                        (P.lightProbe.needsUpdate = I),
                        (P.directionalLights.needsUpdate = I),
                        (P.directionalLightShadows.needsUpdate = I),
                        (P.pointLights.needsUpdate = I),
                        (P.pointLightShadows.needsUpdate = I),
                        (P.spotLights.needsUpdate = I),
                        (P.spotLightShadows.needsUpdate = I),
                        (P.rectAreaLights.needsUpdate = I),
                        (P.hemisphereLights.needsUpdate = I)),
                      s && !0 === r.fog && Rt.refreshFogUniforms(R, s),
                      Rt.refreshMaterialUniforms(
                        R,
                        r,
                        j,
                        q,
                        E.state.transmissionRenderTarget[t.id]
                      ),
                      De.upload(kt, ae(v), R, pt)),
                    r.isShaderMaterial &&
                      !0 === r.uniformsNeedUpdate &&
                      (De.upload(kt, ae(v), R, pt),
                      (r.uniformsNeedUpdate = !1)),
                    r.isSpriteMaterial && w.setValue(kt, "center", a.center),
                    w.setValue(kt, "modelViewMatrix", a.modelViewMatrix),
                    w.setValue(kt, "normalMatrix", a.normalMatrix),
                    w.setValue(kt, "modelMatrix", a.matrixWorld),
                    r.isShaderMaterial || r.isRawShaderMaterial)
                  ) {
                    const t = r.uniformsGroups;
                    for (let e = 0, n = t.length; e < n; e++) {
                      const n = t[e];
                      zt.update(n, M), zt.bind(n, M);
                    }
                  }
                  return M;
                })(t, e, n, r, a);
              ut.setMaterial(r, o);
              let c = n.index,
                u = 1;
              if (!0 === r.wireframe) {
                if (((c = Et.getWireframeAttribute(n)), void 0 === c)) return;
                u = 2;
              }
              const h = n.drawRange,
                d = n.attributes.position;
              let p = h.start * u,
                f = (h.start + h.count) * u;
              null !== s &&
                ((p = Math.max(p, s.start * u)),
                (f = Math.min(f, (s.start + s.count) * u))),
                null !== c
                  ? ((p = Math.max(p, 0)), (f = Math.min(f, c.count)))
                  : null != d &&
                    ((p = Math.max(p, 0)), (f = Math.min(f, d.count)));
              const m = f - p;
              if (m < 0 || m === 1 / 0) return;
              let g;
              Bt.setup(a, r, l, n, c);
              let _ = Nt;
              if (
                (null !== c && ((g = gt.get(c)), (_ = Ot), _.setIndex(g)),
                a.isMesh)
              )
                !0 === r.wireframe
                  ? (ut.setLineWidth(r.wireframeLinewidth * ot()),
                    _.setMode(kt.LINES))
                  : _.setMode(kt.TRIANGLES);
              else if (a.isLine) {
                let t = r.linewidth;
                void 0 === t && (t = 1),
                  ut.setLineWidth(t * ot()),
                  a.isLineSegments
                    ? _.setMode(kt.LINES)
                    : a.isLineLoop
                    ? _.setMode(kt.LINE_LOOP)
                    : _.setMode(kt.LINE_STRIP);
              } else
                a.isPoints
                  ? _.setMode(kt.POINTS)
                  : a.isSprite && _.setMode(kt.TRIANGLES);
              if (a.isBatchedMesh)
                null !== a._multiDrawInstances
                  ? _.renderMultiDrawInstances(
                      a._multiDrawStarts,
                      a._multiDrawCounts,
                      a._multiDrawCount,
                      a._multiDrawInstances
                    )
                  : _.renderMultiDraw(
                      a._multiDrawStarts,
                      a._multiDrawCounts,
                      a._multiDrawCount
                    );
              else if (a.isInstancedMesh) _.renderInstances(p, m, a.count);
              else if (n.isInstancedBufferGeometry) {
                const t =
                    void 0 !== n._maxInstanceCount
                      ? n._maxInstanceCount
                      : 1 / 0,
                  e = Math.min(n.instanceCount, t);
                _.renderInstances(p, m, e);
              } else _.render(p, m);
            }),
            (this.compile = function (t, e, n = null) {
              null === n && (n = t),
                (E = Pt.get(n)),
                E.init(e),
                w.push(E),
                n.traverseVisible(function (t) {
                  t.isLight &&
                    t.layers.test(e.layers) &&
                    (E.pushLight(t), t.castShadow && E.pushShadow(t));
                }),
                t !== n &&
                  t.traverseVisible(function (t) {
                    t.isLight &&
                      t.layers.test(e.layers) &&
                      (E.pushLight(t), t.castShadow && E.pushShadow(t));
                  }),
                E.setupLights();
              const i = new Set();
              return (
                t.traverse(function (t) {
                  const e = t.material;
                  if (e)
                    if (Array.isArray(e))
                      for (let r = 0; r < e.length; r++) {
                        const a = e[r];
                        Yt(a, n, t), i.add(a);
                      }
                    else Yt(e, n, t), i.add(e);
                }),
                w.pop(),
                (E = null),
                i
              );
            }),
            (this.compileAsync = function (t, e, n = null) {
              const i = this.compile(t, e, n);
              return new Promise((e) => {
                function n() {
                  i.forEach(function (t) {
                    dt.get(t).currentProgram.isReady() && i.delete(t);
                  }),
                    0 !== i.size ? setTimeout(n, 10) : e(t);
                }
                null !== lt.get("KHR_parallel_shader_compile")
                  ? n()
                  : setTimeout(n, 10);
              });
            });
          let Kt = null;
          function Zt() {
            Qt.stop();
          }
          function $t() {
            Qt.start();
          }
          const Qt = new _();
          function Jt(t, e, n, i) {
            if (!1 === t.visible) return;
            if (t.layers.test(e.layers))
              if (t.isGroup) n = t.renderOrder;
              else if (t.isLOD) !0 === t.autoUpdate && t.update(e);
              else if (t.isLight)
                E.pushLight(t), t.castShadow && E.pushShadow(t);
              else if (t.isSprite) {
                if (!t.frustumCulled || tt.intersectsSprite(t)) {
                  i && rt.setFromMatrixPosition(t.matrixWorld).applyMatrix4(it);
                  const e = wt.update(t),
                    r = t.material;
                  r.visible && S.push(t, e, r, n, rt.z, null);
                }
              } else if (
                (t.isMesh || t.isLine || t.isPoints) &&
                (!t.frustumCulled || tt.intersectsObject(t))
              ) {
                const e = wt.update(t),
                  r = t.material;
                if (
                  (i &&
                    (void 0 !== t.boundingSphere
                      ? (null === t.boundingSphere && t.computeBoundingSphere(),
                        rt.copy(t.boundingSphere.center))
                      : (null === e.boundingSphere && e.computeBoundingSphere(),
                        rt.copy(e.boundingSphere.center)),
                    rt.applyMatrix4(t.matrixWorld).applyMatrix4(it)),
                  Array.isArray(r))
                ) {
                  const i = e.groups;
                  for (let a = 0, s = i.length; a < s; a++) {
                    const s = i[a],
                      o = r[s.materialIndex];
                    o && o.visible && S.push(t, e, o, n, rt.z, s);
                  }
                } else r.visible && S.push(t, e, r, n, rt.z, null);
              }
            const r = t.children;
            for (let t = 0, a = r.length; t < a; t++) Jt(r[t], e, n, i);
          }
          function te(t, e, n, i) {
            const r = t.opaque,
              a = t.transmissive,
              s = t.transparent;
            E.setupLightsView(n),
              !0 === et && Lt.setGlobalState(A.clippingPlanes, n),
              i && ut.viewport(I.copy(i)),
              r.length > 0 && ne(r, e, n),
              a.length > 0 && ne(a, e, n),
              s.length > 0 && ne(s, e, n),
              ut.buffers.depth.setTest(!0),
              ut.buffers.depth.setMask(!0),
              ut.buffers.color.setMask(!0),
              ut.setPolygonOffset(!1);
          }
          function ee(t, e, n, r) {
            if (null !== (!0 === n.isScene ? n.overrideMaterial : null)) return;
            void 0 === E.state.transmissionRenderTarget[r.id] &&
              (E.state.transmissionRenderTarget[r.id] = new k.n(1, 1, {
                generateMipmaps: !0,
                type:
                  lt.has("EXT_color_buffer_half_float") ||
                  lt.has("EXT_color_buffer_float")
                    ? i.ix0
                    : i.OUM,
                minFilter: i.$_I,
                samples: 4,
                stencilBuffer: o,
                resolveDepthBuffer: !1,
                resolveStencilBuffer: !1,
                colorSpace: b.pp.workingColorSpace,
              }));
            const a = E.state.transmissionRenderTarget[r.id],
              s = r.viewport || I;
            a.setSize(s.z, s.w);
            const l = A.getRenderTarget();
            A.setRenderTarget(a),
              A.getClearColor(V),
              (W = A.getClearAlpha()),
              W < 1 && A.setClearColor(16777215, 0.5),
              st ? Dt.render(n) : A.clear();
            const c = A.toneMapping;
            A.toneMapping = i.y_p;
            const u = r.viewport;
            if (
              (void 0 !== r.viewport && (r.viewport = void 0),
              E.setupLightsView(r),
              !0 === et && Lt.setGlobalState(A.clippingPlanes, r),
              ne(t, n, r),
              pt.updateMultisampleRenderTarget(a),
              pt.updateRenderTargetMipmap(a),
              !1 === lt.has("WEBGL_multisampled_render_to_texture"))
            ) {
              let t = !1;
              for (let a = 0, s = e.length; a < s; a++) {
                const s = e[a],
                  o = s.object,
                  l = s.geometry,
                  c = s.material,
                  u = s.group;
                if (c.side === i.$EB && o.layers.test(r.layers)) {
                  const e = c.side;
                  (c.side = i.hsX),
                    (c.needsUpdate = !0),
                    ie(o, n, r, l, c, u),
                    (c.side = e),
                    (c.needsUpdate = !0),
                    (t = !0);
                }
              }
              !0 === t &&
                (pt.updateMultisampleRenderTarget(a),
                pt.updateRenderTargetMipmap(a));
            }
            A.setRenderTarget(l),
              A.setClearColor(V, W),
              void 0 !== u && (r.viewport = u),
              (A.toneMapping = c);
          }
          function ne(t, e, n) {
            const i = !0 === e.isScene ? e.overrideMaterial : null;
            for (let r = 0, a = t.length; r < a; r++) {
              const a = t[r],
                s = a.object,
                o = a.geometry,
                l = null === i ? a.material : i,
                c = a.group;
              s.layers.test(n.layers) && ie(s, e, n, o, l, c);
            }
          }
          function ie(t, e, n, r, a, s) {
            t.onBeforeRender(A, e, n, r, a, s),
              t.modelViewMatrix.multiplyMatrices(
                n.matrixWorldInverse,
                t.matrixWorld
              ),
              t.normalMatrix.getNormalMatrix(t.modelViewMatrix),
              a.onBeforeRender(A, e, n, r, t, s),
              !0 === a.transparent &&
              a.side === i.$EB &&
              !1 === a.forceSinglePass
                ? ((a.side = i.hsX),
                  (a.needsUpdate = !0),
                  A.renderBufferDirect(n, e, r, a, t, s),
                  (a.side = i.hB5),
                  (a.needsUpdate = !0),
                  A.renderBufferDirect(n, e, r, a, t, s),
                  (a.side = i.$EB))
                : A.renderBufferDirect(n, e, r, a, t, s),
              t.onAfterRender(A, e, n, r, a, s);
          }
          function re(t, e, n) {
            !0 !== e.isScene && (e = at);
            const i = dt.get(t),
              r = E.state.lights,
              a = E.state.shadowsArray,
              s = r.state.version,
              o = At.getParameters(t, r.state, a, e, n),
              l = At.getProgramCacheKey(o);
            let c = i.programs;
            (i.environment = t.isMeshStandardMaterial ? e.environment : null),
              (i.fog = e.fog),
              (i.envMap = (t.isMeshStandardMaterial ? mt : ft).get(
                t.envMap || i.environment
              )),
              (i.envMapRotation =
                null !== i.environment && null === t.envMap
                  ? e.environmentRotation
                  : t.envMapRotation),
              void 0 === c &&
                (t.addEventListener("dispose", jt),
                (c = new Map()),
                (i.programs = c));
            let u = c.get(l);
            if (void 0 !== u) {
              if (i.currentProgram === u && i.lightsStateVersion === s)
                return se(t, o), u;
            } else
              (o.uniforms = At.getUniforms(t)),
                t.onBuild(n, o, A),
                t.onBeforeCompile(o, A),
                (u = At.acquireProgram(o, l)),
                c.set(l, u),
                (i.uniforms = o.uniforms);
            const h = i.uniforms;
            return (
              ((t.isShaderMaterial || t.isRawShaderMaterial) &&
                !0 !== t.clipping) ||
                (h.clippingPlanes = Lt.uniform),
              se(t, o),
              (i.needsLights = (function (t) {
                return (
                  t.isMeshLambertMaterial ||
                  t.isMeshToonMaterial ||
                  t.isMeshPhongMaterial ||
                  t.isMeshStandardMaterial ||
                  t.isShadowMaterial ||
                  (t.isShaderMaterial && !0 === t.lights)
                );
              })(t)),
              (i.lightsStateVersion = s),
              i.needsLights &&
                ((h.ambientLightColor.value = r.state.ambient),
                (h.lightProbe.value = r.state.probe),
                (h.directionalLights.value = r.state.directional),
                (h.directionalLightShadows.value = r.state.directionalShadow),
                (h.spotLights.value = r.state.spot),
                (h.spotLightShadows.value = r.state.spotShadow),
                (h.rectAreaLights.value = r.state.rectArea),
                (h.ltc_1.value = r.state.rectAreaLTC1),
                (h.ltc_2.value = r.state.rectAreaLTC2),
                (h.pointLights.value = r.state.point),
                (h.pointLightShadows.value = r.state.pointShadow),
                (h.hemisphereLights.value = r.state.hemi),
                (h.directionalShadowMap.value = r.state.directionalShadowMap),
                (h.directionalShadowMatrix.value =
                  r.state.directionalShadowMatrix),
                (h.spotShadowMap.value = r.state.spotShadowMap),
                (h.spotLightMatrix.value = r.state.spotLightMatrix),
                (h.spotLightMap.value = r.state.spotLightMap),
                (h.pointShadowMap.value = r.state.pointShadowMap),
                (h.pointShadowMatrix.value = r.state.pointShadowMatrix)),
              (i.currentProgram = u),
              (i.uniformsList = null),
              u
            );
          }
          function ae(t) {
            if (null === t.uniformsList) {
              const e = t.currentProgram.getUniforms();
              t.uniformsList = De.seqWithValue(e.seq, t.uniforms);
            }
            return t.uniformsList;
          }
          function se(t, e) {
            const n = dt.get(t);
            (n.outputColorSpace = e.outputColorSpace),
              (n.batching = e.batching),
              (n.batchingColor = e.batchingColor),
              (n.instancing = e.instancing),
              (n.instancingColor = e.instancingColor),
              (n.instancingMorph = e.instancingMorph),
              (n.skinning = e.skinning),
              (n.morphTargets = e.morphTargets),
              (n.morphNormals = e.morphNormals),
              (n.morphColors = e.morphColors),
              (n.morphTargetsCount = e.morphTargetsCount),
              (n.numClippingPlanes = e.numClippingPlanes),
              (n.numIntersection = e.numClipIntersection),
              (n.vertexAlphas = e.vertexAlphas),
              (n.vertexTangents = e.vertexTangents),
              (n.toneMapping = e.toneMapping);
          }
          Qt.setAnimationLoop(function (t) {
            Kt && Kt(t);
          }),
            "undefined" != typeof self && Qt.setContext(self),
            (this.setAnimationLoop = function (t) {
              (Kt = t),
                Vt.setAnimationLoop(t),
                null === t ? Qt.stop() : Qt.start();
            }),
            Vt.addEventListener("sessionstart", Zt),
            Vt.addEventListener("sessionend", $t),
            (this.render = function (t, e) {
              if (void 0 !== e && !0 !== e.isCamera)
                return void console.error(
                  "THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera."
                );
              if (!0 === R) return;
              if (
                (!0 === t.matrixWorldAutoUpdate && t.updateMatrixWorld(),
                null === e.parent &&
                  !0 === e.matrixWorldAutoUpdate &&
                  e.updateMatrixWorld(),
                !0 === Vt.enabled &&
                  !0 === Vt.isPresenting &&
                  (!0 === Vt.cameraAutoUpdate && Vt.updateCamera(e),
                  (e = Vt.getCamera())),
                !0 === t.isScene && t.onBeforeRender(A, t, e, L),
                (E = Pt.get(t, w.length)),
                E.init(e),
                w.push(E),
                it.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                tt.setFromProjectionMatrix(it),
                (nt = this.localClippingEnabled),
                (et = Lt.init(this.clippingPlanes, nt)),
                (S = Ct.get(t, T.length)),
                S.init(),
                T.push(S),
                !0 === Vt.enabled && !0 === Vt.isPresenting)
              ) {
                const t = A.xr.getDepthSensingMesh();
                null !== t && Jt(t, e, -1 / 0, A.sortObjects);
              }
              Jt(t, e, 0, A.sortObjects),
                S.finish(),
                !0 === A.sortObjects && S.sort(Y, K),
                (st =
                  !1 === Vt.enabled ||
                  !1 === Vt.isPresenting ||
                  !1 === Vt.hasDepthSensing()),
                st && Dt.addToRenderList(S, t),
                this.info.render.frame++,
                !0 === et && Lt.beginShadows();
              const n = E.state.shadowsArray;
              Ut.render(n, t, e),
                !0 === et && Lt.endShadows(),
                !0 === this.info.autoReset && this.info.reset();
              const i = S.opaque,
                r = S.transmissive;
              if ((E.setupLights(), e.isArrayCamera)) {
                const n = e.cameras;
                if (r.length > 0)
                  for (let e = 0, a = n.length; e < a; e++) ee(i, r, t, n[e]);
                st && Dt.render(t);
                for (let e = 0, i = n.length; e < i; e++) {
                  const i = n[e];
                  te(S, t, i, i.viewport);
                }
              } else
                r.length > 0 && ee(i, r, t, e), st && Dt.render(t), te(S, t, e);
              null !== L &&
                (pt.updateMultisampleRenderTarget(L),
                pt.updateRenderTargetMipmap(L)),
                !0 === t.isScene && t.onAfterRender(A, t, e),
                Bt.resetDefaultState(),
                (U = -1),
                (D = null),
                w.pop(),
                w.length > 0
                  ? ((E = w[w.length - 1]),
                    !0 === et &&
                      Lt.setGlobalState(A.clippingPlanes, E.state.camera))
                  : (E = null),
                T.pop(),
                (S = T.length > 0 ? T[T.length - 1] : null);
            }),
            (this.getActiveCubeFace = function () {
              return C;
            }),
            (this.getActiveMipmapLevel = function () {
              return P;
            }),
            (this.getRenderTarget = function () {
              return L;
            }),
            (this.setRenderTargetTextures = function (t, e, n) {
              (dt.get(t.texture).__webglTexture = e),
                (dt.get(t.depthTexture).__webglTexture = n);
              const i = dt.get(t);
              (i.__hasExternalTextures = !0),
                (i.__autoAllocateDepthBuffer = void 0 === n),
                i.__autoAllocateDepthBuffer ||
                  (!0 === lt.has("WEBGL_multisampled_render_to_texture") &&
                    (console.warn(
                      "THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"
                    ),
                    (i.__useRenderToTexture = !1)));
            }),
            (this.setRenderTargetFramebuffer = function (t, e) {
              const n = dt.get(t);
              (n.__webglFramebuffer = e),
                (n.__useDefaultFramebuffer = void 0 === e);
            }),
            (this.setRenderTarget = function (t, e = 0, n = 0) {
              (L = t), (C = e), (P = n);
              let i = !0,
                r = null,
                a = !1,
                s = !1;
              if (t) {
                const o = dt.get(t);
                void 0 !== o.__useDefaultFramebuffer
                  ? (ut.bindFramebuffer(kt.FRAMEBUFFER, null), (i = !1))
                  : void 0 === o.__webglFramebuffer
                  ? pt.setupRenderTarget(t)
                  : o.__hasExternalTextures &&
                    pt.rebindTextures(
                      t,
                      dt.get(t.texture).__webglTexture,
                      dt.get(t.depthTexture).__webglTexture
                    );
                const l = t.texture;
                (l.isData3DTexture ||
                  l.isDataArrayTexture ||
                  l.isCompressedArrayTexture) &&
                  (s = !0);
                const c = dt.get(t).__webglFramebuffer;
                t.isWebGLCubeRenderTarget
                  ? ((r = Array.isArray(c[e]) ? c[e][n] : c[e]), (a = !0))
                  : (r =
                      t.samples > 0 && !1 === pt.useMultisampledRTT(t)
                        ? dt.get(t).__webglMultisampledFramebuffer
                        : Array.isArray(c)
                        ? c[n]
                        : c),
                  I.copy(t.viewport),
                  H.copy(t.scissor),
                  (G = t.scissorTest);
              } else
                I.copy(Z).multiplyScalar(j).floor(),
                  H.copy($).multiplyScalar(j).floor(),
                  (G = Q);
              if (
                (ut.bindFramebuffer(kt.FRAMEBUFFER, r) &&
                  i &&
                  ut.drawBuffers(t, r),
                ut.viewport(I),
                ut.scissor(H),
                ut.setScissorTest(G),
                a)
              ) {
                const i = dt.get(t.texture);
                kt.framebufferTexture2D(
                  kt.FRAMEBUFFER,
                  kt.COLOR_ATTACHMENT0,
                  kt.TEXTURE_CUBE_MAP_POSITIVE_X + e,
                  i.__webglTexture,
                  n
                );
              } else if (s) {
                const i = dt.get(t.texture),
                  r = e || 0;
                kt.framebufferTextureLayer(
                  kt.FRAMEBUFFER,
                  kt.COLOR_ATTACHMENT0,
                  i.__webglTexture,
                  n || 0,
                  r
                );
              }
              U = -1;
            }),
            (this.readRenderTargetPixels = function (t, e, n, i, r, a, s) {
              if (!t || !t.isWebGLRenderTarget)
                return void console.error(
                  "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."
                );
              let o = dt.get(t).__webglFramebuffer;
              if (
                (t.isWebGLCubeRenderTarget && void 0 !== s && (o = o[s]), o)
              ) {
                ut.bindFramebuffer(kt.FRAMEBUFFER, o);
                try {
                  const s = t.texture,
                    o = s.format,
                    l = s.type;
                  if (!ct.textureFormatReadable(o))
                    return void console.error(
                      "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."
                    );
                  if (!ct.textureTypeReadable(l))
                    return void console.error(
                      "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type."
                    );
                  e >= 0 &&
                    e <= t.width - i &&
                    n >= 0 &&
                    n <= t.height - r &&
                    kt.readPixels(e, n, i, r, Ft.convert(o), Ft.convert(l), a);
                } finally {
                  const t = null !== L ? dt.get(L).__webglFramebuffer : null;
                  ut.bindFramebuffer(kt.FRAMEBUFFER, t);
                }
              }
            }),
            (this.readRenderTargetPixelsAsync = async function (
              t,
              e,
              n,
              i,
              r,
              a,
              s
            ) {
              if (!t || !t.isWebGLRenderTarget)
                throw new Error(
                  "THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."
                );
              let o = dt.get(t).__webglFramebuffer;
              if (
                (t.isWebGLCubeRenderTarget && void 0 !== s && (o = o[s]), o)
              ) {
                ut.bindFramebuffer(kt.FRAMEBUFFER, o);
                try {
                  const s = t.texture,
                    o = s.format,
                    l = s.type;
                  if (!ct.textureFormatReadable(o))
                    throw new Error(
                      "THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format."
                    );
                  if (!ct.textureTypeReadable(l))
                    throw new Error(
                      "THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type."
                    );
                  if (
                    e >= 0 &&
                    e <= t.width - i &&
                    n >= 0 &&
                    n <= t.height - r
                  ) {
                    const t = kt.createBuffer();
                    kt.bindBuffer(kt.PIXEL_PACK_BUFFER, t),
                      kt.bufferData(
                        kt.PIXEL_PACK_BUFFER,
                        a.byteLength,
                        kt.STREAM_READ
                      ),
                      kt.readPixels(
                        e,
                        n,
                        i,
                        r,
                        Ft.convert(o),
                        Ft.convert(l),
                        0
                      ),
                      kt.flush();
                    const s = kt.fenceSync(kt.SYNC_GPU_COMMANDS_COMPLETE, 0);
                    await (0, vt.je)(kt, s, 4);
                    try {
                      kt.bindBuffer(kt.PIXEL_PACK_BUFFER, t),
                        kt.getBufferSubData(kt.PIXEL_PACK_BUFFER, 0, a);
                    } finally {
                      kt.deleteBuffer(t), kt.deleteSync(s);
                    }
                    return a;
                  }
                } finally {
                  const t = null !== L ? dt.get(L).__webglFramebuffer : null;
                  ut.bindFramebuffer(kt.FRAMEBUFFER, t);
                }
              }
            }),
            (this.copyFramebufferToTexture = function (t, e = null, n = 0) {
              !0 !== t.isTexture &&
                (console.warn(
                  "WebGLRenderer: copyFramebufferToTexture function signature has changed."
                ),
                (e = arguments[0] || null),
                (t = arguments[1]));
              const i = Math.pow(2, -n),
                r = Math.floor(t.image.width * i),
                a = Math.floor(t.image.height * i),
                s = null !== e ? e.x : 0,
                o = null !== e ? e.y : 0;
              pt.setTexture2D(t, 0),
                kt.copyTexSubImage2D(kt.TEXTURE_2D, n, 0, 0, s, o, r, a),
                ut.unbindTexture();
            }),
            (this.copyTextureToTexture = function (
              t,
              e,
              n = null,
              i = null,
              r = 0
            ) {
              let a, s, o, l, c, u;
              !0 !== t.isTexture &&
                (console.warn(
                  "WebGLRenderer: copyTextureToTexture function signature has changed."
                ),
                (i = arguments[0] || null),
                (t = arguments[1]),
                (e = arguments[2]),
                (r = arguments[3] || 0),
                (n = null)),
                null !== n
                  ? ((a = n.max.x - n.min.x),
                    (s = n.max.y - n.min.y),
                    (o = n.min.x),
                    (l = n.min.y))
                  : ((a = t.image.width),
                    (s = t.image.height),
                    (o = 0),
                    (l = 0)),
                null !== i ? ((c = i.x), (u = i.y)) : ((c = 0), (u = 0));
              const h = Ft.convert(e.format),
                d = Ft.convert(e.type);
              pt.setTexture2D(e, 0),
                kt.pixelStorei(kt.UNPACK_FLIP_Y_WEBGL, e.flipY),
                kt.pixelStorei(
                  kt.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                  e.premultiplyAlpha
                ),
                kt.pixelStorei(kt.UNPACK_ALIGNMENT, e.unpackAlignment);
              const p = kt.getParameter(kt.UNPACK_ROW_LENGTH),
                f = kt.getParameter(kt.UNPACK_IMAGE_HEIGHT),
                m = kt.getParameter(kt.UNPACK_SKIP_PIXELS),
                g = kt.getParameter(kt.UNPACK_SKIP_ROWS),
                _ = kt.getParameter(kt.UNPACK_SKIP_IMAGES),
                v = t.isCompressedTexture ? t.mipmaps[r] : t.image;
              kt.pixelStorei(kt.UNPACK_ROW_LENGTH, v.width),
                kt.pixelStorei(kt.UNPACK_IMAGE_HEIGHT, v.height),
                kt.pixelStorei(kt.UNPACK_SKIP_PIXELS, o),
                kt.pixelStorei(kt.UNPACK_SKIP_ROWS, l),
                t.isDataTexture
                  ? kt.texSubImage2D(kt.TEXTURE_2D, r, c, u, a, s, h, d, v.data)
                  : t.isCompressedTexture
                  ? kt.compressedTexSubImage2D(
                      kt.TEXTURE_2D,
                      r,
                      c,
                      u,
                      v.width,
                      v.height,
                      h,
                      v.data
                    )
                  : kt.texSubImage2D(kt.TEXTURE_2D, r, c, u, h, d, v),
                kt.pixelStorei(kt.UNPACK_ROW_LENGTH, p),
                kt.pixelStorei(kt.UNPACK_IMAGE_HEIGHT, f),
                kt.pixelStorei(kt.UNPACK_SKIP_PIXELS, m),
                kt.pixelStorei(kt.UNPACK_SKIP_ROWS, g),
                kt.pixelStorei(kt.UNPACK_SKIP_IMAGES, _),
                0 === r &&
                  e.generateMipmaps &&
                  kt.generateMipmap(kt.TEXTURE_2D),
                ut.unbindTexture();
            }),
            (this.copyTextureToTexture3D = function (
              t,
              e,
              n = null,
              i = null,
              r = 0
            ) {
              let a, s, o, l, c, u, h, d, p;
              !0 !== t.isTexture &&
                (console.warn(
                  "WebGLRenderer: copyTextureToTexture3D function signature has changed."
                ),
                (n = arguments[0] || null),
                (i = arguments[1] || null),
                (t = arguments[2]),
                (e = arguments[3]),
                (r = arguments[4] || 0));
              const f = t.isCompressedTexture ? t.mipmaps[r] : t.image;
              null !== n
                ? ((a = n.max.x - n.min.x),
                  (s = n.max.y - n.min.y),
                  (o = n.max.z - n.min.z),
                  (l = n.min.x),
                  (c = n.min.y),
                  (u = n.min.z))
                : ((a = f.width),
                  (s = f.height),
                  (o = f.depth),
                  (l = 0),
                  (c = 0),
                  (u = 0)),
                null !== i
                  ? ((h = i.x), (d = i.y), (p = i.z))
                  : ((h = 0), (d = 0), (p = 0));
              const m = Ft.convert(e.format),
                g = Ft.convert(e.type);
              let _;
              if (e.isData3DTexture) pt.setTexture3D(e, 0), (_ = kt.TEXTURE_3D);
              else {
                if (!e.isDataArrayTexture && !e.isCompressedArrayTexture)
                  return void console.warn(
                    "THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray."
                  );
                pt.setTexture2DArray(e, 0), (_ = kt.TEXTURE_2D_ARRAY);
              }
              kt.pixelStorei(kt.UNPACK_FLIP_Y_WEBGL, e.flipY),
                kt.pixelStorei(
                  kt.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                  e.premultiplyAlpha
                ),
                kt.pixelStorei(kt.UNPACK_ALIGNMENT, e.unpackAlignment);
              const v = kt.getParameter(kt.UNPACK_ROW_LENGTH),
                x = kt.getParameter(kt.UNPACK_IMAGE_HEIGHT),
                y = kt.getParameter(kt.UNPACK_SKIP_PIXELS),
                M = kt.getParameter(kt.UNPACK_SKIP_ROWS),
                S = kt.getParameter(kt.UNPACK_SKIP_IMAGES);
              kt.pixelStorei(kt.UNPACK_ROW_LENGTH, f.width),
                kt.pixelStorei(kt.UNPACK_IMAGE_HEIGHT, f.height),
                kt.pixelStorei(kt.UNPACK_SKIP_PIXELS, l),
                kt.pixelStorei(kt.UNPACK_SKIP_ROWS, c),
                kt.pixelStorei(kt.UNPACK_SKIP_IMAGES, u),
                t.isDataTexture || t.isData3DTexture
                  ? kt.texSubImage3D(_, r, h, d, p, a, s, o, m, g, f.data)
                  : e.isCompressedArrayTexture
                  ? kt.compressedTexSubImage3D(
                      _,
                      r,
                      h,
                      d,
                      p,
                      a,
                      s,
                      o,
                      m,
                      f.data
                    )
                  : kt.texSubImage3D(_, r, h, d, p, a, s, o, m, g, f),
                kt.pixelStorei(kt.UNPACK_ROW_LENGTH, v),
                kt.pixelStorei(kt.UNPACK_IMAGE_HEIGHT, x),
                kt.pixelStorei(kt.UNPACK_SKIP_PIXELS, y),
                kt.pixelStorei(kt.UNPACK_SKIP_ROWS, M),
                kt.pixelStorei(kt.UNPACK_SKIP_IMAGES, S),
                0 === r && e.generateMipmaps && kt.generateMipmap(_),
                ut.unbindTexture();
            }),
            (this.initRenderTarget = function (t) {
              void 0 === dt.get(t).__webglFramebuffer &&
                pt.setupRenderTarget(t);
            }),
            (this.initTexture = function (t) {
              t.isCubeTexture
                ? pt.setTextureCube(t, 0)
                : t.isData3DTexture
                ? pt.setTexture3D(t, 0)
                : t.isDataArrayTexture || t.isCompressedArrayTexture
                ? pt.setTexture2DArray(t, 0)
                : pt.setTexture2D(t, 0),
                ut.unbindTexture();
            }),
            (this.resetState = function () {
              (C = 0), (P = 0), (L = null), ut.reset(), Bt.reset();
            }),
            "undefined" != typeof __THREE_DEVTOOLS__ &&
              __THREE_DEVTOOLS__.dispatchEvent(
                new CustomEvent("observe", { detail: this })
              );
        }
        get coordinateSystem() {
          return i.TdN;
        }
        get outputColorSpace() {
          return this._outputColorSpace;
        }
        set outputColorSpace(t) {
          this._outputColorSpace = t;
          const e = this.getContext();
          (e.drawingBufferColorSpace = t === i.V5c ? "display-p3" : "srgb"),
            (e.unpackColorSpace =
              b.pp.workingColorSpace === i.qIQ ? "display-p3" : "srgb");
        }
      }
    },
    685: (t, e, n) => {
      n.d(e, {
        Ii: () => a,
        Jd: () => s,
        Ll: () => l,
        _U: () => o,
        lx: () => r,
      });
      var i = n(656);
      function r(t) {
        const e = {};
        for (const n in t) {
          e[n] = {};
          for (const i in t[n]) {
            const r = t[n][i];
            r &&
            (r.isColor ||
              r.isMatrix3 ||
              r.isMatrix4 ||
              r.isVector2 ||
              r.isVector3 ||
              r.isVector4 ||
              r.isTexture ||
              r.isQuaternion)
              ? r.isRenderTargetTexture
                ? (console.warn(
                    "UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."
                  ),
                  (e[n][i] = null))
                : (e[n][i] = r.clone())
              : Array.isArray(r)
              ? (e[n][i] = r.slice())
              : (e[n][i] = r);
          }
        }
        return e;
      }
      function a(t) {
        const e = {};
        for (let n = 0; n < t.length; n++) {
          const i = r(t[n]);
          for (const t in i) e[t] = i[t];
        }
        return e;
      }
      function s(t) {
        const e = [];
        for (let n = 0; n < t.length; n++) e.push(t[n].clone());
        return e;
      }
      function o(t) {
        const e = t.getRenderTarget();
        return null === e
          ? t.outputColorSpace
          : !0 === e.isXRRenderTarget
          ? e.texture.colorSpace
          : i.pp.workingColorSpace;
      }
      const l = { clone: r, merge: a };
    },
    235: (t, e, n) => {
      n.d(e, { Z: () => a });
      var i = n(813),
        r = n(781);
      class a extends i.B {
        constructor() {
          super(),
            (this.isScene = !0),
            (this.type = "Scene"),
            (this.background = null),
            (this.environment = null),
            (this.fog = null),
            (this.backgroundBlurriness = 0),
            (this.backgroundIntensity = 1),
            (this.backgroundRotation = new r.O()),
            (this.environmentIntensity = 1),
            (this.environmentRotation = new r.O()),
            (this.overrideMaterial = null),
            "undefined" != typeof __THREE_DEVTOOLS__ &&
              __THREE_DEVTOOLS__.dispatchEvent(
                new CustomEvent("observe", { detail: this })
              );
        }
        copy(t, e) {
          return (
            super.copy(t, e),
            null !== t.background && (this.background = t.background.clone()),
            null !== t.environment &&
              (this.environment = t.environment.clone()),
            null !== t.fog && (this.fog = t.fog.clone()),
            (this.backgroundBlurriness = t.backgroundBlurriness),
            (this.backgroundIntensity = t.backgroundIntensity),
            this.backgroundRotation.copy(t.backgroundRotation),
            (this.environmentIntensity = t.environmentIntensity),
            this.environmentRotation.copy(t.environmentRotation),
            null !== t.overrideMaterial &&
              (this.overrideMaterial = t.overrideMaterial.clone()),
            (this.matrixAutoUpdate = t.matrixAutoUpdate),
            this
          );
        }
        toJSON(t) {
          const e = super.toJSON(t);
          return (
            null !== this.fog && (e.object.fog = this.fog.toJSON()),
            this.backgroundBlurriness > 0 &&
              (e.object.backgroundBlurriness = this.backgroundBlurriness),
            1 !== this.backgroundIntensity &&
              (e.object.backgroundIntensity = this.backgroundIntensity),
            (e.object.backgroundRotation = this.backgroundRotation.toArray()),
            1 !== this.environmentIntensity &&
              (e.object.environmentIntensity = this.environmentIntensity),
            (e.object.environmentRotation = this.environmentRotation.toArray()),
            e
          );
        }
      }
    },
    477: (t, e, n) => {
      n.d(e, { G: () => r });
      var i = n(913);
      class r extends i.g {
        constructor(t, e, n, i, r, a, s, o, l) {
          super(t, e, n, i, r, a, s, o, l),
            (this.isCanvasTexture = !0),
            (this.needsUpdate = !0);
        }
      }
    },
    838: (t, e, n) => {
      n.d(e, { k: () => c });
      var i = n(108),
        r = n(656);
      let a;
      class s {
        static getDataURL(t) {
          if (/^data:/i.test(t.src)) return t.src;
          if ("undefined" == typeof HTMLCanvasElement) return t.src;
          let e;
          if (t instanceof HTMLCanvasElement) e = t;
          else {
            void 0 === a && (a = (0, i.qq)("canvas")),
              (a.width = t.width),
              (a.height = t.height);
            const n = a.getContext("2d");
            t instanceof ImageData
              ? n.putImageData(t, 0, 0)
              : n.drawImage(t, 0, 0, t.width, t.height),
              (e = a);
          }
          return e.width > 2048 || e.height > 2048
            ? (console.warn(
                "THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",
                t
              ),
              e.toDataURL("image/jpeg", 0.6))
            : e.toDataURL("image/png");
        }
        static sRGBToLinear(t) {
          if (
            ("undefined" != typeof HTMLImageElement &&
              t instanceof HTMLImageElement) ||
            ("undefined" != typeof HTMLCanvasElement &&
              t instanceof HTMLCanvasElement) ||
            ("undefined" != typeof ImageBitmap && t instanceof ImageBitmap)
          ) {
            const e = (0, i.qq)("canvas");
            (e.width = t.width), (e.height = t.height);
            const n = e.getContext("2d");
            n.drawImage(t, 0, 0, t.width, t.height);
            const a = n.getImageData(0, 0, t.width, t.height),
              s = a.data;
            for (let t = 0; t < s.length; t++)
              s[t] = 255 * (0, r.dk)(s[t] / 255);
            return n.putImageData(a, 0, 0), e;
          }
          if (t.data) {
            const e = t.data.slice(0);
            for (let t = 0; t < e.length; t++)
              e instanceof Uint8Array || e instanceof Uint8ClampedArray
                ? (e[t] = Math.floor(255 * (0, r.dk)(e[t] / 255)))
                : (e[t] = (0, r.dk)(e[t]));
            return { data: e, width: t.width, height: t.height };
          }
          return (
            console.warn(
              "THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."
            ),
            t
          );
        }
      }
      var o = n(823);
      let l = 0;
      class c {
        constructor(t = null) {
          (this.isSource = !0),
            Object.defineProperty(this, "id", { value: l++ }),
            (this.uuid = o.lk()),
            (this.data = t),
            (this.dataReady = !0),
            (this.version = 0);
        }
        set needsUpdate(t) {
          !0 === t && this.version++;
        }
        toJSON(t) {
          const e = void 0 === t || "string" == typeof t;
          if (!e && void 0 !== t.images[this.uuid]) return t.images[this.uuid];
          const n = { uuid: this.uuid, url: "" },
            i = this.data;
          if (null !== i) {
            let t;
            if (Array.isArray(i)) {
              t = [];
              for (let e = 0, n = i.length; e < n; e++)
                i[e].isDataTexture ? t.push(u(i[e].image)) : t.push(u(i[e]));
            } else t = u(i);
            n.url = t;
          }
          return e || (t.images[this.uuid] = n), n;
        }
      }
      function u(t) {
        return ("undefined" != typeof HTMLImageElement &&
          t instanceof HTMLImageElement) ||
          ("undefined" != typeof HTMLCanvasElement &&
            t instanceof HTMLCanvasElement) ||
          ("undefined" != typeof ImageBitmap && t instanceof ImageBitmap)
          ? s.getDataURL(t)
          : t.data
          ? {
              data: Array.from(t.data),
              width: t.width,
              height: t.height,
              type: t.data.constructor.name,
            }
          : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
      }
    },
    913: (t, e, n) => {
      n.d(e, { g: () => u });
      var i = n(168),
        r = n(128),
        a = n(823),
        s = n(279),
        o = n(326),
        l = n(838);
      let c = 0;
      class u extends i.Q {
        constructor(
          t = u.DEFAULT_IMAGE,
          e = u.DEFAULT_MAPPING,
          n = r.ghU,
          i = r.ghU,
          h = r.k6q,
          d = r.$_I,
          p = r.GWd,
          f = r.OUM,
          m = u.DEFAULT_ANISOTROPY,
          g = r.jf0
        ) {
          super(),
            (this.isTexture = !0),
            Object.defineProperty(this, "id", { value: c++ }),
            (this.uuid = a.lk()),
            (this.name = ""),
            (this.source = new l.k(t)),
            (this.mipmaps = []),
            (this.mapping = e),
            (this.channel = 0),
            (this.wrapS = n),
            (this.wrapT = i),
            (this.magFilter = h),
            (this.minFilter = d),
            (this.anisotropy = m),
            (this.format = p),
            (this.internalFormat = null),
            (this.type = f),
            (this.offset = new s.I(0, 0)),
            (this.repeat = new s.I(1, 1)),
            (this.center = new s.I(0, 0)),
            (this.rotation = 0),
            (this.matrixAutoUpdate = !0),
            (this.matrix = new o.d()),
            (this.generateMipmaps = !0),
            (this.premultiplyAlpha = !1),
            (this.flipY = !0),
            (this.unpackAlignment = 4),
            (this.colorSpace = g),
            (this.userData = {}),
            (this.version = 0),
            (this.onUpdate = null),
            (this.isRenderTargetTexture = !1),
            (this.pmremVersion = 0);
        }
        get image() {
          return this.source.data;
        }
        set image(t = null) {
          this.source.data = t;
        }
        updateMatrix() {
          this.matrix.setUvTransform(
            this.offset.x,
            this.offset.y,
            this.repeat.x,
            this.repeat.y,
            this.rotation,
            this.center.x,
            this.center.y
          );
        }
        clone() {
          return new this.constructor().copy(this);
        }
        copy(t) {
          return (
            (this.name = t.name),
            (this.source = t.source),
            (this.mipmaps = t.mipmaps.slice(0)),
            (this.mapping = t.mapping),
            (this.channel = t.channel),
            (this.wrapS = t.wrapS),
            (this.wrapT = t.wrapT),
            (this.magFilter = t.magFilter),
            (this.minFilter = t.minFilter),
            (this.anisotropy = t.anisotropy),
            (this.format = t.format),
            (this.internalFormat = t.internalFormat),
            (this.type = t.type),
            this.offset.copy(t.offset),
            this.repeat.copy(t.repeat),
            this.center.copy(t.center),
            (this.rotation = t.rotation),
            (this.matrixAutoUpdate = t.matrixAutoUpdate),
            this.matrix.copy(t.matrix),
            (this.generateMipmaps = t.generateMipmaps),
            (this.premultiplyAlpha = t.premultiplyAlpha),
            (this.flipY = t.flipY),
            (this.unpackAlignment = t.unpackAlignment),
            (this.colorSpace = t.colorSpace),
            (this.userData = JSON.parse(JSON.stringify(t.userData))),
            (this.needsUpdate = !0),
            this
          );
        }
        toJSON(t) {
          const e = void 0 === t || "string" == typeof t;
          if (!e && void 0 !== t.textures[this.uuid])
            return t.textures[this.uuid];
          const n = {
            metadata: {
              version: 4.6,
              type: "Texture",
              generator: "Texture.toJSON",
            },
            uuid: this.uuid,
            name: this.name,
            image: this.source.toJSON(t).uuid,
            mapping: this.mapping,
            channel: this.channel,
            repeat: [this.repeat.x, this.repeat.y],
            offset: [this.offset.x, this.offset.y],
            center: [this.center.x, this.center.y],
            rotation: this.rotation,
            wrap: [this.wrapS, this.wrapT],
            format: this.format,
            internalFormat: this.internalFormat,
            type: this.type,
            colorSpace: this.colorSpace,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            generateMipmaps: this.generateMipmaps,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment,
          };
          return (
            Object.keys(this.userData).length > 0 &&
              (n.userData = this.userData),
            e || (t.textures[this.uuid] = n),
            n
          );
        }
        dispose() {
          this.dispatchEvent({ type: "dispose" });
        }
        transformUv(t) {
          if (this.mapping !== r.UTZ) return t;
          if ((t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1))
            switch (this.wrapS) {
              case r.GJx:
                t.x = t.x - Math.floor(t.x);
                break;
              case r.ghU:
                t.x = t.x < 0 ? 0 : 1;
                break;
              case r.kTW:
                1 === Math.abs(Math.floor(t.x) % 2)
                  ? (t.x = Math.ceil(t.x) - t.x)
                  : (t.x = t.x - Math.floor(t.x));
            }
          if (t.y < 0 || t.y > 1)
            switch (this.wrapT) {
              case r.GJx:
                t.y = t.y - Math.floor(t.y);
                break;
              case r.ghU:
                t.y = t.y < 0 ? 0 : 1;
                break;
              case r.kTW:
                1 === Math.abs(Math.floor(t.y) % 2)
                  ? (t.y = Math.ceil(t.y) - t.y)
                  : (t.y = t.y - Math.floor(t.y));
            }
          return this.flipY && (t.y = 1 - t.y), t;
        }
        set needsUpdate(t) {
          !0 === t && (this.version++, (this.source.needsUpdate = !0));
        }
        set needsPMREMUpdate(t) {
          !0 === t && this.pmremVersion++;
        }
      }
      (u.DEFAULT_IMAGE = null),
        (u.DEFAULT_MAPPING = r.UTZ),
        (u.DEFAULT_ANISOTROPY = 1);
    },
    108: (t, e, n) => {
      function i(t) {
        for (let e = t.length - 1; e >= 0; --e) if (t[e] >= 65535) return !0;
        return !1;
      }
      function r(t) {
        return document.createElementNS("http://www.w3.org/1999/xhtml", t);
      }
      function a() {
        const t = r("canvas");
        return (t.style.display = "block"), t;
      }
      n.d(e, {
        AQ: () => i,
        je: () => l,
        lP: () => a,
        mc: () => o,
        qq: () => r,
      }),
        Int8Array,
        Uint8Array,
        Uint8ClampedArray,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array;
      const s = {};
      function o(t) {
        t in s || ((s[t] = !0), console.warn(t));
      }
      function l(t, e, n) {
        return new Promise(function (i, r) {
          setTimeout(function a() {
            switch (t.clientWaitSync(e, t.SYNC_FLUSH_COMMANDS_BIT, 0)) {
              case t.WAIT_FAILED:
                r();
                break;
              case t.TIMEOUT_EXPIRED:
                setTimeout(a, n);
                break;
              default:
                i();
            }
          }, n);
        });
      }
    },
  },
]);
